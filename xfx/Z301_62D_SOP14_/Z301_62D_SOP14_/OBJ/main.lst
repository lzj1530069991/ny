
                    Nyquest Technology Co., Ltd.

NYASM 2.30

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTAbits
                                    1-   15     	extern	_PORTBbits
                                    1-   16     	extern	_PCONbits
                                    1-   17     	extern	_BWUCONbits
                                    1-   18     	extern	_ABPLCONbits
                                    1-   19     	extern	_BPHCONbits
                                    1-   20     	extern	_INTEbits
                                    1-   21     	extern	_INTFbits
                                    1-   22     	extern	_ADMDbits
                                    1-   23     	extern	_ADRbits
                                    1-   24     	extern	_ADVREFHbits
                                    1-   25     	extern	_ADCRbits
                                    1-   26     	extern	_AWUCONbits
                                    1-   27     	extern	_PACONbits
                                    1-   28     	extern	_INTEDGbits
                                    1-   29     	extern	_ANAENbits
                                    1-   30     	extern	_RFCbits
                                    1-   31     	extern	_INTE2bits
                                    1-   32     	extern	_INDF
                                    1-   33     	extern	_TMR0
                                    1-   34     	extern	_PCL
                                    1-   35     	extern	_STATUS
                                    1-   36     	extern	_FSR
                                    1-   37     	extern	_PORTA
                                    1-   38     	extern	_PORTB
                                    1-   39     	extern	_PCON
                                    1-   40     	extern	_BWUCON
                                    1-   41     	extern	_PCHBUF
                                    1-   42     	extern	_ABPLCON
                                    1-   43     	extern	_BPHCON
                                    1-   44     	extern	_INTE
                                    1-   45     	extern	_INTF
                                    1-   46     	extern	_ADMD
                                    1-   47     	extern	_ADR
                                    1-   48     	extern	_ADD
                                    1-   49     	extern	_ADVREFH
                                    1-   50     	extern	_ADCR
                                    1-   51     	extern	_AWUCON
                                    1-   52     	extern	_PACON
                                    1-   53     	extern	_INTEDG
                                    1-   54     	extern	_TMRH
                                    1-   55     	extern	_ANAEN
                                    1-   56     	extern	_RFC
                                    1-   57     	extern	_TM3RH
                                    1-   58     	extern	_INTE2
                                    1-   59     	extern	_TMR1
                                    1-   60     	extern	_T1CR1
                                    1-   61     	extern	_T1CR2
                                    1-   62     	extern	_PWM1DUTY
                                    1-   63     	extern	_PS1CV
                                    1-   64     	extern	_BZ1CR
                                    1-   65     	extern	_IRCR
                                    1-   66     	extern	_TBHP
                                    1-   67     	extern	_TBHD
                                    1-   68     	extern	_TMR2
                                    1-   69     	extern	_T2CR1
                                    1-   70     	extern	_T2CR2
                                    1-   71     	extern	_PWM2DUTY
                                    1-   72     	extern	_PS2CV
                                    1-   73     	extern	_BZ2CR
                                    1-   74     	extern	_OSCCR
                                    1-   75     	extern	_TMR3
                                    1-   76     	extern	_T3CR1
                                    1-   77     	extern	_T3CR2
                                    1-   78     	extern	_PWM3DUTY
                                    1-   79     	extern	_PS3CV
                                    1-   80     	extern	_BZ3CR
                                    1-   81     	extern	_IOSTA
                                    1-   82     	extern	_IOSTB
                                    1-   83     	extern	_APHCON
                                    1-   84     	extern	_PS0CV
                                    1-   85     	extern	_BODCON
                                    1-   86     	extern	_CMPCR
                                    1-   87     	extern	_PCON1
                                    1-   88     	extern	_T0MD
                                    1-   89     	extern	___sdcc_saved_fsr
                                    1-   90     	extern	___sdcc_saved_stk00
                                    1-   91     	extern	___sdcc_saved_stk01
                                    1-   92     	extern	__nyc_ny8_startup
                                    1-   93     ;--------------------------------------------------------
                                    1-   94     ; global declarations
                                    1-   95     ;--------------------------------------------------------
                                    1-   96     	extern	_checkTempAD
                                    1-   97     	extern	_delayms
                                    1-   98     	extern	_F_wait_eoc
                                    1-   99     	extern	_initAD
                                    1-  100     	extern	_keyCtr
                                    1-  101     	extern	_pwmInit
                                    1-  102     	extern	_ledoff
                                    1-  103     	extern	_fjLed2
                                    1-  104     	extern	_fjLed1
                                    1-  105     	extern	_jrLed2
                                    1-  106     	extern	_jrLed1
                                    1-  107     	extern	_closeFJ
                                    1-  108     	extern	_workCtr
                                    1-  109     	extern	_isr
                                    1-  110     	extern	_main
                                    1-  111     	extern	_keyRead
                                    1-  112     	extern	_keyRead2
                                    1-  113     	extern	_F_AIN4_Convert
                                    1-  114     	extern	_F_AIN2_Convert
                                    1-  115     	extern	_checkOutA
                                    1-  116     	extern	_jrStep
                                    1-  117     	extern	_fjStep
                                    1-  118     	extern	_intCount
                                    1-  119     	extern	_IntFlag
                                    1-  120     	extern	_keyCount
                                    1-  121     	extern	_keyCount2
                                    1-  122     	extern	_R_AIN4_DATA
                                    1-  123     	extern	_R_AIN4_DATA_LB
                                    1-  124     	extern	_R_AIN2_DATA
                                    1-  125     	extern	_R_AIN2_DATA_LB
                                    1-  126     	extern	_pwmFlag
                                    1-  127     	extern	_waitTime
                                    1-  128     	extern	_jrCount
                                    1-  129     	extern	_jrLockFlag
                                    1-  131     	extern PSAVE
                                    1-  132     	extern SSAVE
                                    1-  133     	extern WSAVE
                                    1-  134     	extern STK04
                                    1-  135     	extern STK03
                                    1-  136     	extern STK02
                                    1-  137     	extern STK01
                                    1-  138     	extern STK00
                                    1-  140     .segment "uninit", 0x20000040
 20000040                           1-  141     PSAVE:
                                    1-  142     	.res 1
 20000041                           1-  143     SSAVE:
                                    1-  144     	.res 1
 20000042                           1-  145     WSAVE:
                                    1-  146     	.res 1
 20000043                           1-  147     STK04:
                                    1-  148     	.res 1
 20000044                           1-  149     STK03:
                                    1-  150     	.res 1
 20000045                           1-  151     STK02:
                                    1-  152     	.res 1
 20000046                           1-  153     STK01:
                                    1-  154     	.res 1
 20000047                           1-  155     STK00:
                                    1-  156     	.res 1
                                    1-  158     ;--------------------------------------------------------
                                    1-  159     ; global definitions
                                    1-  160     ;--------------------------------------------------------
                                    1-  161     .segment "uninit"
     0000                           1-  162     _R_AIN4_DATA:
                                    1-  163     	.res	2
                                    1-  166     .segment "uninit"
     0000                           1-  167     _R_AIN4_DATA_LB:
                                    1-  168     	.res	1
                                    1-  171     .segment "uninit"
     0000                           1-  172     _R_AIN2_DATA:
                                    1-  173     	.res	2
                                    1-  176     .segment "uninit"
     0000                           1-  177     _R_AIN2_DATA_LB:
                                    1-  178     	.res	1
                                    1-  181     ;--------------------------------------------------------
                                    1-  182     ; absolute symbol definitions
                                    1-  183     ;--------------------------------------------------------
                                    1-  184     ;--------------------------------------------------------
                                    1-  185     ; compiler-defined variables
                                    1-  186     ;--------------------------------------------------------
                                    1-  187     .segment "uninit"
     0000                           1-  188     r0x1029:
                                    1-  189     	.res	1
                                    1-  190     .segment "uninit"
     0000                           1-  191     r0x102A:
                                    1-  192     	.res	1
                                    1-  193     .segment "uninit"
     0000                           1-  194     r0x102B:
                                    1-  195     	.res	1
                                    1-  196     .segment "uninit"
     0000                           1-  197     r0x101F:
                                    1-  198     	.res	1
                                    1-  199     .segment "uninit"
     0000                           1-  200     r0x1020:
                                    1-  201     	.res	1
                                    1-  202     .segment "uninit"
     0000                           1-  203     r0x1021:
                                    1-  204     	.res	1
                                    1-  205     .segment "uninit"
     0000                           1-  206     r0x1024:
                                    1-  207     	.res	1
                                    1-  208     .segment "uninit"
     0000                           1-  209     r0x1015:
                                    1-  210     	.res	1
                                    1-  211     .segment "uninit"
     0000                           1-  212     r0x1016:
                                    1-  213     	.res	1
                                    1-  214     .segment "uninit"
     0000                           1-  215     r0x1017:
                                    1-  216     	.res	1
                                    1-  217     .segment "uninit"
     0000                           1-  218     r0x101A:
                                    1-  219     	.res	1
                                    1-  220     .segment "uninit"
     0000                           1-  221     r0x1013:
                                    1-  222     	.res	1
                                    1-  223     .segment "uninit"
     0000                           1-  224     r0x1014:
                                    1-  225     	.res	1
                                    1-  226     .segment "uninit"
     0000                           1-  227     r0x1027:
                                    1-  228     	.res	1
                                    1-  229     .segment "uninit"
     0000                           1-  230     r0x1028:
                                    1-  231     	.res	1
                                    1-  232     .segment "uninit"
     0000                           1-  233     r0x101D:
                                    1-  234     	.res	1
                                    1-  235     .segment "uninit"
     0000                           1-  236     r0x101E:
                                    1-  237     	.res	1
                                    1-  238     ;--------------------------------------------------------
                                    1-  239     ; initialized data
                                    1-  240     ;--------------------------------------------------------
                                    1-  242     .segment "idata"
     0000                           1-  243     _jrStep:
     0000 0000                      1-  244     	dw	0x00
                                    1-  248     .segment "idata"
     0000                           1-  249     _fjStep:
     0000 0000                      1-  250     	dw	0x00
                                    1-  254     .segment "idata"
     0000                           1-  255     _intCount:
     0000 0000                      1-  256     	dw	0x00
                                    1-  260     .segment "idata"
     0000                           1-  261     _IntFlag:
     0000 0000                      1-  262     	dw	0x00
                                    1-  266     .segment "idata"
     0000                           1-  267     _keyCount:
     0000 0000                      1-  268     	dw	0x00
                                    1-  272     .segment "idata"
     0000                           1-  273     _keyCount2:
     0000 0000                      1-  274     	dw	0x00
                                    1-  278     .segment "idata"
     0000                           1-  279     _pwmFlag:
     0000 0000                      1-  280     	dw	0x00
                                    1-  284     .segment "idata"
     0000                           1-  285     _waitTime:
     0000 0000                      1-  286     	dw	0x00
                                    1-  290     .segment "idata"
     0000                           1-  291     _jrCount:
     0000 0000                      1-  292     	dw	0x00
                                    1-  296     .segment "idata"
     0000                           1-  297     _jrLockFlag:
     0000 0000                      1-  298     	dw	0x00
                                    1-  301     ;--------------------------------------------------------
                                    1-  302     ; overlayable items in internal ram 
                                    1-  303     ;--------------------------------------------------------
                                    1-  304     ;	udata_ovr
                                    1-  305     ;--------------------------------------------------------
                                    1-  306     ; reset vector 
                                    1-  307     ;--------------------------------------------------------
                                    1-  308     ORG	0x0000
     0000 3rrr                      1-  309     	LGOTO	__nyc_ny8_startup
                                    1-  310     ;--------------------------------------------------------
                                    1-  311     ; interrupt and initialization code
                                    1-  312     ;--------------------------------------------------------
                                    1-  313     ORG 0x0008
                                    1-  314     	MGOTO	__sdcc_interrupt
     0008 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  316     .segment "code"
     0000                           1-  317     __sdcc_interrupt:
                                    1-  318     ;***
                                    1-  319     ;  pBlock Stats: dbName = I
                                    1-  320     ;***
                                    1-  321     ;2 compiler assigned registers:
                                    1-  322     ;   STK00
                                    1-  323     ;   STK01
                                    1-  324     ;; Starting pCode block
     0000                           1-  325     _isr:
                                    1-  326     ; 0 exit points
                                    1-  327     	.line	51, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  328     	MOVAR	WSAVE
     0001 1503                      1-  329     	SWAPR	STATUS,W
     0002 0283                      1-  330     	CLRR	STATUS
     0003 00rr                      1-  331     	MOVAR	SSAVE
     0004 010A                      1-  332     	MOVR	PCHBUF,W
     0005 028A                      1-  333     	CLRR	PCHBUF
     0006 00rr                      1-  334     	MOVAR	PSAVE
     0007 0104                      1-  335     	MOVR	FSR,W
                                    1-  336     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-  110 m1      .banksel ram_address
     0009 00rr                      1-  337     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  338     	MOVR	STK00,W
                                    1-  339     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-  110 m1      .banksel ram_address
     000C 00rr                      1-  340     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  341     	MOVR	STK01,W
                                    1-  342     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-  110 m1      .banksel ram_address
     000F 00rr                      1-  343     	MOVAR	___sdcc_saved_stk01
                                    1-  344     	.line	53, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  345     	BTRSS	_INTFbits,0
                                    1-  346     	MGOTO	_00108_DS_
     0011 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  347     	.line	55, "main.c"; 	TMR0 += 55;
     0012 2137                      1-  348     	MOVIA	0x37
     0013 03rr                      1-  349     	ADDAR	_TMR0,F
                                    1-  350     	.line	57, "main.c"; 	if(++intCount >= 100)
                                    1-  351     	BANKSEL	_intCount
     0014 rrrr                      3-  110 m1      .banksel ram_address
     0015 05rr                      1-  352     	INCR	_intCount,F
                                    1-  353     ;;unsigned compare: left < lit (0x64=100), size=1
     0016 2164                      1-  354     	MOVIA	0x64
     0017 04rr                      1-  355     	SUBAR	_intCount,W
     0018 0803                      1-  356     	BTRSS	STATUS,0
                                    1-  357     	MGOTO	_00108_DS_
     0019 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  358     	.line	59, "main.c"; 	IntFlag = 1;
     001A 2101                      1-  359     	MOVIA	0x01
                                    1-  360     	BANKSEL	_IntFlag
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 00rr                      1-  361     	MOVAR	_IntFlag
                                    1-  362     	.line	60, "main.c"; 	intCount = 0;
                                    1-  363     	BANKSEL	_intCount
     001D rrrr                      3-  110 m1      .banksel ram_address
     001E 02rr                      1-  364     	CLRR	_intCount
     001F                           1-  365     _00108_DS_:
                                    1-  366     	.line	67, "main.c"; 	if(INTFbits.PABIF)
     001F 08rr                      1-  367     	BTRSS	_INTFbits,1
                                    1-  368     	MGOTO	_00110_DS_
     0020 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  369     	.line	69, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)
     0021 21FD                      1-  370     	MOVIA	0xfd
     0022 00rr                      1-  371     	MOVAR	_INTF
     0023                           1-  372     _00110_DS_:
                                    1-  373     	.line	72, "main.c"; 	INTF = 0;
     0023 02rr                      1-  374     	CLRR	_INTF
                                    1-  375     	.line	74, "main.c"; 	}
                                    1-  376     	BANKSEL	___sdcc_saved_stk01
     0024 rrrr                      3-  110 m1      .banksel ram_address
     0025 01rr                      1-  377     	MOVR	___sdcc_saved_stk01,W
     0026 00rr                      1-  378     	MOVAR	STK01
                                    1-  379     	BANKSEL	___sdcc_saved_stk00
     0027 rrrr                      3-  110 m1      .banksel ram_address
     0028 01rr                      1-  380     	MOVR	___sdcc_saved_stk00,W
     0029 00rr                      1-  381     	MOVAR	STK00
                                    1-  382     	BANKSEL	___sdcc_saved_fsr
     002A rrrr                      3-  110 m1      .banksel ram_address
     002B 01rr                      1-  383     	MOVR	___sdcc_saved_fsr,W
     002C 0084                      1-  384     	MOVAR	FSR
     002D 01rr                      1-  385     	MOVR	PSAVE,W
     002E 008A                      1-  386     	MOVAR	PCHBUF
     002F 0283                      1-  387     	CLRR	STATUS
     0030 15rr                      1-  388     	SWAPR	SSAVE,W
     0031 0083                      1-  389     	MOVAR	STATUS
     0032 15rr                      1-  390     	SWAPR	WSAVE,F
     0033 15rr                      1-  391     	SWAPR	WSAVE,W
     0034                           1-  392     END_OF_INTERRUPT:
     0034 0011                      1-  393     	RETIE	
                                    1-  395     ;--------------------------------------------------------
                                    1-  396     ; code
                                    1-  397     ;--------------------------------------------------------
                                    1-  398     ;***
                                    1-  399     ;  pBlock Stats: dbName = M
                                    1-  400     ;***
                                    1-  401     ;has an exit
                                    1-  402     ;functions called:
                                    1-  403     ;   _initAD
                                    1-  404     ;   _keyCtr
                                    1-  405     ;   _workCtr
                                    1-  406     ;   _initAD
                                    1-  407     ;   _keyCtr
                                    1-  408     ;   _workCtr
                                    1-  409     ;; Starting pCode block
                                    1-  410     .segment "code"; module=main, function=_main
     0000                           1-  412     _main:
                                    1-  413     ; 2 exit points
                                    1-  414     	.line	79, "main.c"; 	DISI();
     0000 0013                      1-  415     	DISI
                                    1-  416     	.line	81, "main.c"; 	IOSTA = 0x2B;					// Set PortA as output port
     0001 212B                      1-  417     	MOVIA	0x2b
     0002 000r                      1-  418     	IOST	_IOSTA
                                    1-  419     	.line	82, "main.c"; 	IOSTB = 0x01;
     0003 2101                      1-  420     	MOVIA	0x01
     0004 000r                      1-  421     	IOST	_IOSTB
                                    1-  422     	.line	83, "main.c"; 	PORTA = 0x00;							// PortA Data Register = 0x00
     0005 02rr                      1-  423     	CLRR	_PORTA
                                    1-  424     	.line	84, "main.c"; 	APHCON = 0xFF;
     0006 21FF                      1-  425     	MOVIA	0xff
     0007 000r                      1-  426     	IOST	_APHCON
                                    1-  427     	.line	85, "main.c"; 	BPHCON = 0xFF;
     0008 00rr                      1-  428     	MOVAR	_BPHCON
                                    1-  429     	.line	86, "main.c"; 	ABPLCON = 0xFF;
     0009 00rr                      1-  430     	MOVAR	_ABPLCON
                                    1-  431     	.line	87, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000A 2101                      1-  432     	MOVIA	0x01
     000B 00rr                      1-  433     	MOVAR	_INTE
                                    1-  434     	.line	89, "main.c"; 	PCON1 = C_TMR0_Dis;
     000C 0200                      1-  435     	CLRA	
     000D 000r                      1-  436     	IOST	_PCON1
                                    1-  437     	.line	91, "main.c"; 	TMR0 = 55;
     000E 2137                      1-  438     	MOVIA	0x37
     000F 00rr                      1-  439     	MOVAR	_TMR0
                                    1-  440     	.line	92, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0010 0200                      1-  441     	CLRA	
     0011 0003                      1-  442     	T0MD	
                                    1-  443     	.line	94, "main.c"; 	PCON1 = C_TMR0_En;
     0012 2101                      1-  444     	MOVIA	0x01
     0013 000r                      1-  445     	IOST	_PCON1
                                    1-  446     	.line	97, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0014 2188                      1-  447     	MOVIA	0x88
     0015 00rr                      1-  448     	MOVAR	_PCON
                                    1-  449     	.line	100, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0016 2101                      1-  450     	MOVIA	0x01
     0017 000r                      1-  451     	IOST	_PCON1
                                    1-  452     	.line	101, "main.c"; 	ENI();
     0018 0004                      1-  453     	ENI
                                    1-  454     	.line	102, "main.c"; 	initAD();
                                    1-  455     	MCALL	_initAD
     0019 2rrr                      3-   66 m1      LCALL rom_address
     001A                           1-  456     _00118_DS_:
                                    1-  457     	.line	105, "main.c"; 	CLRWDT();							// Clear WatchDog
     001A 0002                      1-  458     	clrwdt
                                    1-  459     	.line	106, "main.c"; 	if(!IntFlag)
                                    1-  460     	BANKSEL	_IntFlag
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 01rr                      1-  461     	MOVR	_IntFlag,W
     001D 0D03                      1-  462     	BTRSC	STATUS,2
                                    1-  463     	MGOTO	_00118_DS_
     001E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  464     	.line	108, "main.c"; 	IntFlag = 0;
     001F 02rr                      1-  465     	CLRR	_IntFlag
                                    1-  466     	.line	109, "main.c"; 	keyCtr();
                                    1-  467     	MCALL	_keyCtr
     0020 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  468     	.line	110, "main.c"; 	workCtr();
                                    1-  469     	MCALL	_workCtr
     0021 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  470     	MGOTO	_00118_DS_
     0022 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  471     	.line	115, "main.c"; 	}
                                    1-  472     	RETURN	
     0023 0010                      3-   40 m1      ret
                                    1-  473     ; exit point of _main
                                    1-  475     ;***
                                    1-  476     ;  pBlock Stats: dbName = C
                                    1-  477     ;***
                                    1-  478     ;has an exit
                                    1-  479     ;functions called:
                                    1-  480     ;   _F_AIN2_Convert
                                    1-  481     ;   _F_AIN2_Convert
                                    1-  482     ;4 compiler assigned registers:
                                    1-  483     ;   r0x101B
                                    1-  484     ;   r0x101C
                                    1-  485     ;   r0x101D
                                    1-  486     ;   r0x101E
                                    1-  487     ;; Starting pCode block
                                    1-  488     .segment "code"; module=main, function=_checkTempAD
     0000                           1-  490     _checkTempAD:
                                    1-  491     ; 2 exit points
                                    1-  492     	.line	482, "main.c"; 	R_AIN2_DATA = R_AIN2_DATA_LB = 0x00;
                                    1-  493     	BANKSEL	_R_AIN2_DATA_LB
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 02rr                      1-  494     	CLRR	_R_AIN2_DATA_LB
                                    1-  495     	BANKSEL	_R_AIN2_DATA
     0002 rrrr                      3-  110 m1      .banksel ram_address
     0003 02rr                      1-  496     	CLRR	_R_AIN2_DATA
     0004 02rr                      1-  497     	CLRR	(_R_AIN2_DATA + 1)
                                    1-  498     	.line	483, "main.c"; 	F_AIN2_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1-  499     	MOVIA	0x08
                                    1-  500     	MCALL	_F_AIN2_Convert
     0006 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  501     	.line	484, "main.c"; 	R_AIN2_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1-  502     	BANKSEL	_R_AIN2_DATA
     0007 rrrr                      3-  110 m1      .banksel ram_address
     0008 15rr                      1-  503     	SWAPR	(_R_AIN2_DATA + 1),W
     0009 22F0                      1-  504     	ANDIA	0xf0
     000A 00rr                      1-  505     	MOVAR	(_R_AIN2_DATA + 1)
     000B 15rr                      1-  506     	SWAPR	_R_AIN2_DATA,W
     000C 00rr                      1-  507     	MOVAR	_R_AIN2_DATA
     000D 220F                      1-  508     	ANDIA	0x0f
     000E 11rr                      1-  509     	IORAR	(_R_AIN2_DATA + 1),F
     000F 12rr                      1-  510     	XORAR	_R_AIN2_DATA,F
                                    1-  511     	.line	485, "main.c"; 	R_AIN2_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1-  512     	MOVIA	0xf0
                                    1-  513     	BANKSEL	_R_AIN2_DATA_LB
     0011 rrrr                      3-  110 m1      .banksel ram_address
     0012 10rr                      1-  514     	ANDAR	_R_AIN2_DATA_LB,F
                                    1-  515     	.line	486, "main.c"; 	R_AIN2_DATA += R_AIN2_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1-  516     	MOVR	_R_AIN2_DATA_LB,W
                                    1-  517     	BANKSEL	r0x101D
     0014 rrrr                      3-  110 m1      .banksel ram_address
     0015 00rr                      1-  518     	MOVAR	r0x101D
                                    1-  519     ;;1	MOVAR	r0x101B
                                    1-  520     ;;1	CLRR	r0x101C
                                    1-  521     ;;106	MOVR	r0x101B,W
     0016 2100                      1-  522     	MOVIA	0x00
                                    1-  523     	BANKSEL	r0x101E
     0017 rrrr                      3-  110 m1      .banksel ram_address
     0018 00rr                      1-  524     	MOVAR	r0x101E
                                    1-  525     	BANKSEL	r0x101D
     0019 rrrr                      3-  110 m1      .banksel ram_address
     001A 01rr                      1-  526     	MOVR	r0x101D,W
                                    1-  527     	BANKSEL	_R_AIN2_DATA
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 03rr                      1-  528     	ADDAR	_R_AIN2_DATA,F
                                    1-  529     	BANKSEL	r0x101E
     001D rrrr                      3-  110 m1      .banksel ram_address
     001E 01rr                      1-  530     	MOVR	r0x101E,W
     001F 0C03                      1-  531     	BTRSC	STATUS,0
     0020 05rr                      1-  532     	INCR	r0x101E,W
     0021 0D03                      1-  533     	BTRSC	STATUS,2
                                    1-  534     	MGOTO	_00001_DS_
     0022 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  535     	BANKSEL	_R_AIN2_DATA
     0023 rrrr                      3-  110 m1      .banksel ram_address
     0024 03rr                      1-  536     	ADDAR	(_R_AIN2_DATA + 1),F
                                    1-  537     ;;shiftRight_Left2ResultLit:5673: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1-  538     _00001_DS_:
                                    1-  539     	.line	487, "main.c"; 	R_AIN2_DATA >>=3;					// R_AIN0_DATA divided 
     0025 1C03                      1-  540     	BCR	STATUS,0
                                    1-  541     	BANKSEL	_R_AIN2_DATA
     0026 rrrr                      3-  110 m1      .banksel ram_address
     0027 13rr                      1-  542     	RRR	(_R_AIN2_DATA + 1),F
     0028 13rr                      1-  543     	RRR	_R_AIN2_DATA,F
                                    1-  544     ;;shiftRight_Left2ResultLit:5673: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1-  545     	BCR	STATUS,0
     002A 13rr                      1-  546     	RRR	(_R_AIN2_DATA + 1),F
     002B 13rr                      1-  547     	RRR	_R_AIN2_DATA,F
                                    1-  548     ;;shiftRight_Left2ResultLit:5673: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1-  549     	BCR	STATUS,0
     002D 13rr                      1-  550     	RRR	(_R_AIN2_DATA + 1),F
     002E 13rr                      1-  551     	RRR	_R_AIN2_DATA,F
                                    1-  552     	.line	490, "main.c"; 	}
                                    1-  553     	RETURN	
     002F 0010                      3-   40 m1      ret
                                    1-  554     ; exit point of _checkTempAD
                                    1-  556     ;***
                                    1-  557     ;  pBlock Stats: dbName = C
                                    1-  558     ;***
                                    1-  559     ;has an exit
                                    1-  560     ;functions called:
                                    1-  561     ;   _F_AIN4_Convert
                                    1-  562     ;   _F_AIN4_Convert
                                    1-  563     ;4 compiler assigned registers:
                                    1-  564     ;   r0x1025
                                    1-  565     ;   r0x1026
                                    1-  566     ;   r0x1027
                                    1-  567     ;   r0x1028
                                    1-  568     ;; Starting pCode block
                                    1-  569     .segment "code"; module=main, function=_checkOutA
     0000                           1-  571     _checkOutA:
                                    1-  572     ; 2 exit points
                                    1-  573     	.line	464, "main.c"; 	R_AIN4_DATA = R_AIN4_DATA_LB = 0x00;
                                    1-  574     	BANKSEL	_R_AIN4_DATA_LB
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 02rr                      1-  575     	CLRR	_R_AIN4_DATA_LB
                                    1-  576     	BANKSEL	_R_AIN4_DATA
     0002 rrrr                      3-  110 m1      .banksel ram_address
     0003 02rr                      1-  577     	CLRR	_R_AIN4_DATA
     0004 02rr                      1-  578     	CLRR	(_R_AIN4_DATA + 1)
                                    1-  579     	.line	465, "main.c"; 	F_AIN4_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1-  580     	MOVIA	0x08
                                    1-  581     	MCALL	_F_AIN4_Convert
     0006 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  582     	.line	466, "main.c"; 	R_AIN4_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1-  583     	BANKSEL	_R_AIN4_DATA
     0007 rrrr                      3-  110 m1      .banksel ram_address
     0008 15rr                      1-  584     	SWAPR	(_R_AIN4_DATA + 1),W
     0009 22F0                      1-  585     	ANDIA	0xf0
     000A 00rr                      1-  586     	MOVAR	(_R_AIN4_DATA + 1)
     000B 15rr                      1-  587     	SWAPR	_R_AIN4_DATA,W
     000C 00rr                      1-  588     	MOVAR	_R_AIN4_DATA
     000D 220F                      1-  589     	ANDIA	0x0f
     000E 11rr                      1-  590     	IORAR	(_R_AIN4_DATA + 1),F
     000F 12rr                      1-  591     	XORAR	_R_AIN4_DATA,F
                                    1-  592     	.line	467, "main.c"; 	R_AIN4_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1-  593     	MOVIA	0xf0
                                    1-  594     	BANKSEL	_R_AIN4_DATA_LB
     0011 rrrr                      3-  110 m1      .banksel ram_address
     0012 10rr                      1-  595     	ANDAR	_R_AIN4_DATA_LB,F
                                    1-  596     	.line	468, "main.c"; 	R_AIN4_DATA += R_AIN4_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1-  597     	MOVR	_R_AIN4_DATA_LB,W
                                    1-  598     	BANKSEL	r0x1027
     0014 rrrr                      3-  110 m1      .banksel ram_address
     0015 00rr                      1-  599     	MOVAR	r0x1027
                                    1-  600     ;;1	MOVAR	r0x1025
                                    1-  601     ;;1	CLRR	r0x1026
                                    1-  602     ;;105	MOVR	r0x1025,W
     0016 2100                      1-  603     	MOVIA	0x00
                                    1-  604     	BANKSEL	r0x1028
     0017 rrrr                      3-  110 m1      .banksel ram_address
     0018 00rr                      1-  605     	MOVAR	r0x1028
                                    1-  606     	BANKSEL	r0x1027
     0019 rrrr                      3-  110 m1      .banksel ram_address
     001A 01rr                      1-  607     	MOVR	r0x1027,W
                                    1-  608     	BANKSEL	_R_AIN4_DATA
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 03rr                      1-  609     	ADDAR	_R_AIN4_DATA,F
                                    1-  610     	BANKSEL	r0x1028
     001D rrrr                      3-  110 m1      .banksel ram_address
     001E 01rr                      1-  611     	MOVR	r0x1028,W
     001F 0C03                      1-  612     	BTRSC	STATUS,0
     0020 05rr                      1-  613     	INCR	r0x1028,W
     0021 0D03                      1-  614     	BTRSC	STATUS,2
                                    1-  615     	MGOTO	_00002_DS_
     0022 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  616     	BANKSEL	_R_AIN4_DATA
     0023 rrrr                      3-  110 m1      .banksel ram_address
     0024 03rr                      1-  617     	ADDAR	(_R_AIN4_DATA + 1),F
                                    1-  618     ;;shiftRight_Left2ResultLit:5673: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1-  619     _00002_DS_:
                                    1-  620     	.line	469, "main.c"; 	R_AIN4_DATA >>=3;					// R_AIN0_DATA divided 8
     0025 1C03                      1-  621     	BCR	STATUS,0
                                    1-  622     	BANKSEL	_R_AIN4_DATA
     0026 rrrr                      3-  110 m1      .banksel ram_address
     0027 13rr                      1-  623     	RRR	(_R_AIN4_DATA + 1),F
     0028 13rr                      1-  624     	RRR	_R_AIN4_DATA,F
                                    1-  625     ;;shiftRight_Left2ResultLit:5673: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1-  626     	BCR	STATUS,0
     002A 13rr                      1-  627     	RRR	(_R_AIN4_DATA + 1),F
     002B 13rr                      1-  628     	RRR	_R_AIN4_DATA,F
                                    1-  629     ;;shiftRight_Left2ResultLit:5673: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1-  630     	BCR	STATUS,0
     002D 13rr                      1-  631     	RRR	(_R_AIN4_DATA + 1),F
     002E 13rr                      1-  632     	RRR	_R_AIN4_DATA,F
                                    1-  633     	.line	475, "main.c"; 	}
                                    1-  634     	RETURN	
     002F 0010                      3-   40 m1      ret
                                    1-  635     ; exit point of _checkOutA
                                    1-  637     ;***
                                    1-  638     ;  pBlock Stats: dbName = C
                                    1-  639     ;***
                                    1-  640     ;has an exit
                                    1-  641     ;2 compiler assigned registers:
                                    1-  642     ;   r0x1013
                                    1-  643     ;   r0x1014
                                    1-  644     ;; Starting pCode block
                                    1-  645     .segment "code"; module=main, function=_delayms
                                    1-  647     ;local variable name mapping:
     0000                           1-  650     _delayms:
                                    1-  651     ; 2 exit points
                                    1-  652     	.line	454, "main.c"; 	void delayms(u8t time)
                                    1-  653     	BANKSEL	r0x1013
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1-  654     	MOVAR	r0x1013
                                    1-  655     	.line	456, "main.c"; 	for(u8t i=0;i<time;i++)
                                    1-  656     	BANKSEL	r0x1014
     0002 rrrr                      3-  110 m1      .banksel ram_address
     0003 02rr                      1-  657     	CLRR	r0x1014
     0004                           1-  658     _00338_DS_:
                                    1-  659     	BANKSEL	r0x1013
     0004 rrrr                      3-  110 m1      .banksel ram_address
     0005 01rr                      1-  660     	MOVR	r0x1013,W
                                    1-  661     	BANKSEL	r0x1014
     0006 rrrr                      3-  110 m1      .banksel ram_address
     0007 04rr                      1-  662     	SUBAR	r0x1014,W
     0008 0C03                      1-  663     	BTRSC	STATUS,0
                                    1-  664     	MGOTO	_00340_DS_
     0009 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  665     	.line	457, "main.c"; 	NOP();
     000A 0000                      1-  666     	nop
                                    1-  667     	.line	456, "main.c"; 	for(u8t i=0;i<time;i++)
                                    1-  668     	BANKSEL	r0x1014
     000B rrrr                      3-  110 m1      .banksel ram_address
     000C 05rr                      1-  669     	INCR	r0x1014,F
                                    1-  670     	MGOTO	_00338_DS_
     000D 3rrr                      3-   63 m1      LGOTO rom_address
     000E                           1-  671     _00340_DS_:
                                    1-  672     	.line	458, "main.c"; 	}
                                    1-  673     	RETURN	
     000E 0010                      3-   40 m1      ret
                                    1-  674     ; exit point of _delayms
                                    1-  676     ;***
                                    1-  677     ;  pBlock Stats: dbName = C
                                    1-  678     ;***
                                    1-  679     ;has an exit
                                    1-  680     ;; Starting pCode block
                                    1-  681     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  683     _F_wait_eoc:
                                    1-  684     ; 2 exit points
     0000                           1-  685     _00331_DS_:
                                    1-  686     	.line	448, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  687     	BTRSS	_ADMDbits,5
                                    1-  688     	MGOTO	_00331_DS_
     0001 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  689     	.line	450, "main.c"; 	}
                                    1-  690     	RETURN	
     0002 0010                      3-   40 m1      ret
                                    1-  691     ; exit point of _F_wait_eoc
                                    1-  693     ;***
                                    1-  694     ;  pBlock Stats: dbName = C
                                    1-  695     ;***
                                    1-  696     ;has an exit
                                    1-  697     ;functions called:
                                    1-  698     ;   _delayms
                                    1-  699     ;   _F_wait_eoc
                                    1-  700     ;   _delayms
                                    1-  701     ;   _F_wait_eoc
                                    1-  702     ;6 compiler assigned registers:
                                    1-  703     ;   r0x1015
                                    1-  704     ;   r0x1016
                                    1-  705     ;   r0x1017
                                    1-  706     ;   r0x1018
                                    1-  707     ;   r0x1019
                                    1-  708     ;   r0x101A
                                    1-  709     ;; Starting pCode block
                                    1-  710     .segment "code"; module=main, function=_F_AIN2_Convert
                                    1-  712     ;local variable name mapping:
     0000                           1-  715     _F_AIN2_Convert:
                                    1-  716     ; 2 exit points
                                    1-  717     	.line	431, "main.c"; 	void F_AIN2_Convert(char count)
                                    1-  718     	BANKSEL	r0x1015
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1-  719     	MOVAR	r0x1015
                                    1-  720     	.line	433, "main.c"; 	R_AIN2_DATA=R_AIN2_DATA_LB=0x00;   
                                    1-  721     	BANKSEL	_R_AIN2_DATA_LB
     0002 rrrr                      3-  110 m1      .banksel ram_address
     0003 02rr                      1-  722     	CLRR	_R_AIN2_DATA_LB
                                    1-  723     	BANKSEL	_R_AIN2_DATA
     0004 rrrr                      3-  110 m1      .banksel ram_address
     0005 02rr                      1-  724     	CLRR	_R_AIN2_DATA
     0006 02rr                      1-  725     	CLRR	(_R_AIN2_DATA + 1)
                                    1-  726     	.line	435, "main.c"; 	ADMD  = 0x90 | C_ADC_PA1;				// Select AIN6(PB1) pad as ADC input
     0007 2191                      1-  727     	MOVIA	0x91
     0008 00rr                      1-  728     	MOVAR	_ADMD
                                    1-  729     	.line	436, "main.c"; 	delayms(200);	
     0009 21C8                      1-  730     	MOVIA	0xc8
                                    1-  731     	MCALL	_delayms
     000A 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  732     	.line	437, "main.c"; 	for(i=1;i<=count;i++)
     000B 2101                      1-  733     	MOVIA	0x01
                                    1-  734     	BANKSEL	r0x1016
     000C rrrr                      3-  110 m1      .banksel ram_address
     000D 00rr                      1-  735     	MOVAR	r0x1016
     000E                           1-  736     _00324_DS_:
                                    1-  737     	BANKSEL	r0x1016
     000E rrrr                      3-  110 m1      .banksel ram_address
     000F 01rr                      1-  738     	MOVR	r0x1016,W
                                    1-  739     	BANKSEL	r0x1015
     0010 rrrr                      3-  110 m1      .banksel ram_address
     0011 04rr                      1-  740     	SUBAR	r0x1015,W
     0012 0803                      1-  741     	BTRSS	STATUS,0
                                    1-  742     	MGOTO	_00326_DS_
     0013 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  743     	.line	439, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0014 1Brr                      1-  744     	BSR	_ADMDbits,6
                                    1-  745     	.line	440, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
                                    1-  746     	MCALL	_F_wait_eoc
     0015 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  747     	.line	441, "main.c"; 	R_AIN2_DATA_LB += ( 0x0F & ADR); 
     0016 210F                      1-  748     	MOVIA	0x0f
     0017 10rr                      1-  749     	ANDAR	_ADR,W
                                    1-  750     ;;3	MOVAR	r0x1017
                                    1-  751     	BANKSEL	_R_AIN2_DATA_LB
     0018 rrrr                      3-  110 m1      .banksel ram_address
     0019 03rr                      1-  752     	ADDAR	_R_AIN2_DATA_LB,F
                                    1-  753     	.line	442, "main.c"; 	R_AIN2_DATA    += ADD; 
     001A 01rr                      1-  754     	MOVR	_ADD,W
                                    1-  755     	BANKSEL	r0x1017
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 00rr                      1-  756     	MOVAR	r0x1017
                                    1-  757     ;;1	CLRR	r0x1018
                                    1-  758     ;;104	MOVR	r0x1017,W
                                    1-  759     ;;102	MOVAR	r0x1019
     001D 2100                      1-  760     	MOVIA	0x00
                                    1-  761     	BANKSEL	r0x101A
     001E rrrr                      3-  110 m1      .banksel ram_address
     001F 00rr                      1-  762     	MOVAR	r0x101A
                                    1-  763     ;;103	MOVR	r0x1019,W
                                    1-  764     	BANKSEL	r0x1017
     0020 rrrr                      3-  110 m1      .banksel ram_address
     0021 01rr                      1-  765     	MOVR	r0x1017,W
                                    1-  766     	BANKSEL	_R_AIN2_DATA
     0022 rrrr                      3-  110 m1      .banksel ram_address
     0023 03rr                      1-  767     	ADDAR	_R_AIN2_DATA,F
                                    1-  768     	BANKSEL	r0x101A
     0024 rrrr                      3-  110 m1      .banksel ram_address
     0025 01rr                      1-  769     	MOVR	r0x101A,W
     0026 0C03                      1-  770     	BTRSC	STATUS,0
     0027 05rr                      1-  771     	INCR	r0x101A,W
     0028 0D03                      1-  772     	BTRSC	STATUS,2
                                    1-  773     	MGOTO	_00003_DS_
     0029 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  774     	BANKSEL	_R_AIN2_DATA
     002A rrrr                      3-  110 m1      .banksel ram_address
     002B 03rr                      1-  775     	ADDAR	(_R_AIN2_DATA + 1),F
     002C                           1-  776     _00003_DS_:
                                    1-  777     	.line	437, "main.c"; 	for(i=1;i<=count;i++)
                                    1-  778     	BANKSEL	r0x1016
     002C rrrr                      3-  110 m1      .banksel ram_address
     002D 05rr                      1-  779     	INCR	r0x1016,F
                                    1-  780     	MGOTO	_00324_DS_
     002E 3rrr                      3-   63 m1      LGOTO rom_address
     002F                           1-  781     _00326_DS_:
                                    1-  782     	.line	444, "main.c"; 	}
                                    1-  783     	RETURN	
     002F 0010                      3-   40 m1      ret
                                    1-  784     ; exit point of _F_AIN2_Convert
                                    1-  786     ;***
                                    1-  787     ;  pBlock Stats: dbName = C
                                    1-  788     ;***
                                    1-  789     ;has an exit
                                    1-  790     ;functions called:
                                    1-  791     ;   _delayms
                                    1-  792     ;   _F_wait_eoc
                                    1-  793     ;   _delayms
                                    1-  794     ;   _F_wait_eoc
                                    1-  795     ;6 compiler assigned registers:
                                    1-  796     ;   r0x101F
                                    1-  797     ;   r0x1020
                                    1-  798     ;   r0x1021
                                    1-  799     ;   r0x1022
                                    1-  800     ;   r0x1023
                                    1-  801     ;   r0x1024
                                    1-  802     ;; Starting pCode block
                                    1-  803     .segment "code"; module=main, function=_F_AIN4_Convert
                                    1-  805     ;local variable name mapping:
     0000                           1-  808     _F_AIN4_Convert:
                                    1-  809     ; 2 exit points
                                    1-  810     	.line	416, "main.c"; 	void F_AIN4_Convert(char count)
                                    1-  811     	BANKSEL	r0x101F
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1-  812     	MOVAR	r0x101F
                                    1-  813     	.line	418, "main.c"; 	R_AIN4_DATA=R_AIN4_DATA_LB=0x00;   
                                    1-  814     	BANKSEL	_R_AIN4_DATA_LB
     0002 rrrr                      3-  110 m1      .banksel ram_address
     0003 02rr                      1-  815     	CLRR	_R_AIN4_DATA_LB
                                    1-  816     	BANKSEL	_R_AIN4_DATA
     0004 rrrr                      3-  110 m1      .banksel ram_address
     0005 02rr                      1-  817     	CLRR	_R_AIN4_DATA
     0006 02rr                      1-  818     	CLRR	(_R_AIN4_DATA + 1)
                                    1-  819     	.line	420, "main.c"; 	ADMD  = 0x90 | C_ADC_PA3;				// Select AIN6(PB1) pad as ADC input
     0007 2193                      1-  820     	MOVIA	0x93
     0008 00rr                      1-  821     	MOVAR	_ADMD
                                    1-  822     	.line	421, "main.c"; 	delayms(200);	
     0009 21C8                      1-  823     	MOVIA	0xc8
                                    1-  824     	MCALL	_delayms
     000A 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  825     	.line	422, "main.c"; 	for(i=1;i<=count;i++)
     000B 2101                      1-  826     	MOVIA	0x01
                                    1-  827     	BANKSEL	r0x1020
     000C rrrr                      3-  110 m1      .banksel ram_address
     000D 00rr                      1-  828     	MOVAR	r0x1020
     000E                           1-  829     _00315_DS_:
                                    1-  830     	BANKSEL	r0x1020
     000E rrrr                      3-  110 m1      .banksel ram_address
     000F 01rr                      1-  831     	MOVR	r0x1020,W
                                    1-  832     	BANKSEL	r0x101F
     0010 rrrr                      3-  110 m1      .banksel ram_address
     0011 04rr                      1-  833     	SUBAR	r0x101F,W
     0012 0803                      1-  834     	BTRSS	STATUS,0
                                    1-  835     	MGOTO	_00317_DS_
     0013 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  836     	.line	424, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0014 1Brr                      1-  837     	BSR	_ADMDbits,6
                                    1-  838     	.line	425, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
                                    1-  839     	MCALL	_F_wait_eoc
     0015 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  840     	.line	426, "main.c"; 	R_AIN4_DATA_LB += ( 0x0F & ADR); 
     0016 210F                      1-  841     	MOVIA	0x0f
     0017 10rr                      1-  842     	ANDAR	_ADR,W
                                    1-  843     ;;3	MOVAR	r0x1021
                                    1-  844     	BANKSEL	_R_AIN4_DATA_LB
     0018 rrrr                      3-  110 m1      .banksel ram_address
     0019 03rr                      1-  845     	ADDAR	_R_AIN4_DATA_LB,F
                                    1-  846     	.line	427, "main.c"; 	R_AIN4_DATA    += ADD; 
     001A 01rr                      1-  847     	MOVR	_ADD,W
                                    1-  848     	BANKSEL	r0x1021
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 00rr                      1-  849     	MOVAR	r0x1021
                                    1-  850     ;;1	CLRR	r0x1022
                                    1-  851     ;;101	MOVR	r0x1021,W
                                    1-  852     ;;99	MOVAR	r0x1023
     001D 2100                      1-  853     	MOVIA	0x00
                                    1-  854     	BANKSEL	r0x1024
     001E rrrr                      3-  110 m1      .banksel ram_address
     001F 00rr                      1-  855     	MOVAR	r0x1024
                                    1-  856     ;;100	MOVR	r0x1023,W
                                    1-  857     	BANKSEL	r0x1021
     0020 rrrr                      3-  110 m1      .banksel ram_address
     0021 01rr                      1-  858     	MOVR	r0x1021,W
                                    1-  859     	BANKSEL	_R_AIN4_DATA
     0022 rrrr                      3-  110 m1      .banksel ram_address
     0023 03rr                      1-  860     	ADDAR	_R_AIN4_DATA,F
                                    1-  861     	BANKSEL	r0x1024
     0024 rrrr                      3-  110 m1      .banksel ram_address
     0025 01rr                      1-  862     	MOVR	r0x1024,W
     0026 0C03                      1-  863     	BTRSC	STATUS,0
     0027 05rr                      1-  864     	INCR	r0x1024,W
     0028 0D03                      1-  865     	BTRSC	STATUS,2
                                    1-  866     	MGOTO	_00004_DS_
     0029 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  867     	BANKSEL	_R_AIN4_DATA
     002A rrrr                      3-  110 m1      .banksel ram_address
     002B 03rr                      1-  868     	ADDAR	(_R_AIN4_DATA + 1),F
     002C                           1-  869     _00004_DS_:
                                    1-  870     	.line	422, "main.c"; 	for(i=1;i<=count;i++)
                                    1-  871     	BANKSEL	r0x1020
     002C rrrr                      3-  110 m1      .banksel ram_address
     002D 05rr                      1-  872     	INCR	r0x1020,F
                                    1-  873     	MGOTO	_00315_DS_
     002E 3rrr                      3-   63 m1      LGOTO rom_address
     002F                           1-  874     _00317_DS_:
                                    1-  875     	.line	429, "main.c"; 	}
                                    1-  876     	RETURN	
     002F 0010                      3-   40 m1      ret
                                    1-  877     ; exit point of _F_AIN4_Convert
                                    1-  879     ;***
                                    1-  880     ;  pBlock Stats: dbName = C
                                    1-  881     ;***
                                    1-  882     ;has an exit
                                    1-  883     ;functions called:
                                    1-  884     ;   _delayms
                                    1-  885     ;   _delayms
                                    1-  886     ;; Starting pCode block
                                    1-  887     .segment "code"; module=main, function=_initAD
     0000                           1-  889     _initAD:
                                    1-  890     ; 2 exit points
                                    1-  891     	.line	391, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA1 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2181                      1-  892     	MOVIA	0x81
     0001 00rr                      1-  893     	MOVAR	_ADMD
                                    1-  894     	.line	394, "main.c"; 	ADVREFH = C_Vrefh_4V;					// ADC reference high voltage is supplied by internal 4V  (Note: ADC clock freq. must be equal or less than 1MHz)
     0002 2102                      1-  895     	MOVIA	0x02
     0003 00rr                      1-  896     	MOVAR	_ADVREFH
                                    1-  897     	.line	401, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0004 2110                      1-  898     	MOVIA	0x10
     0005 00rr                      1-  899     	MOVAR	_ADR
                                    1-  900     	.line	403, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0006 2103                      1-  901     	MOVIA	0x03
     0007 00rr                      1-  902     	MOVAR	_ADCR
                                    1-  903     	.line	405, "main.c"; 	PACON =  C_PA1_AIN1 | C_PA3_AIN3;						// Set AIN0(PA0) as pure ADC input for reduce power consumption (SFR "PACON")
     0008 210A                      1-  904     	MOVIA	0x0a
     0009 00rr                      1-  905     	MOVAR	_PACON
                                    1-  906     	.line	406, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     000A 1Arr                      1-  907     	BSR	_ADMDbits,4
                                    1-  908     	.line	407, "main.c"; 	delayms(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     000B 2164                      1-  909     	MOVIA	0x64
                                    1-  910     	MCALL	_delayms
     000C 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  911     	.line	410, "main.c"; 	}
                                    1-  912     	RETURN	
     000D 0010                      3-   40 m1      ret
                                    1-  913     ; exit point of _initAD
                                    1-  915     ;***
                                    1-  916     ;  pBlock Stats: dbName = C
                                    1-  917     ;***
                                    1-  918     ;has an exit
                                    1-  919     ;functions called:
                                    1-  920     ;   _keyRead
                                    1-  921     ;   _ledoff
                                    1-  922     ;   _keyRead2
                                    1-  923     ;   _ledoff
                                    1-  924     ;   _keyRead
                                    1-  925     ;   _ledoff
                                    1-  926     ;   _keyRead2
                                    1-  927     ;   _ledoff
                                    1-  928     ;2 compiler assigned registers:
                                    1-  929     ;   r0x102A
                                    1-  930     ;   r0x102B
                                    1-  931     ;; Starting pCode block
                                    1-  932     .segment "code"; module=main, function=_keyCtr
                                    1-  934     ;local variable name mapping:
     0000                           1-  936     _keyCtr:
                                    1-  937     ; 2 exit points
                                    1-  938     	.line	347, "main.c"; 	char kclick = keyRead(0x01 & (~PORTA));
     0000 07rr                      1-  939     	COMR	_PORTA,W
                                    1-  940     	BANKSEL	r0x102A
     0001 rrrr                      3-  110 m1      .banksel ram_address
     0002 00rr                      1-  941     	MOVAR	r0x102A
     0003 2101                      1-  942     	MOVIA	0x01
     0004 10rr                      1-  943     	ANDAR	r0x102A,F
     0005 01rr                      1-  944     	MOVR	r0x102A,W
                                    1-  945     	MCALL	_keyRead
     0006 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  946     	BANKSEL	r0x102A
     0007 rrrr                      3-  110 m1      .banksel ram_address
     0008 00rr                      1-  947     	MOVAR	r0x102A
                                    1-  948     	.line	348, "main.c"; 	if(kclick == 1)
     0009 2401                      1-  949     	XORIA	0x01
     000A 0903                      1-  950     	BTRSS	STATUS,2
                                    1-  951     	MGOTO	_00296_DS_
     000B 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  952     	.line	350, "main.c"; 	ledoff();
                                    1-  953     	MCALL	_ledoff
     000C 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  954     	.line	351, "main.c"; 	waitTime = 200;
     000D 21C8                      1-  955     	MOVIA	0xc8
                                    1-  956     	BANKSEL	_waitTime
     000E rrrr                      3-  110 m1      .banksel ram_address
     000F 00rr                      1-  957     	MOVAR	_waitTime
                                    1-  958     	.line	352, "main.c"; 	jrStep = 0;
                                    1-  959     	BANKSEL	_jrStep
     0010 rrrr                      3-  110 m1      .banksel ram_address
     0011 02rr                      1-  960     	CLRR	_jrStep
                                    1-  961     	.line	353, "main.c"; 	if(fjStep == 0)
                                    1-  962     	BANKSEL	_fjStep
     0012 rrrr                      3-  110 m1      .banksel ram_address
     0013 01rr                      1-  963     	MOVR	_fjStep,W
     0014 0903                      1-  964     	BTRSS	STATUS,2
                                    1-  965     	MGOTO	_00293_DS_
     0015 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  966     	.line	355, "main.c"; 	fjStep = 2;
     0016 2102                      1-  967     	MOVIA	0x02
     0017 00rr                      1-  968     	MOVAR	_fjStep
                                    1-  969     	MGOTO	_00296_DS_
     0018 3rrr                      3-   63 m1      LGOTO rom_address
     0019                           1-  970     _00293_DS_:
                                    1-  971     	.line	357, "main.c"; 	else if(fjStep > 0)
                                    1-  972     	BANKSEL	_fjStep
     0019 rrrr                      3-  110 m1      .banksel ram_address
     001A 01rr                      1-  973     	MOVR	_fjStep,W
     001B 0903                      1-  974     	BTRSS	STATUS,2
                                    1-  975     	.line	359, "main.c"; 	fjStep--;
     001C 06rr                      1-  976     	DECR	_fjStep,F
     001D                           1-  977     _00296_DS_:
                                    1-  978     	.line	365, "main.c"; 	kclick = keyRead2(0x01 & (~PORTB));
     001D 07rr                      1-  979     	COMR	_PORTB,W
                                    1-  980     	BANKSEL	r0x102B
     001E rrrr                      3-  110 m1      .banksel ram_address
     001F 00rr                      1-  981     	MOVAR	r0x102B
     0020 2101                      1-  982     	MOVIA	0x01
     0021 10rr                      1-  983     	ANDAR	r0x102B,F
     0022 01rr                      1-  984     	MOVR	r0x102B,W
                                    1-  985     	MCALL	_keyRead2
     0023 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  986     	BANKSEL	r0x102A
     0024 rrrr                      3-  110 m1      .banksel ram_address
     0025 00rr                      1-  987     	MOVAR	r0x102A
                                    1-  988     	.line	366, "main.c"; 	if(kclick == 1)
     0026 2401                      1-  989     	XORIA	0x01
     0027 0903                      1-  990     	BTRSS	STATUS,2
                                    1-  991     	MGOTO	_00304_DS_
     0028 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  992     	.line	368, "main.c"; 	ledoff();
                                    1-  993     	MCALL	_ledoff
     0029 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  994     	.line	369, "main.c"; 	fjStep = 0;
                                    1-  995     	BANKSEL	_fjStep
     002A rrrr                      3-  110 m1      .banksel ram_address
     002B 02rr                      1-  996     	CLRR	_fjStep
                                    1-  997     	.line	370, "main.c"; 	if(jrStep == 0)
                                    1-  998     	BANKSEL	_jrStep
     002C rrrr                      3-  110 m1      .banksel ram_address
     002D 01rr                      1-  999     	MOVR	_jrStep,W
     002E 0903                      1- 1000     	BTRSS	STATUS,2
                                    1- 1001     	MGOTO	_00300_DS_
     002F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1002     	.line	372, "main.c"; 	jrStep = 2;
     0030 2102                      1- 1003     	MOVIA	0x02
     0031 00rr                      1- 1004     	MOVAR	_jrStep
                                    1- 1005     	.line	373, "main.c"; 	jrCount = 0;
                                    1- 1006     	BANKSEL	_jrCount
     0032 rrrr                      3-  110 m1      .banksel ram_address
     0033 02rr                      1- 1007     	CLRR	_jrCount
                                    1- 1008     	MGOTO	_00304_DS_
     0034 3rrr                      3-   63 m1      LGOTO rom_address
     0035                           1- 1009     _00300_DS_:
                                    1- 1010     	.line	375, "main.c"; 	else if(jrStep > 0)
                                    1- 1011     	BANKSEL	_jrStep
     0035 rrrr                      3-  110 m1      .banksel ram_address
     0036 01rr                      1- 1012     	MOVR	_jrStep,W
     0037 0D03                      1- 1013     	BTRSC	STATUS,2
                                    1- 1014     	MGOTO	_00304_DS_
     0038 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1015     	.line	377, "main.c"; 	jrCount = 0;
                                    1- 1016     	BANKSEL	_jrCount
     0039 rrrr                      3-  110 m1      .banksel ram_address
     003A 02rr                      1- 1017     	CLRR	_jrCount
                                    1- 1018     	.line	378, "main.c"; 	jrStep--;
                                    1- 1019     	BANKSEL	_jrStep
     003B rrrr                      3-  110 m1      .banksel ram_address
     003C 06rr                      1- 1020     	DECR	_jrStep,F
     003D                           1- 1021     _00304_DS_:
                                    1- 1022     	.line	383, "main.c"; 	}
                                    1- 1023     	RETURN	
     003D 0010                      3-   40 m1      ret
                                    1- 1024     ; exit point of _keyCtr
                                    1- 1026     ;***
                                    1- 1027     ;  pBlock Stats: dbName = C
                                    1- 1028     ;***
                                    1- 1029     ;has an exit
                                    1- 1030     ;1 compiler assigned register :
                                    1- 1031     ;   r0x1029
                                    1- 1032     ;; Starting pCode block
                                    1- 1033     .segment "code"; module=main, function=_keyRead2
                                    1- 1035     ;local variable name mapping:
     0000                           1- 1037     _keyRead2:
                                    1- 1038     ; 2 exit points
                                    1- 1039     	.line	320, "main.c"; 	char keyRead2(char keyStatus)	
                                    1- 1040     	BANKSEL	r0x1029
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1- 1041     	MOVAR	r0x1029
                                    1- 1042     	.line	322, "main.c"; 	if(keyStatus)
     0002 01rr                      1- 1043     	MOVR	r0x1029,W
     0003 0D03                      1- 1044     	BTRSC	STATUS,2
                                    1- 1045     	MGOTO	_00283_DS_
     0004 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1046     	.line	324, "main.c"; 	keyCount2++;
                                    1- 1047     	BANKSEL	_keyCount2
     0005 rrrr                      3-  110 m1      .banksel ram_address
     0006 05rr                      1- 1048     	INCR	_keyCount2,F
                                    1- 1049     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1- 1050     	.line	326, "main.c"; 	if(keyCount2 >= 200)
     0007 21C8                      1- 1051     	MOVIA	0xc8
     0008 04rr                      1- 1052     	SUBAR	_keyCount2,W
     0009 0803                      1- 1053     	BTRSS	STATUS,0
                                    1- 1054     	MGOTO	_00284_DS_
     000A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1055     	.line	328, "main.c"; 	keyCount2 = 200;
     000B 21C8                      1- 1056     	MOVIA	0xc8
     000C 00rr                      1- 1057     	MOVAR	_keyCount2
                                    1- 1058     	MGOTO	_00284_DS_
     000D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1059     ;;unsigned compare: left < lit (0x4=4), size=1
     000E                           1- 1060     _00283_DS_:
                                    1- 1061     	.line	333, "main.c"; 	if(keyCount2 >= 4)
     000E 2104                      1- 1062     	MOVIA	0x04
                                    1- 1063     	BANKSEL	_keyCount2
     000F rrrr                      3-  110 m1      .banksel ram_address
     0010 04rr                      1- 1064     	SUBAR	_keyCount2,W
     0011 0803                      1- 1065     	BTRSS	STATUS,0
                                    1- 1066     	MGOTO	_00281_DS_
     0012 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1067     	.line	335, "main.c"; 	keyCount2 = 0;
     0013 02rr                      1- 1068     	CLRR	_keyCount2
                                    1- 1069     	.line	336, "main.c"; 	return	1;
     0014 2101                      1- 1070     	MOVIA	0x01
                                    1- 1071     	MGOTO	_00285_DS_
     0015 3rrr                      3-   63 m1      LGOTO rom_address
     0016                           1- 1072     _00281_DS_:
                                    1- 1073     	.line	338, "main.c"; 	keyCount2 = 0;
                                    1- 1074     	BANKSEL	_keyCount2
     0016 rrrr                      3-  110 m1      .banksel ram_address
     0017 02rr                      1- 1075     	CLRR	_keyCount2
     0018                           1- 1076     _00284_DS_:
                                    1- 1077     	.line	340, "main.c"; 	return 0;
     0018 2100                      1- 1078     	MOVIA	0x00
     0019                           1- 1079     _00285_DS_:
                                    1- 1080     	.line	341, "main.c"; 	}
                                    1- 1081     	RETURN	
     0019 0010                      3-   40 m1      ret
                                    1- 1082     ; exit point of _keyRead2
                                    1- 1084     ;***
                                    1- 1085     ;  pBlock Stats: dbName = C
                                    1- 1086     ;***
                                    1- 1087     ;has an exit
                                    1- 1088     ;1 compiler assigned register :
                                    1- 1089     ;   r0x1029
                                    1- 1090     ;; Starting pCode block
                                    1- 1091     .segment "code"; module=main, function=_keyRead
                                    1- 1093     ;local variable name mapping:
     0000                           1- 1095     _keyRead:
                                    1- 1096     ; 2 exit points
                                    1- 1097     	.line	295, "main.c"; 	char keyRead(char keyStatus)	
                                    1- 1098     	BANKSEL	r0x1029
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1- 1099     	MOVAR	r0x1029
                                    1- 1100     	.line	297, "main.c"; 	if(keyStatus)
     0002 01rr                      1- 1101     	MOVR	r0x1029,W
     0003 0D03                      1- 1102     	BTRSC	STATUS,2
                                    1- 1103     	MGOTO	_00271_DS_
     0004 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1104     	.line	299, "main.c"; 	keyCount++;
                                    1- 1105     	BANKSEL	_keyCount
     0005 rrrr                      3-  110 m1      .banksel ram_address
     0006 05rr                      1- 1106     	INCR	_keyCount,F
                                    1- 1107     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1- 1108     	.line	301, "main.c"; 	if(keyCount >= 200)
     0007 21C8                      1- 1109     	MOVIA	0xc8
     0008 04rr                      1- 1110     	SUBAR	_keyCount,W
     0009 0803                      1- 1111     	BTRSS	STATUS,0
                                    1- 1112     	MGOTO	_00272_DS_
     000A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1113     	.line	303, "main.c"; 	keyCount = 200;
     000B 21C8                      1- 1114     	MOVIA	0xc8
     000C 00rr                      1- 1115     	MOVAR	_keyCount
                                    1- 1116     	MGOTO	_00272_DS_
     000D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1117     ;;unsigned compare: left < lit (0x4=4), size=1
     000E                           1- 1118     _00271_DS_:
                                    1- 1119     	.line	308, "main.c"; 	if(keyCount >= 4)
     000E 2104                      1- 1120     	MOVIA	0x04
                                    1- 1121     	BANKSEL	_keyCount
     000F rrrr                      3-  110 m1      .banksel ram_address
     0010 04rr                      1- 1122     	SUBAR	_keyCount,W
     0011 0803                      1- 1123     	BTRSS	STATUS,0
                                    1- 1124     	MGOTO	_00269_DS_
     0012 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1125     	.line	310, "main.c"; 	keyCount = 0;
     0013 02rr                      1- 1126     	CLRR	_keyCount
                                    1- 1127     	.line	311, "main.c"; 	return	1;
     0014 2101                      1- 1128     	MOVIA	0x01
                                    1- 1129     	MGOTO	_00273_DS_
     0015 3rrr                      3-   63 m1      LGOTO rom_address
     0016                           1- 1130     _00269_DS_:
                                    1- 1131     	.line	313, "main.c"; 	keyCount = 0;
                                    1- 1132     	BANKSEL	_keyCount
     0016 rrrr                      3-  110 m1      .banksel ram_address
     0017 02rr                      1- 1133     	CLRR	_keyCount
     0018                           1- 1134     _00272_DS_:
                                    1- 1135     	.line	315, "main.c"; 	return 0;
     0018 2100                      1- 1136     	MOVIA	0x00
     0019                           1- 1137     _00273_DS_:
                                    1- 1138     	.line	316, "main.c"; 	}
                                    1- 1139     	RETURN	
     0019 0010                      3-   40 m1      ret
                                    1- 1140     ; exit point of _keyRead
                                    1- 1142     ;***
                                    1- 1143     ;  pBlock Stats: dbName = C
                                    1- 1144     ;***
                                    1- 1145     ;has an exit
                                    1- 1146     ;; Starting pCode block
                                    1- 1147     .segment "code"; module=main, function=_pwmInit
     0000                           1- 1149     _pwmInit:
                                    1- 1150     ; 2 exit points
                                    1- 1151     	.line	284, "main.c"; 	TM3RH   = 0x00;
     0000 02rr                      1- 1152     	CLRR	_TM3RH
                                    1- 1153     	.line	285, "main.c"; 	TMR3	 = 80;						// Move FFH to TMR3 LB register  ( TMR3[9:0]=3FFH )
     0001 2150                      1- 1154     	MOVIA	0x50
     0002 00rr                      1- 1155     	SFUN	_TMR3
                                    1- 1156     	.line	286, "main.c"; 	PWM3DUTY = 52;			// Move 00H to PWM3DUTY LB register ( PWM3DUTY[9:0]=300H )
     0003 2134                      1- 1157     	MOVIA	0x34
     0004 00rr                      1- 1158     	SFUN	_PWM3DUTY
                                    1- 1159     	.line	287, "main.c"; 	T3CR2	 = C_PS3_Div256 | C_TMR3_ClkSrc_Inst;	// Prescaler 1:1 , Timer3 clock source is instruction clock  
     0005 2107                      1- 1160     	MOVIA	0x07
     0006 00rr                      1- 1161     	SFUN	_T3CR2
                                    1- 1162     	.line	288, "main.c"; 	T3CR1	 = C_PWM3_En | C_PWM3_Active_Hi | C_TMR3_Reload | C_TMR3_En;	// Enable PWM3 , Active_High , Non-Stop mode ,reloaded from TMR3[9:0] , enable Timer3 
     0007 2183                      1- 1163     	MOVIA	0x83
     0008 00rr                      1- 1164     	SFUN	_T3CR1
                                    1- 1165     	.line	289, "main.c"; 	}
                                    1- 1166     	RETURN	
     0009 0010                      3-   40 m1      ret
                                    1- 1167     ; exit point of _pwmInit
                                    1- 1169     ;***
                                    1- 1170     ;  pBlock Stats: dbName = C
                                    1- 1171     ;***
                                    1- 1172     ;has an exit
                                    1- 1173     ;; Starting pCode block
                                    1- 1174     .segment "code"; module=main, function=_ledoff
     0000                           1- 1176     _ledoff:
                                    1- 1177     ; 2 exit points
                                    1- 1178     	.line	272, "main.c"; 	PORTA &= 0x28;
     0000 2128                      1- 1179     	MOVIA	0x28
     0001 10rr                      1- 1180     	ANDAR	_PORTA,F
                                    1- 1181     	.line	273, "main.c"; 	PORTB &= 0xFD;
     0002 1Crr                      1- 1182     	BCR	_PORTB,1
                                    1- 1183     	.line	274, "main.c"; 	}
                                    1- 1184     	RETURN	
     0003 0010                      3-   40 m1      ret
                                    1- 1185     ; exit point of _ledoff
                                    1- 1187     ;***
                                    1- 1188     ;  pBlock Stats: dbName = C
                                    1- 1189     ;***
                                    1- 1190     ;has an exit
                                    1- 1191     ;; Starting pCode block
                                    1- 1192     .segment "code"; module=main, function=_fjLed2
     0000                           1- 1194     _fjLed2:
                                    1- 1195     ; 2 exit points
                                    1- 1196     	.line	265, "main.c"; 	PORTA |= 0x80;
     0000 1Brr                      1- 1197     	BSR	_PORTA,7
                                    1- 1198     	.line	266, "main.c"; 	PORTB |= 0x02;
     0001 18rr                      1- 1199     	BSR	_PORTB,1
                                    1- 1200     	.line	267, "main.c"; 	}
                                    1- 1201     	RETURN	
     0002 0010                      3-   40 m1      ret
                                    1- 1202     ; exit point of _fjLed2
                                    1- 1204     ;***
                                    1- 1205     ;  pBlock Stats: dbName = C
                                    1- 1206     ;***
                                    1- 1207     ;has an exit
                                    1- 1208     ;; Starting pCode block
                                    1- 1209     .segment "code"; module=main, function=_fjLed1
     0000                           1- 1211     _fjLed1:
                                    1- 1212     ; 2 exit points
                                    1- 1213     	.line	259, "main.c"; 	PORTA |= 0x80;
     0000 1Brr                      1- 1214     	BSR	_PORTA,7
                                    1- 1215     	.line	260, "main.c"; 	}
                                    1- 1216     	RETURN	
     0001 0010                      3-   40 m1      ret
                                    1- 1217     ; exit point of _fjLed1
                                    1- 1219     ;***
                                    1- 1220     ;  pBlock Stats: dbName = C
                                    1- 1221     ;***
                                    1- 1222     ;has an exit
                                    1- 1223     ;; Starting pCode block
                                    1- 1224     .segment "code"; module=main, function=_jrLed2
     0000                           1- 1226     _jrLed2:
                                    1- 1227     ; 2 exit points
                                    1- 1228     	.line	252, "main.c"; 	PORTA |= 0x50;
     0000 2150                      1- 1229     	MOVIA	0x50
     0001 11rr                      1- 1230     	IORAR	_PORTA,F
                                    1- 1231     	.line	253, "main.c"; 	}
                                    1- 1232     	RETURN	
     0002 0010                      3-   40 m1      ret
                                    1- 1233     ; exit point of _jrLed2
                                    1- 1235     ;***
                                    1- 1236     ;  pBlock Stats: dbName = C
                                    1- 1237     ;***
                                    1- 1238     ;has an exit
                                    1- 1239     ;; Starting pCode block
                                    1- 1240     .segment "code"; module=main, function=_jrLed1
     0000                           1- 1242     _jrLed1:
                                    1- 1243     ; 2 exit points
                                    1- 1244     	.line	246, "main.c"; 	PORTA |= 0x10;
     0000 1Arr                      1- 1245     	BSR	_PORTA,4
                                    1- 1246     	.line	247, "main.c"; 	}
                                    1- 1247     	RETURN	
     0001 0010                      3-   40 m1      ret
                                    1- 1248     ; exit point of _jrLed1
                                    1- 1250     ;***
                                    1- 1251     ;  pBlock Stats: dbName = C
                                    1- 1252     ;***
                                    1- 1253     ;has an exit
                                    1- 1254     ;; Starting pCode block
                                    1- 1255     .segment "code"; module=main, function=_closeFJ
     0000                           1- 1257     _closeFJ:
                                    1- 1258     ; 2 exit points
                                    1- 1259     	.line	237, "main.c"; 	jrCount = 0;
                                    1- 1260     	BANKSEL	_jrCount
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 02rr                      1- 1261     	CLRR	_jrCount
                                    1- 1262     	.line	238, "main.c"; 	pwmFlag = 0;
                                    1- 1263     	BANKSEL	_pwmFlag
     0002 rrrr                      3-  110 m1      .banksel ram_address
     0003 02rr                      1- 1264     	CLRR	_pwmFlag
                                    1- 1265     	.line	239, "main.c"; 	PORTB &= 0xFB;
     0004 1Drr                      1- 1266     	BCR	_PORTB,2
                                    1- 1267     	.line	240, "main.c"; 	T3CR1 = C_TMR3_Dis;
     0005 0200                      1- 1268     	CLRA	
     0006 00rr                      1- 1269     	SFUN	_T3CR1
                                    1- 1270     	.line	241, "main.c"; 	}
                                    1- 1271     	RETURN	
     0007 0010                      3-   40 m1      ret
                                    1- 1272     ; exit point of _closeFJ
                                    1- 1274     ;***
                                    1- 1275     ;  pBlock Stats: dbName = C
                                    1- 1276     ;***
                                    1- 1277     ;has an exit
                                    1- 1278     ;functions called:
                                    1- 1279     ;   _checkTempAD
                                    1- 1280     ;   _closeFJ
                                    1- 1281     ;   _fjLed1
                                    1- 1282     ;   _pwmInit
                                    1- 1283     ;   _fjLed2
                                    1- 1284     ;   _pwmInit
                                    1- 1285     ;   _jrLed1
                                    1- 1286     ;   _closeFJ
                                    1- 1287     ;   _jrLed2
                                    1- 1288     ;   _closeFJ
                                    1- 1289     ;   _ledoff
                                    1- 1290     ;   _closeFJ
                                    1- 1291     ;   _checkTempAD
                                    1- 1292     ;   _closeFJ
                                    1- 1293     ;   _fjLed1
                                    1- 1294     ;   _pwmInit
                                    1- 1295     ;   _fjLed2
                                    1- 1296     ;   _pwmInit
                                    1- 1297     ;   _jrLed1
                                    1- 1298     ;   _closeFJ
                                    1- 1299     ;   _jrLed2
                                    1- 1300     ;   _closeFJ
                                    1- 1301     ;   _ledoff
                                    1- 1302     ;   _closeFJ
                                    1- 1303     ;; Starting pCode block
                                    1- 1304     .segment "code"; module=main, function=_workCtr
     0000                           1- 1306     _workCtr:
                                    1- 1307     ; 2 exit points
                                    1- 1308     	.line	120, "main.c"; 	if(jrLockFlag)
                                    1- 1309     	BANKSEL	_jrLockFlag
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 01rr                      1- 1310     	MOVR	_jrLockFlag,W
     0002 0D03                      1- 1311     	BTRSC	STATUS,2
                                    1- 1312     	MGOTO	_00005_DS_
     0003 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1313     	.line	122, "main.c"; 	jrStep = 0;
                                    1- 1314     	BANKSEL	_jrStep
     0004 rrrr                      3-  110 m1      .banksel ram_address
     0005 02rr                      1- 1315     	CLRR	_jrStep
     0006                           1- 1316     _00005_DS_:
                                    1- 1317     	.line	125, "main.c"; 	if(jrStep > 0)
                                    1- 1318     	BANKSEL	_jrStep
     0006 rrrr                      3-  110 m1      .banksel ram_address
     0007 01rr                      1- 1319     	MOVR	_jrStep,W
     0008 0903                      1- 1320     	BTRSS	STATUS,2
                                    1- 1321     	.line	127, "main.c"; 	checkTempAD();
                                    1- 1322     	MCALL	_checkTempAD
     0009 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1323     	.line	129, "main.c"; 	if(waitTime > 0)
                                    1- 1324     	BANKSEL	_waitTime
     000A rrrr                      3-  110 m1      .banksel ram_address
     000B 01rr                      1- 1325     	MOVR	_waitTime,W
     000C 0D03                      1- 1326     	BTRSC	STATUS,2
                                    1- 1327     	MGOTO	_00128_DS_
     000D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1328     	.line	131, "main.c"; 	waitTime--;
     000E 06rr                      1- 1329     	DECR	_waitTime,F
                                    1- 1330     	.line	132, "main.c"; 	pwmFlag = 0;
                                    1- 1331     	BANKSEL	_pwmFlag
     000F rrrr                      3-  110 m1      .banksel ram_address
     0010 02rr                      1- 1332     	CLRR	_pwmFlag
                                    1- 1333     	.line	133, "main.c"; 	closeFJ();
                                    1- 1334     	MCALL	_closeFJ
     0011 2rrr                      3-   66 m1      LCALL rom_address
     0012                           1- 1335     _00128_DS_:
                                    1- 1336     	.line	135, "main.c"; 	if(fjStep == 1)
                                    1- 1337     	BANKSEL	_fjStep
     0012 rrrr                      3-  110 m1      .banksel ram_address
     0013 01rr                      1- 1338     	MOVR	_fjStep,W
     0014 2401                      1- 1339     	XORIA	0x01
     0015 0903                      1- 1340     	BTRSS	STATUS,2
                                    1- 1341     	MGOTO	_00165_DS_
     0016 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1342     	.line	137, "main.c"; 	fjLed1();
                                    1- 1343     	MCALL	_fjLed1
     0017 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1344     	.line	138, "main.c"; 	PORTB &= 0xF7;
     0018 1Drr                      1- 1345     	BCR	_PORTB,3
                                    1- 1346     	.line	139, "main.c"; 	PWM3DUTY = 28;
     0019 211C                      1- 1347     	MOVIA	0x1c
     001A 00rr                      1- 1348     	SFUN	_PWM3DUTY
                                    1- 1349     	.line	140, "main.c"; 	PORTB |= 0x04;
     001B 19rr                      1- 1350     	BSR	_PORTB,2
                                    1- 1351     	.line	141, "main.c"; 	if(pwmFlag == 0)
                                    1- 1352     	BANKSEL	_pwmFlag
     001C rrrr                      3-  110 m1      .banksel ram_address
     001D 01rr                      1- 1353     	MOVR	_pwmFlag,W
     001E 0903                      1- 1354     	BTRSS	STATUS,2
                                    1- 1355     	MGOTO	_00167_DS_
     001F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1356     	.line	143, "main.c"; 	pwmFlag = 1;
     0020 2101                      1- 1357     	MOVIA	0x01
     0021 00rr                      1- 1358     	MOVAR	_pwmFlag
                                    1- 1359     	.line	144, "main.c"; 	pwmInit();
                                    1- 1360     	MCALL	_pwmInit
     0022 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1361     	MGOTO	_00167_DS_
     0023 3rrr                      3-   63 m1      LGOTO rom_address
     0024                           1- 1362     _00165_DS_:
                                    1- 1363     	.line	147, "main.c"; 	else if(fjStep == 2)
                                    1- 1364     	BANKSEL	_fjStep
     0024 rrrr                      3-  110 m1      .banksel ram_address
     0025 01rr                      1- 1365     	MOVR	_fjStep,W
     0026 2402                      1- 1366     	XORIA	0x02
     0027 0903                      1- 1367     	BTRSS	STATUS,2
                                    1- 1368     	MGOTO	_00162_DS_
     0028 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1369     	.line	149, "main.c"; 	fjLed2();
                                    1- 1370     	MCALL	_fjLed2
     0029 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1371     	.line	150, "main.c"; 	PORTB &= 0xF7;
     002A 1Drr                      1- 1372     	BCR	_PORTB,3
                                    1- 1373     	.line	151, "main.c"; 	PORTB |= 0x04;
     002B 19rr                      1- 1374     	BSR	_PORTB,2
                                    1- 1375     	.line	152, "main.c"; 	PWM3DUTY = 2;
     002C 2102                      1- 1376     	MOVIA	0x02
     002D 00rr                      1- 1377     	SFUN	_PWM3DUTY
                                    1- 1378     	.line	157, "main.c"; 	if(pwmFlag == 0)
                                    1- 1379     	BANKSEL	_pwmFlag
     002E rrrr                      3-  110 m1      .banksel ram_address
     002F 01rr                      1- 1380     	MOVR	_pwmFlag,W
     0030 0903                      1- 1381     	BTRSS	STATUS,2
                                    1- 1382     	MGOTO	_00167_DS_
     0031 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1383     	.line	159, "main.c"; 	pwmFlag = 1;
     0032 2101                      1- 1384     	MOVIA	0x01
     0033 00rr                      1- 1385     	MOVAR	_pwmFlag
                                    1- 1386     	.line	160, "main.c"; 	pwmInit();
                                    1- 1387     	MCALL	_pwmInit
     0034 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1388     	MGOTO	_00167_DS_
     0035 3rrr                      3-   63 m1      LGOTO rom_address
     0036                           1- 1389     _00162_DS_:
                                    1- 1390     	.line	163, "main.c"; 	else if(jrStep == 1)
                                    1- 1391     	BANKSEL	_jrStep
     0036 rrrr                      3-  110 m1      .banksel ram_address
     0037 01rr                      1- 1392     	MOVR	_jrStep,W
     0038 2401                      1- 1393     	XORIA	0x01
     0039 0903                      1- 1394     	BTRSS	STATUS,2
                                    1- 1395     	MGOTO	_00159_DS_
     003A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1396     	.line	165, "main.c"; 	jrLed1();
                                    1- 1397     	MCALL	_jrLed1
     003B 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1398     	.line	166, "main.c"; 	closeFJ();
                                    1- 1399     	MCALL	_closeFJ
     003C 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1400     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1401     ;;unsigned compare: left >= lit (0x885=2181), size=2
                                    1- 1402     	.line	168, "main.c"; 	if(R_AIN2_DATA > 2180)
     003D 2108                      1- 1403     	MOVIA	0x08
                                    1- 1404     	BANKSEL	_R_AIN2_DATA
     003E rrrr                      3-  110 m1      .banksel ram_address
     003F 04rr                      1- 1405     	SUBAR	(_R_AIN2_DATA + 1),W
     0040 0903                      1- 1406     	BTRSS	STATUS,2
                                    1- 1407     	MGOTO	_00226_DS_
     0041 3rrr                      3-   63 m1      LGOTO rom_address
     0042 2185                      1- 1408     	MOVIA	0x85
     0043 04rr                      1- 1409     	SUBAR	_R_AIN2_DATA,W
     0044                           1- 1410     _00226_DS_:
     0044 0803                      1- 1411     	BTRSS	STATUS,0
                                    1- 1412     	MGOTO	_00134_DS_
     0045 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1413     	.line	170, "main.c"; 	PORTB |= 0x08;
     0046 19rr                      1- 1414     	BSR	_PORTB,3
     0047                           1- 1415     _00134_DS_:
                                    1- 1416     	.line	172, "main.c"; 	if(PORTB & 0x08)
     0047 09rr                      1- 1417     	BTRSS	_PORTB,3
                                    1- 1418     	MGOTO	_00140_DS_
     0048 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1419     	.line	174, "main.c"; 	if(++jrCount > 250)
                                    1- 1420     	BANKSEL	_jrCount
     0049 rrrr                      3-  110 m1      .banksel ram_address
     004A 05rr                      1- 1421     	INCR	_jrCount,F
                                    1- 1422     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1423     ;;unsigned compare: left >= lit (0xFB=251), size=1
     004B 21FB                      1- 1424     	MOVIA	0xfb
     004C 04rr                      1- 1425     	SUBAR	_jrCount,W
     004D 0803                      1- 1426     	BTRSS	STATUS,0
                                    1- 1427     	MGOTO	_00141_DS_
     004E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1428     	.line	176, "main.c"; 	jrCount = 250;
     004F 21FA                      1- 1429     	MOVIA	0xfa
     0050 00rr                      1- 1430     	MOVAR	_jrCount
                                    1- 1431     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1432     ;;unsigned compare: left >= lit (0x871=2161), size=2
                                    1- 1433     	.line	177, "main.c"; 	if(R_AIN2_DATA > 2160)
     0051 2108                      1- 1434     	MOVIA	0x08
                                    1- 1435     	BANKSEL	_R_AIN2_DATA
     0052 rrrr                      3-  110 m1      .banksel ram_address
     0053 04rr                      1- 1436     	SUBAR	(_R_AIN2_DATA + 1),W
     0054 0903                      1- 1437     	BTRSS	STATUS,2
                                    1- 1438     	MGOTO	_00228_DS_
     0055 3rrr                      3-   63 m1      LGOTO rom_address
     0056 2171                      1- 1439     	MOVIA	0x71
     0057 04rr                      1- 1440     	SUBAR	_R_AIN2_DATA,W
     0058                           1- 1441     _00228_DS_:
     0058 0803                      1- 1442     	BTRSS	STATUS,0
                                    1- 1443     	MGOTO	_00141_DS_
     0059 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1444     	.line	179, "main.c"; 	jrLockFlag = 1;
     005A 2101                      1- 1445     	MOVIA	0x01
                                    1- 1446     	BANKSEL	_jrLockFlag
     005B rrrr                      3-  110 m1      .banksel ram_address
     005C 00rr                      1- 1447     	MOVAR	_jrLockFlag
                                    1- 1448     	MGOTO	_00141_DS_
     005D 3rrr                      3-   63 m1      LGOTO rom_address
     005E                           1- 1449     _00140_DS_:
                                    1- 1450     	.line	185, "main.c"; 	jrCount = 0;
                                    1- 1451     	BANKSEL	_jrCount
     005E rrrr                      3-  110 m1      .banksel ram_address
     005F 02rr                      1- 1452     	CLRR	_jrCount
                                    1- 1453     ;;unsigned compare: left < lit (0x83E=2110), size=2
     0060                           1- 1454     _00141_DS_:
                                    1- 1455     	.line	188, "main.c"; 	if(R_AIN2_DATA < 2110)
     0060 2108                      1- 1456     	MOVIA	0x08
                                    1- 1457     	BANKSEL	_R_AIN2_DATA
     0061 rrrr                      3-  110 m1      .banksel ram_address
     0062 04rr                      1- 1458     	SUBAR	(_R_AIN2_DATA + 1),W
     0063 0903                      1- 1459     	BTRSS	STATUS,2
                                    1- 1460     	MGOTO	_00229_DS_
     0064 3rrr                      3-   63 m1      LGOTO rom_address
     0065 213E                      1- 1461     	MOVIA	0x3e
     0066 04rr                      1- 1462     	SUBAR	_R_AIN2_DATA,W
     0067                           1- 1463     _00229_DS_:
     0067 0C03                      1- 1464     	BTRSC	STATUS,0
                                    1- 1465     	MGOTO	_00167_DS_
     0068 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1466     	.line	190, "main.c"; 	PORTB &= 0xF7;
     0069 1Drr                      1- 1467     	BCR	_PORTB,3
                                    1- 1468     	MGOTO	_00167_DS_
     006A 3rrr                      3-   63 m1      LGOTO rom_address
     006B                           1- 1469     _00159_DS_:
                                    1- 1470     	.line	193, "main.c"; 	else if(jrStep == 2)
                                    1- 1471     	BANKSEL	_jrStep
     006B rrrr                      3-  110 m1      .banksel ram_address
     006C 01rr                      1- 1472     	MOVR	_jrStep,W
     006D 2402                      1- 1473     	XORIA	0x02
     006E 0903                      1- 1474     	BTRSS	STATUS,2
                                    1- 1475     	MGOTO	_00156_DS_
     006F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1476     	.line	195, "main.c"; 	jrLed2();
                                    1- 1477     	MCALL	_jrLed2
     0070 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1478     	.line	196, "main.c"; 	closeFJ();
                                    1- 1479     	MCALL	_closeFJ
     0071 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1480     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1481     ;;unsigned compare: left >= lit (0x65A=1626), size=2
                                    1- 1482     	.line	198, "main.c"; 	if(R_AIN2_DATA > 1625)
     0072 2106                      1- 1483     	MOVIA	0x06
                                    1- 1484     	BANKSEL	_R_AIN2_DATA
     0073 rrrr                      3-  110 m1      .banksel ram_address
     0074 04rr                      1- 1485     	SUBAR	(_R_AIN2_DATA + 1),W
     0075 0903                      1- 1486     	BTRSS	STATUS,2
                                    1- 1487     	MGOTO	_00230_DS_
     0076 3rrr                      3-   63 m1      LGOTO rom_address
     0077 215A                      1- 1488     	MOVIA	0x5a
     0078 04rr                      1- 1489     	SUBAR	_R_AIN2_DATA,W
     0079                           1- 1490     _00230_DS_:
     0079 0803                      1- 1491     	BTRSS	STATUS,0
                                    1- 1492     	MGOTO	_00145_DS_
     007A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1493     	.line	200, "main.c"; 	PORTB |= 0x08;
     007B 19rr                      1- 1494     	BSR	_PORTB,3
     007C                           1- 1495     _00145_DS_:
                                    1- 1496     	.line	202, "main.c"; 	if(PORTB & 0x08)
     007C 09rr                      1- 1497     	BTRSS	_PORTB,3
                                    1- 1498     	MGOTO	_00151_DS_
     007D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1499     	.line	204, "main.c"; 	if(++jrCount > 250)
                                    1- 1500     	BANKSEL	_jrCount
     007E rrrr                      3-  110 m1      .banksel ram_address
     007F 05rr                      1- 1501     	INCR	_jrCount,F
                                    1- 1502     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1503     ;;unsigned compare: left >= lit (0xFB=251), size=1
     0080 21FB                      1- 1504     	MOVIA	0xfb
     0081 04rr                      1- 1505     	SUBAR	_jrCount,W
     0082 0803                      1- 1506     	BTRSS	STATUS,0
                                    1- 1507     	MGOTO	_00152_DS_
     0083 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1508     	.line	206, "main.c"; 	jrCount = 250;
     0084 21FA                      1- 1509     	MOVIA	0xfa
     0085 00rr                      1- 1510     	MOVAR	_jrCount
                                    1- 1511     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1512     ;;unsigned compare: left >= lit (0x64B=1611), size=2
                                    1- 1513     	.line	207, "main.c"; 	if(R_AIN2_DATA > 1610)
     0086 2106                      1- 1514     	MOVIA	0x06
                                    1- 1515     	BANKSEL	_R_AIN2_DATA
     0087 rrrr                      3-  110 m1      .banksel ram_address
     0088 04rr                      1- 1516     	SUBAR	(_R_AIN2_DATA + 1),W
     0089 0903                      1- 1517     	BTRSS	STATUS,2
                                    1- 1518     	MGOTO	_00232_DS_
     008A 3rrr                      3-   63 m1      LGOTO rom_address
     008B 214B                      1- 1519     	MOVIA	0x4b
     008C 04rr                      1- 1520     	SUBAR	_R_AIN2_DATA,W
     008D                           1- 1521     _00232_DS_:
     008D 0803                      1- 1522     	BTRSS	STATUS,0
                                    1- 1523     	MGOTO	_00152_DS_
     008E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1524     	.line	209, "main.c"; 	jrLockFlag = 1;
     008F 2101                      1- 1525     	MOVIA	0x01
                                    1- 1526     	BANKSEL	_jrLockFlag
     0090 rrrr                      3-  110 m1      .banksel ram_address
     0091 00rr                      1- 1527     	MOVAR	_jrLockFlag
                                    1- 1528     	MGOTO	_00152_DS_
     0092 3rrr                      3-   63 m1      LGOTO rom_address
     0093                           1- 1529     _00151_DS_:
                                    1- 1530     	.line	215, "main.c"; 	jrCount = 0;
                                    1- 1531     	BANKSEL	_jrCount
     0093 rrrr                      3-  110 m1      .banksel ram_address
     0094 02rr                      1- 1532     	CLRR	_jrCount
                                    1- 1533     ;;unsigned compare: left < lit (0x627=1575), size=2
     0095                           1- 1534     _00152_DS_:
                                    1- 1535     	.line	218, "main.c"; 	if(R_AIN2_DATA < 1575)
     0095 2106                      1- 1536     	MOVIA	0x06
                                    1- 1537     	BANKSEL	_R_AIN2_DATA
     0096 rrrr                      3-  110 m1      .banksel ram_address
     0097 04rr                      1- 1538     	SUBAR	(_R_AIN2_DATA + 1),W
     0098 0903                      1- 1539     	BTRSS	STATUS,2
                                    1- 1540     	MGOTO	_00233_DS_
     0099 3rrr                      3-   63 m1      LGOTO rom_address
     009A 2127                      1- 1541     	MOVIA	0x27
     009B 04rr                      1- 1542     	SUBAR	_R_AIN2_DATA,W
     009C                           1- 1543     _00233_DS_:
     009C 0C03                      1- 1544     	BTRSC	STATUS,0
                                    1- 1545     	MGOTO	_00167_DS_
     009D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1546     	.line	220, "main.c"; 	PORTB &= 0xF7;
     009E 1Drr                      1- 1547     	BCR	_PORTB,3
                                    1- 1548     	.line	221, "main.c"; 	jrCount = 0;
                                    1- 1549     	BANKSEL	_jrCount
     009F rrrr                      3-  110 m1      .banksel ram_address
     00A0 02rr                      1- 1550     	CLRR	_jrCount
                                    1- 1551     	MGOTO	_00167_DS_
     00A1 3rrr                      3-   63 m1      LGOTO rom_address
     00A2                           1- 1552     _00156_DS_:
                                    1- 1553     	.line	226, "main.c"; 	ledoff();
                                    1- 1554     	MCALL	_ledoff
     00A2 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1555     	.line	227, "main.c"; 	closeFJ();
                                    1- 1556     	MCALL	_closeFJ
     00A3 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1557     	.line	228, "main.c"; 	PORTB &= 0xF7;
     00A4 1Drr                      1- 1558     	BCR	_PORTB,3
     00A5                           1- 1559     _00167_DS_:
                                    1- 1560     	.line	232, "main.c"; 	}
                                    1- 1561     	RETURN	
     00A5 0010                      3-   40 m1      ret
                                    1- 1562     ; exit point of _workCtr
                                    1- 1565     ;	code size estimation:
                                    1- 1566     ;	  508+  113 =   621 instructions ( 1468 byte)
                                    1- 1568     	end

SYMBOL TABLE            TYPE     VALUE
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
C                       Constant 00000000
DC                      Constant 00000001
ENABLE_RAM_BANK         Constant 00000001
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
STATUS                  Constant 00000003
USEFGOTO                Constant 00000000
W                       Constant 00000000
Z                       Constant 00000002


SOURCE FILE TABLE
001 OBJ/main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
