
                    Nyquest Technology Co., Ltd.

NYASM 2.28

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTAbits
                                    1-   15     	extern	_PORTBbits
                                    1-   16     	extern	_PCONbits
                                    1-   17     	extern	_BWUCONbits
                                    1-   18     	extern	_ABPLCONbits
                                    1-   19     	extern	_BPHCONbits
                                    1-   20     	extern	_INTEbits
                                    1-   21     	extern	_INTFbits
                                    1-   22     	extern	_ADMDbits
                                    1-   23     	extern	_ADRbits
                                    1-   24     	extern	_ADVREFHbits
                                    1-   25     	extern	_ADCRbits
                                    1-   26     	extern	_AWUCONbits
                                    1-   27     	extern	_PACONbits
                                    1-   28     	extern	_INTEDGbits
                                    1-   29     	extern	_ANAENbits
                                    1-   30     	extern	_RFCbits
                                    1-   31     	extern	_INTE2bits
                                    1-   32     	extern	_INDF
                                    1-   33     	extern	_TMR0
                                    1-   34     	extern	_PCL
                                    1-   35     	extern	_STATUS
                                    1-   36     	extern	_FSR
                                    1-   37     	extern	_PORTA
                                    1-   38     	extern	_PORTB
                                    1-   39     	extern	_PCON
                                    1-   40     	extern	_BWUCON
                                    1-   41     	extern	_PCHBUF
                                    1-   42     	extern	_ABPLCON
                                    1-   43     	extern	_BPHCON
                                    1-   44     	extern	_INTE
                                    1-   45     	extern	_INTF
                                    1-   46     	extern	_ADMD
                                    1-   47     	extern	_ADR
                                    1-   48     	extern	_ADD
                                    1-   49     	extern	_ADVREFH
                                    1-   50     	extern	_ADCR
                                    1-   51     	extern	_AWUCON
                                    1-   52     	extern	_PACON
                                    1-   53     	extern	_INTEDG
                                    1-   54     	extern	_TMRH
                                    1-   55     	extern	_ANAEN
                                    1-   56     	extern	_RFC
                                    1-   57     	extern	_TM3RH
                                    1-   58     	extern	_INTE2
                                    1-   59     	extern	_TMR1
                                    1-   60     	extern	_T1CR1
                                    1-   61     	extern	_T1CR2
                                    1-   62     	extern	_PWM1DUTY
                                    1-   63     	extern	_PS1CV
                                    1-   64     	extern	_BZ1CR
                                    1-   65     	extern	_IRCR
                                    1-   66     	extern	_TBHP
                                    1-   67     	extern	_TBHD
                                    1-   68     	extern	_TMR2
                                    1-   69     	extern	_T2CR1
                                    1-   70     	extern	_T2CR2
                                    1-   71     	extern	_PWM2DUTY
                                    1-   72     	extern	_PS2CV
                                    1-   73     	extern	_BZ2CR
                                    1-   74     	extern	_OSCCR
                                    1-   75     	extern	_TMR3
                                    1-   76     	extern	_T3CR1
                                    1-   77     	extern	_T3CR2
                                    1-   78     	extern	_PWM3DUTY
                                    1-   79     	extern	_PS3CV
                                    1-   80     	extern	_BZ3CR
                                    1-   81     	extern	_IOSTA
                                    1-   82     	extern	_IOSTB
                                    1-   83     	extern	_APHCON
                                    1-   84     	extern	_PS0CV
                                    1-   85     	extern	_BODCON
                                    1-   86     	extern	_CMPCR
                                    1-   87     	extern	_PCON1
                                    1-   88     	extern	_T0MD
                                    1-   89     	extern	___sdcc_saved_fsr
                                    1-   90     	extern	___sdcc_saved_stk00
                                    1-   91     	extern	___sdcc_saved_stk01
                                    1-   92     	extern	__nyc_ny8_startup
                                    1-   93     ;--------------------------------------------------------
                                    1-   94     ; global declarations
                                    1-   95     ;--------------------------------------------------------
                                    1-   96     	extern	_checkTempAD
                                    1-   97     	extern	_delayms
                                    1-   98     	extern	_F_wait_eoc
                                    1-   99     	extern	_initAD
                                    1-  100     	extern	_keyCtr
                                    1-  101     	extern	_pwmInit
                                    1-  102     	extern	_ledoff
                                    1-  103     	extern	_fjLed2
                                    1-  104     	extern	_fjLed1
                                    1-  105     	extern	_jrLed2
                                    1-  106     	extern	_jrLed1
                                    1-  107     	extern	_closeFJ
                                    1-  108     	extern	_workCtr
                                    1-  109     	extern	_isr
                                    1-  110     	extern	_main
                                    1-  111     	extern	_keyRead
                                    1-  112     	extern	_keyRead2
                                    1-  113     	extern	_F_AIN4_Convert
                                    1-  114     	extern	_F_AIN2_Convert
                                    1-  115     	extern	_checkOutA
                                    1-  116     	extern	_jrStep
                                    1-  117     	extern	_fjStep
                                    1-  118     	extern	_intCount
                                    1-  119     	extern	_IntFlag
                                    1-  120     	extern	_keyCount
                                    1-  121     	extern	_keyCount2
                                    1-  122     	extern	_R_AIN4_DATA
                                    1-  123     	extern	_R_AIN4_DATA_LB
                                    1-  124     	extern	_R_AIN2_DATA
                                    1-  125     	extern	_R_AIN2_DATA_LB
                                    1-  126     	extern	_pwmFlag
                                    1-  127     	extern	_waitTime
                                    1-  129     	extern PSAVE
                                    1-  130     	extern SSAVE
                                    1-  131     	extern WSAVE
                                    1-  132     	extern STK04
                                    1-  133     	extern STK03
                                    1-  134     	extern STK02
                                    1-  135     	extern STK01
                                    1-  136     	extern STK00
                                    1-  138     .segment "uninit", 0x20000040
 20000040                           1-  139     PSAVE:
                                    1-  140     	.res 1
 20000041                           1-  141     SSAVE:
                                    1-  142     	.res 1
 20000042                           1-  143     WSAVE:
                                    1-  144     	.res 1
 20000043                           1-  145     STK04:
                                    1-  146     	.res 1
 20000044                           1-  147     STK03:
                                    1-  148     	.res 1
 20000045                           1-  149     STK02:
                                    1-  150     	.res 1
 20000046                           1-  151     STK01:
                                    1-  152     	.res 1
 20000047                           1-  153     STK00:
                                    1-  154     	.res 1
                                    1-  156     ;--------------------------------------------------------
                                    1-  157     ; global definitions
                                    1-  158     ;--------------------------------------------------------
                                    1-  159     .segment "uninit"
     0000                           1-  160     _R_AIN4_DATA:
                                    1-  161     	.res	2
                                    1-  164     .segment "uninit"
     0000                           1-  165     _R_AIN4_DATA_LB:
                                    1-  166     	.res	1
                                    1-  169     .segment "uninit"
     0000                           1-  170     _R_AIN2_DATA:
                                    1-  171     	.res	2
                                    1-  174     .segment "uninit"
     0000                           1-  175     _R_AIN2_DATA_LB:
                                    1-  176     	.res	1
                                    1-  179     ;--------------------------------------------------------
                                    1-  180     ; absolute symbol definitions
                                    1-  181     ;--------------------------------------------------------
                                    1-  182     ;--------------------------------------------------------
                                    1-  183     ; compiler-defined variables
                                    1-  184     ;--------------------------------------------------------
                                    1-  185     .segment "uninit"
     0000                           1-  186     r0x1027:
                                    1-  187     	.res	1
                                    1-  188     .segment "uninit"
     0000                           1-  189     r0x1028:
                                    1-  190     	.res	1
                                    1-  191     .segment "uninit"
     0000                           1-  192     r0x1029:
                                    1-  193     	.res	1
                                    1-  194     .segment "uninit"
     0000                           1-  195     r0x101D:
                                    1-  196     	.res	1
                                    1-  197     .segment "uninit"
     0000                           1-  198     r0x101E:
                                    1-  199     	.res	1
                                    1-  200     .segment "uninit"
     0000                           1-  201     r0x101F:
                                    1-  202     	.res	1
                                    1-  203     .segment "uninit"
     0000                           1-  204     r0x1022:
                                    1-  205     	.res	1
                                    1-  206     .segment "uninit"
     0000                           1-  207     r0x1013:
                                    1-  208     	.res	1
                                    1-  209     .segment "uninit"
     0000                           1-  210     r0x1014:
                                    1-  211     	.res	1
                                    1-  212     .segment "uninit"
     0000                           1-  213     r0x1015:
                                    1-  214     	.res	1
                                    1-  215     .segment "uninit"
     0000                           1-  216     r0x1018:
                                    1-  217     	.res	1
                                    1-  218     .segment "uninit"
     0000                           1-  219     r0x1011:
                                    1-  220     	.res	1
                                    1-  221     .segment "uninit"
     0000                           1-  222     r0x1012:
                                    1-  223     	.res	1
                                    1-  224     .segment "uninit"
     0000                           1-  225     r0x1025:
                                    1-  226     	.res	1
                                    1-  227     .segment "uninit"
     0000                           1-  228     r0x1026:
                                    1-  229     	.res	1
                                    1-  230     .segment "uninit"
     0000                           1-  231     r0x101B:
                                    1-  232     	.res	1
                                    1-  233     .segment "uninit"
     0000                           1-  234     r0x101C:
                                    1-  235     	.res	1
                                    1-  236     ;--------------------------------------------------------
                                    1-  237     ; initialized data
                                    1-  238     ;--------------------------------------------------------
                                    1-  240     .segment "idata"
     0000                           1-  241     _jrStep:
     0000 0000                      1-  242     	dw	0x00
                                    1-  246     .segment "idata"
     0000                           1-  247     _fjStep:
     0000 0000                      1-  248     	dw	0x00
                                    1-  252     .segment "idata"
     0000                           1-  253     _intCount:
     0000 0000                      1-  254     	dw	0x00
                                    1-  258     .segment "idata"
     0000                           1-  259     _IntFlag:
     0000 0000                      1-  260     	dw	0x00
                                    1-  264     .segment "idata"
     0000                           1-  265     _keyCount:
     0000 0000                      1-  266     	dw	0x00
                                    1-  270     .segment "idata"
     0000                           1-  271     _keyCount2:
     0000 0000                      1-  272     	dw	0x00
                                    1-  276     .segment "idata"
     0000                           1-  277     _pwmFlag:
     0000 0000                      1-  278     	dw	0x00
                                    1-  282     .segment "idata"
     0000                           1-  283     _waitTime:
     0000 0000                      1-  284     	dw	0x00
                                    1-  287     ;--------------------------------------------------------
                                    1-  288     ; overlayable items in internal ram 
                                    1-  289     ;--------------------------------------------------------
                                    1-  290     ;	udata_ovr
                                    1-  291     ;--------------------------------------------------------
                                    1-  292     ; reset vector 
                                    1-  293     ;--------------------------------------------------------
                                    1-  294     ORG	0x0000
     0000 3rrr                      1-  295     	LGOTO	__nyc_ny8_startup
                                    1-  296     ;--------------------------------------------------------
                                    1-  297     ; interrupt and initialization code
                                    1-  298     ;--------------------------------------------------------
                                    1-  299     ORG 0x0008
                                    1-  300     	MGOTO	__sdcc_interrupt
     0008 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  302     .segment "code"
     0000                           1-  303     __sdcc_interrupt:
                                    1-  304     ;***
                                    1-  305     ;  pBlock Stats: dbName = I
                                    1-  306     ;***
                                    1-  307     ;2 compiler assigned registers:
                                    1-  308     ;   STK00
                                    1-  309     ;   STK01
                                    1-  310     ;; Starting pCode block
     0000                           1-  311     _isr:
                                    1-  312     ; 0 exit points
                                    1-  313     	.line	49, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  314     	MOVAR	WSAVE
     0001 1503                      1-  315     	SWAPR	STATUS,W
     0002 0283                      1-  316     	CLRR	STATUS
     0003 00rr                      1-  317     	MOVAR	SSAVE
     0004 010A                      1-  318     	MOVR	PCHBUF,W
     0005 028A                      1-  319     	CLRR	PCHBUF
     0006 00rr                      1-  320     	MOVAR	PSAVE
     0007 0104                      1-  321     	MOVR	FSR,W
                                    1-  322     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-  110 m1      .banksel ram_address
     0009 00rr                      1-  323     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  324     	MOVR	STK00,W
                                    1-  325     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-  110 m1      .banksel ram_address
     000C 00rr                      1-  326     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  327     	MOVR	STK01,W
                                    1-  328     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-  110 m1      .banksel ram_address
     000F 00rr                      1-  329     	MOVAR	___sdcc_saved_stk01
                                    1-  330     	.line	51, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  331     	BTRSS	_INTFbits,0
                                    1-  332     	MGOTO	_00108_DS_
     0011 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  333     	.line	53, "main.c"; 	TMR0 += 55;
     0012 2137                      1-  334     	MOVIA	0x37
     0013 03rr                      1-  335     	ADDAR	_TMR0,F
                                    1-  336     	.line	55, "main.c"; 	if(++intCount >= 100)
                                    1-  337     	BANKSEL	_intCount
     0014 rrrr                      3-  110 m1      .banksel ram_address
     0015 05rr                      1-  338     	INCR	_intCount,F
                                    1-  339     ;;unsigned compare: left < lit (0x64=100), size=1
     0016 2164                      1-  340     	MOVIA	0x64
     0017 04rr                      1-  341     	SUBAR	_intCount,W
     0018 0803                      1-  342     	BTRSS	STATUS,0
                                    1-  343     	MGOTO	_00108_DS_
     0019 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  344     	.line	57, "main.c"; 	IntFlag = 1;
     001A 2101                      1-  345     	MOVIA	0x01
                                    1-  346     	BANKSEL	_IntFlag
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 00rr                      1-  347     	MOVAR	_IntFlag
                                    1-  348     	.line	58, "main.c"; 	intCount = 0;
                                    1-  349     	BANKSEL	_intCount
     001D rrrr                      3-  110 m1      .banksel ram_address
     001E 02rr                      1-  350     	CLRR	_intCount
     001F                           1-  351     _00108_DS_:
                                    1-  352     	.line	65, "main.c"; 	if(INTFbits.PABIF)
     001F 08rr                      1-  353     	BTRSS	_INTFbits,1
                                    1-  354     	MGOTO	_00110_DS_
     0020 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  355     	.line	67, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)
     0021 21FD                      1-  356     	MOVIA	0xfd
     0022 00rr                      1-  357     	MOVAR	_INTF
     0023                           1-  358     _00110_DS_:
                                    1-  359     	.line	70, "main.c"; 	INTF = 0;
     0023 02rr                      1-  360     	CLRR	_INTF
                                    1-  361     	.line	72, "main.c"; 	}
                                    1-  362     	BANKSEL	___sdcc_saved_stk01
     0024 rrrr                      3-  110 m1      .banksel ram_address
     0025 01rr                      1-  363     	MOVR	___sdcc_saved_stk01,W
     0026 00rr                      1-  364     	MOVAR	STK01
                                    1-  365     	BANKSEL	___sdcc_saved_stk00
     0027 rrrr                      3-  110 m1      .banksel ram_address
     0028 01rr                      1-  366     	MOVR	___sdcc_saved_stk00,W
     0029 00rr                      1-  367     	MOVAR	STK00
                                    1-  368     	BANKSEL	___sdcc_saved_fsr
     002A rrrr                      3-  110 m1      .banksel ram_address
     002B 01rr                      1-  369     	MOVR	___sdcc_saved_fsr,W
     002C 0084                      1-  370     	MOVAR	FSR
     002D 01rr                      1-  371     	MOVR	PSAVE,W
     002E 008A                      1-  372     	MOVAR	PCHBUF
     002F 0283                      1-  373     	CLRR	STATUS
     0030 15rr                      1-  374     	SWAPR	SSAVE,W
     0031 0083                      1-  375     	MOVAR	STATUS
     0032 15rr                      1-  376     	SWAPR	WSAVE,F
     0033 15rr                      1-  377     	SWAPR	WSAVE,W
     0034                           1-  378     END_OF_INTERRUPT:
     0034 0011                      1-  379     	RETIE	
                                    1-  381     ;--------------------------------------------------------
                                    1-  382     ; code
                                    1-  383     ;--------------------------------------------------------
                                    1-  384     ;***
                                    1-  385     ;  pBlock Stats: dbName = M
                                    1-  386     ;***
                                    1-  387     ;has an exit
                                    1-  388     ;functions called:
                                    1-  389     ;   _initAD
                                    1-  390     ;   _keyCtr
                                    1-  391     ;   _workCtr
                                    1-  392     ;   _initAD
                                    1-  393     ;   _keyCtr
                                    1-  394     ;   _workCtr
                                    1-  395     ;; Starting pCode block
                                    1-  396     .segment "code"; module=main, function=_main
     0000                           1-  398     _main:
                                    1-  399     ; 2 exit points
                                    1-  400     	.line	77, "main.c"; 	DISI();
     0000 0013                      1-  401     	DISI
                                    1-  402     	.line	79, "main.c"; 	IOSTA = 0x2B;					// Set PortA as output port
     0001 212B                      1-  403     	MOVIA	0x2b
     0002 000r                      1-  404     	IOST	_IOSTA
                                    1-  405     	.line	80, "main.c"; 	IOSTB = 0x01;
     0003 2101                      1-  406     	MOVIA	0x01
     0004 000r                      1-  407     	IOST	_IOSTB
                                    1-  408     	.line	81, "main.c"; 	PORTA = 0x00;							// PortA Data Register = 0x00
     0005 02rr                      1-  409     	CLRR	_PORTA
                                    1-  410     	.line	82, "main.c"; 	APHCON = 0xFF;
     0006 21FF                      1-  411     	MOVIA	0xff
     0007 000r                      1-  412     	IOST	_APHCON
                                    1-  413     	.line	83, "main.c"; 	BPHCON = 0xFF;
     0008 00rr                      1-  414     	MOVAR	_BPHCON
                                    1-  415     	.line	84, "main.c"; 	ABPLCON = 0xFF;
     0009 00rr                      1-  416     	MOVAR	_ABPLCON
                                    1-  417     	.line	85, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000A 2101                      1-  418     	MOVIA	0x01
     000B 00rr                      1-  419     	MOVAR	_INTE
                                    1-  420     	.line	87, "main.c"; 	PCON1 = C_TMR0_Dis;
     000C 0200                      1-  421     	CLRA	
     000D 000r                      1-  422     	IOST	_PCON1
                                    1-  423     	.line	89, "main.c"; 	TMR0 = 55;
     000E 2137                      1-  424     	MOVIA	0x37
     000F 00rr                      1-  425     	MOVAR	_TMR0
                                    1-  426     	.line	90, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0010 0200                      1-  427     	CLRA	
     0011 0003                      1-  428     	T0MD	
                                    1-  429     	.line	92, "main.c"; 	PCON1 = C_TMR0_En;
     0012 2101                      1-  430     	MOVIA	0x01
     0013 000r                      1-  431     	IOST	_PCON1
                                    1-  432     	.line	95, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0014 2188                      1-  433     	MOVIA	0x88
     0015 00rr                      1-  434     	MOVAR	_PCON
                                    1-  435     	.line	98, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0016 2101                      1-  436     	MOVIA	0x01
     0017 000r                      1-  437     	IOST	_PCON1
                                    1-  438     	.line	99, "main.c"; 	ENI();
     0018 0004                      1-  439     	ENI
                                    1-  440     	.line	100, "main.c"; 	initAD();
                                    1-  441     	MCALL	_initAD
     0019 2rrr                      3-   66 m1      LCALL rom_address
     001A                           1-  442     _00118_DS_:
                                    1-  443     	.line	103, "main.c"; 	CLRWDT();							// Clear WatchDog
     001A 0002                      1-  444     	clrwdt
                                    1-  445     	.line	104, "main.c"; 	if(!IntFlag)
                                    1-  446     	BANKSEL	_IntFlag
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 01rr                      1-  447     	MOVR	_IntFlag,W
     001D 0D03                      1-  448     	BTRSC	STATUS,2
                                    1-  449     	MGOTO	_00118_DS_
     001E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  450     	.line	106, "main.c"; 	IntFlag = 0;
     001F 02rr                      1-  451     	CLRR	_IntFlag
                                    1-  452     	.line	107, "main.c"; 	keyCtr();
                                    1-  453     	MCALL	_keyCtr
     0020 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  454     	.line	108, "main.c"; 	workCtr();
                                    1-  455     	MCALL	_workCtr
     0021 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  456     	MGOTO	_00118_DS_
     0022 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  457     	.line	113, "main.c"; 	}
                                    1-  458     	RETURN	
     0023 0010                      3-   40 m1      ret
                                    1-  459     ; exit point of _main
                                    1-  461     ;***
                                    1-  462     ;  pBlock Stats: dbName = C
                                    1-  463     ;***
                                    1-  464     ;has an exit
                                    1-  465     ;functions called:
                                    1-  466     ;   _F_AIN2_Convert
                                    1-  467     ;   _F_AIN2_Convert
                                    1-  468     ;4 compiler assigned registers:
                                    1-  469     ;   r0x1019
                                    1-  470     ;   r0x101A
                                    1-  471     ;   r0x101B
                                    1-  472     ;   r0x101C
                                    1-  473     ;; Starting pCode block
                                    1-  474     .segment "code"; module=main, function=_checkTempAD
     0000                           1-  476     _checkTempAD:
                                    1-  477     ; 2 exit points
                                    1-  478     	.line	435, "main.c"; 	R_AIN2_DATA = R_AIN2_DATA_LB = 0x00;
                                    1-  479     	BANKSEL	_R_AIN2_DATA_LB
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 02rr                      1-  480     	CLRR	_R_AIN2_DATA_LB
                                    1-  481     	BANKSEL	_R_AIN2_DATA
     0002 rrrr                      3-  110 m1      .banksel ram_address
     0003 02rr                      1-  482     	CLRR	_R_AIN2_DATA
     0004 02rr                      1-  483     	CLRR	(_R_AIN2_DATA + 1)
                                    1-  484     	.line	436, "main.c"; 	F_AIN2_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1-  485     	MOVIA	0x08
                                    1-  486     	MCALL	_F_AIN2_Convert
     0006 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  487     	.line	437, "main.c"; 	R_AIN2_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1-  488     	BANKSEL	_R_AIN2_DATA
     0007 rrrr                      3-  110 m1      .banksel ram_address
     0008 15rr                      1-  489     	SWAPR	(_R_AIN2_DATA + 1),W
     0009 22F0                      1-  490     	ANDIA	0xf0
     000A 00rr                      1-  491     	MOVAR	(_R_AIN2_DATA + 1)
     000B 15rr                      1-  492     	SWAPR	_R_AIN2_DATA,W
     000C 00rr                      1-  493     	MOVAR	_R_AIN2_DATA
     000D 220F                      1-  494     	ANDIA	0x0f
     000E 11rr                      1-  495     	IORAR	(_R_AIN2_DATA + 1),F
     000F 12rr                      1-  496     	XORAR	_R_AIN2_DATA,F
                                    1-  497     	.line	438, "main.c"; 	R_AIN2_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1-  498     	MOVIA	0xf0
                                    1-  499     	BANKSEL	_R_AIN2_DATA_LB
     0011 rrrr                      3-  110 m1      .banksel ram_address
     0012 10rr                      1-  500     	ANDAR	_R_AIN2_DATA_LB,F
                                    1-  501     	.line	439, "main.c"; 	R_AIN2_DATA += R_AIN2_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1-  502     	MOVR	_R_AIN2_DATA_LB,W
                                    1-  503     	BANKSEL	r0x101B
     0014 rrrr                      3-  110 m1      .banksel ram_address
     0015 00rr                      1-  504     	MOVAR	r0x101B
                                    1-  505     ;;1	MOVAR	r0x1019
                                    1-  506     ;;1	CLRR	r0x101A
                                    1-  507     ;;106	MOVR	r0x1019,W
     0016 2100                      1-  508     	MOVIA	0x00
                                    1-  509     	BANKSEL	r0x101C
     0017 rrrr                      3-  110 m1      .banksel ram_address
     0018 00rr                      1-  510     	MOVAR	r0x101C
                                    1-  511     	BANKSEL	r0x101B
     0019 rrrr                      3-  110 m1      .banksel ram_address
     001A 01rr                      1-  512     	MOVR	r0x101B,W
                                    1-  513     	BANKSEL	_R_AIN2_DATA
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 03rr                      1-  514     	ADDAR	_R_AIN2_DATA,F
                                    1-  515     	BANKSEL	r0x101C
     001D rrrr                      3-  110 m1      .banksel ram_address
     001E 01rr                      1-  516     	MOVR	r0x101C,W
     001F 0C03                      1-  517     	BTRSC	STATUS,0
     0020 05rr                      1-  518     	INCR	r0x101C,W
     0021 0D03                      1-  519     	BTRSC	STATUS,2
                                    1-  520     	MGOTO	_00001_DS_
     0022 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  521     	BANKSEL	_R_AIN2_DATA
     0023 rrrr                      3-  110 m1      .banksel ram_address
     0024 03rr                      1-  522     	ADDAR	(_R_AIN2_DATA + 1),F
                                    1-  523     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1-  524     _00001_DS_:
                                    1-  525     	.line	440, "main.c"; 	R_AIN2_DATA >>=3;					// R_AIN0_DATA divided 
     0025 1C03                      1-  526     	BCR	STATUS,0
                                    1-  527     	BANKSEL	_R_AIN2_DATA
     0026 rrrr                      3-  110 m1      .banksel ram_address
     0027 13rr                      1-  528     	RRR	(_R_AIN2_DATA + 1),F
     0028 13rr                      1-  529     	RRR	_R_AIN2_DATA,F
                                    1-  530     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1-  531     	BCR	STATUS,0
     002A 13rr                      1-  532     	RRR	(_R_AIN2_DATA + 1),F
     002B 13rr                      1-  533     	RRR	_R_AIN2_DATA,F
                                    1-  534     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1-  535     	BCR	STATUS,0
     002D 13rr                      1-  536     	RRR	(_R_AIN2_DATA + 1),F
     002E 13rr                      1-  537     	RRR	_R_AIN2_DATA,F
                                    1-  538     	.line	443, "main.c"; 	}
                                    1-  539     	RETURN	
     002F 0010                      3-   40 m1      ret
                                    1-  540     ; exit point of _checkTempAD
                                    1-  542     ;***
                                    1-  543     ;  pBlock Stats: dbName = C
                                    1-  544     ;***
                                    1-  545     ;has an exit
                                    1-  546     ;functions called:
                                    1-  547     ;   _F_AIN4_Convert
                                    1-  548     ;   _F_AIN4_Convert
                                    1-  549     ;4 compiler assigned registers:
                                    1-  550     ;   r0x1023
                                    1-  551     ;   r0x1024
                                    1-  552     ;   r0x1025
                                    1-  553     ;   r0x1026
                                    1-  554     ;; Starting pCode block
                                    1-  555     .segment "code"; module=main, function=_checkOutA
     0000                           1-  557     _checkOutA:
                                    1-  558     ; 2 exit points
                                    1-  559     	.line	417, "main.c"; 	R_AIN4_DATA = R_AIN4_DATA_LB = 0x00;
                                    1-  560     	BANKSEL	_R_AIN4_DATA_LB
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 02rr                      1-  561     	CLRR	_R_AIN4_DATA_LB
                                    1-  562     	BANKSEL	_R_AIN4_DATA
     0002 rrrr                      3-  110 m1      .banksel ram_address
     0003 02rr                      1-  563     	CLRR	_R_AIN4_DATA
     0004 02rr                      1-  564     	CLRR	(_R_AIN4_DATA + 1)
                                    1-  565     	.line	418, "main.c"; 	F_AIN4_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1-  566     	MOVIA	0x08
                                    1-  567     	MCALL	_F_AIN4_Convert
     0006 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  568     	.line	419, "main.c"; 	R_AIN4_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1-  569     	BANKSEL	_R_AIN4_DATA
     0007 rrrr                      3-  110 m1      .banksel ram_address
     0008 15rr                      1-  570     	SWAPR	(_R_AIN4_DATA + 1),W
     0009 22F0                      1-  571     	ANDIA	0xf0
     000A 00rr                      1-  572     	MOVAR	(_R_AIN4_DATA + 1)
     000B 15rr                      1-  573     	SWAPR	_R_AIN4_DATA,W
     000C 00rr                      1-  574     	MOVAR	_R_AIN4_DATA
     000D 220F                      1-  575     	ANDIA	0x0f
     000E 11rr                      1-  576     	IORAR	(_R_AIN4_DATA + 1),F
     000F 12rr                      1-  577     	XORAR	_R_AIN4_DATA,F
                                    1-  578     	.line	420, "main.c"; 	R_AIN4_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1-  579     	MOVIA	0xf0
                                    1-  580     	BANKSEL	_R_AIN4_DATA_LB
     0011 rrrr                      3-  110 m1      .banksel ram_address
     0012 10rr                      1-  581     	ANDAR	_R_AIN4_DATA_LB,F
                                    1-  582     	.line	421, "main.c"; 	R_AIN4_DATA += R_AIN4_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1-  583     	MOVR	_R_AIN4_DATA_LB,W
                                    1-  584     	BANKSEL	r0x1025
     0014 rrrr                      3-  110 m1      .banksel ram_address
     0015 00rr                      1-  585     	MOVAR	r0x1025
                                    1-  586     ;;1	MOVAR	r0x1023
                                    1-  587     ;;1	CLRR	r0x1024
                                    1-  588     ;;105	MOVR	r0x1023,W
     0016 2100                      1-  589     	MOVIA	0x00
                                    1-  590     	BANKSEL	r0x1026
     0017 rrrr                      3-  110 m1      .banksel ram_address
     0018 00rr                      1-  591     	MOVAR	r0x1026
                                    1-  592     	BANKSEL	r0x1025
     0019 rrrr                      3-  110 m1      .banksel ram_address
     001A 01rr                      1-  593     	MOVR	r0x1025,W
                                    1-  594     	BANKSEL	_R_AIN4_DATA
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 03rr                      1-  595     	ADDAR	_R_AIN4_DATA,F
                                    1-  596     	BANKSEL	r0x1026
     001D rrrr                      3-  110 m1      .banksel ram_address
     001E 01rr                      1-  597     	MOVR	r0x1026,W
     001F 0C03                      1-  598     	BTRSC	STATUS,0
     0020 05rr                      1-  599     	INCR	r0x1026,W
     0021 0D03                      1-  600     	BTRSC	STATUS,2
                                    1-  601     	MGOTO	_00002_DS_
     0022 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  602     	BANKSEL	_R_AIN4_DATA
     0023 rrrr                      3-  110 m1      .banksel ram_address
     0024 03rr                      1-  603     	ADDAR	(_R_AIN4_DATA + 1),F
                                    1-  604     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1-  605     _00002_DS_:
                                    1-  606     	.line	422, "main.c"; 	R_AIN4_DATA >>=3;					// R_AIN0_DATA divided 8
     0025 1C03                      1-  607     	BCR	STATUS,0
                                    1-  608     	BANKSEL	_R_AIN4_DATA
     0026 rrrr                      3-  110 m1      .banksel ram_address
     0027 13rr                      1-  609     	RRR	(_R_AIN4_DATA + 1),F
     0028 13rr                      1-  610     	RRR	_R_AIN4_DATA,F
                                    1-  611     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1-  612     	BCR	STATUS,0
     002A 13rr                      1-  613     	RRR	(_R_AIN4_DATA + 1),F
     002B 13rr                      1-  614     	RRR	_R_AIN4_DATA,F
                                    1-  615     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1-  616     	BCR	STATUS,0
     002D 13rr                      1-  617     	RRR	(_R_AIN4_DATA + 1),F
     002E 13rr                      1-  618     	RRR	_R_AIN4_DATA,F
                                    1-  619     	.line	428, "main.c"; 	}
                                    1-  620     	RETURN	
     002F 0010                      3-   40 m1      ret
                                    1-  621     ; exit point of _checkOutA
                                    1-  623     ;***
                                    1-  624     ;  pBlock Stats: dbName = C
                                    1-  625     ;***
                                    1-  626     ;has an exit
                                    1-  627     ;2 compiler assigned registers:
                                    1-  628     ;   r0x1011
                                    1-  629     ;   r0x1012
                                    1-  630     ;; Starting pCode block
                                    1-  631     .segment "code"; module=main, function=_delayms
                                    1-  633     ;local variable name mapping:
     0000                           1-  636     _delayms:
                                    1-  637     ; 2 exit points
                                    1-  638     	.line	407, "main.c"; 	void delayms(u8t time)
                                    1-  639     	BANKSEL	r0x1011
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1-  640     	MOVAR	r0x1011
                                    1-  641     	.line	409, "main.c"; 	for(u8t i=0;i<time;i++)
                                    1-  642     	BANKSEL	r0x1012
     0002 rrrr                      3-  110 m1      .banksel ram_address
     0003 02rr                      1-  643     	CLRR	r0x1012
     0004                           1-  644     _00297_DS_:
                                    1-  645     	BANKSEL	r0x1011
     0004 rrrr                      3-  110 m1      .banksel ram_address
     0005 01rr                      1-  646     	MOVR	r0x1011,W
                                    1-  647     	BANKSEL	r0x1012
     0006 rrrr                      3-  110 m1      .banksel ram_address
     0007 04rr                      1-  648     	SUBAR	r0x1012,W
     0008 0C03                      1-  649     	BTRSC	STATUS,0
                                    1-  650     	MGOTO	_00299_DS_
     0009 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  651     	.line	410, "main.c"; 	NOP();
     000A 0000                      1-  652     	nop
                                    1-  653     	.line	409, "main.c"; 	for(u8t i=0;i<time;i++)
                                    1-  654     	BANKSEL	r0x1012
     000B rrrr                      3-  110 m1      .banksel ram_address
     000C 05rr                      1-  655     	INCR	r0x1012,F
                                    1-  656     	MGOTO	_00297_DS_
     000D 3rrr                      3-   63 m1      LGOTO rom_address
     000E                           1-  657     _00299_DS_:
                                    1-  658     	.line	411, "main.c"; 	}
                                    1-  659     	RETURN	
     000E 0010                      3-   40 m1      ret
                                    1-  660     ; exit point of _delayms
                                    1-  662     ;***
                                    1-  663     ;  pBlock Stats: dbName = C
                                    1-  664     ;***
                                    1-  665     ;has an exit
                                    1-  666     ;; Starting pCode block
                                    1-  667     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  669     _F_wait_eoc:
                                    1-  670     ; 2 exit points
     0000                           1-  671     _00290_DS_:
                                    1-  672     	.line	401, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  673     	BTRSS	_ADMDbits,5
                                    1-  674     	MGOTO	_00290_DS_
     0001 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  675     	.line	403, "main.c"; 	}
                                    1-  676     	RETURN	
     0002 0010                      3-   40 m1      ret
                                    1-  677     ; exit point of _F_wait_eoc
                                    1-  679     ;***
                                    1-  680     ;  pBlock Stats: dbName = C
                                    1-  681     ;***
                                    1-  682     ;has an exit
                                    1-  683     ;functions called:
                                    1-  684     ;   _delayms
                                    1-  685     ;   _F_wait_eoc
                                    1-  686     ;   _delayms
                                    1-  687     ;   _F_wait_eoc
                                    1-  688     ;6 compiler assigned registers:
                                    1-  689     ;   r0x1013
                                    1-  690     ;   r0x1014
                                    1-  691     ;   r0x1015
                                    1-  692     ;   r0x1016
                                    1-  693     ;   r0x1017
                                    1-  694     ;   r0x1018
                                    1-  695     ;; Starting pCode block
                                    1-  696     .segment "code"; module=main, function=_F_AIN2_Convert
                                    1-  698     ;local variable name mapping:
     0000                           1-  701     _F_AIN2_Convert:
                                    1-  702     ; 2 exit points
                                    1-  703     	.line	384, "main.c"; 	void F_AIN2_Convert(char count)
                                    1-  704     	BANKSEL	r0x1013
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1-  705     	MOVAR	r0x1013
                                    1-  706     	.line	386, "main.c"; 	R_AIN2_DATA=R_AIN2_DATA_LB=0x00;   
                                    1-  707     	BANKSEL	_R_AIN2_DATA_LB
     0002 rrrr                      3-  110 m1      .banksel ram_address
     0003 02rr                      1-  708     	CLRR	_R_AIN2_DATA_LB
                                    1-  709     	BANKSEL	_R_AIN2_DATA
     0004 rrrr                      3-  110 m1      .banksel ram_address
     0005 02rr                      1-  710     	CLRR	_R_AIN2_DATA
     0006 02rr                      1-  711     	CLRR	(_R_AIN2_DATA + 1)
                                    1-  712     	.line	388, "main.c"; 	ADMD  = 0x90 | C_ADC_PA1;				// Select AIN6(PB1) pad as ADC input
     0007 2191                      1-  713     	MOVIA	0x91
     0008 00rr                      1-  714     	MOVAR	_ADMD
                                    1-  715     	.line	389, "main.c"; 	delayms(200);	
     0009 21C8                      1-  716     	MOVIA	0xc8
                                    1-  717     	MCALL	_delayms
     000A 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  718     	.line	390, "main.c"; 	for(i=1;i<=count;i++)
     000B 2101                      1-  719     	MOVIA	0x01
                                    1-  720     	BANKSEL	r0x1014
     000C rrrr                      3-  110 m1      .banksel ram_address
     000D 00rr                      1-  721     	MOVAR	r0x1014
     000E                           1-  722     _00283_DS_:
                                    1-  723     	BANKSEL	r0x1014
     000E rrrr                      3-  110 m1      .banksel ram_address
     000F 01rr                      1-  724     	MOVR	r0x1014,W
                                    1-  725     	BANKSEL	r0x1013
     0010 rrrr                      3-  110 m1      .banksel ram_address
     0011 04rr                      1-  726     	SUBAR	r0x1013,W
     0012 0803                      1-  727     	BTRSS	STATUS,0
                                    1-  728     	MGOTO	_00285_DS_
     0013 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  729     	.line	392, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0014 1Brr                      1-  730     	BSR	_ADMDbits,6
                                    1-  731     	.line	393, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
                                    1-  732     	MCALL	_F_wait_eoc
     0015 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  733     	.line	394, "main.c"; 	R_AIN2_DATA_LB += ( 0x0F & ADR); 
     0016 210F                      1-  734     	MOVIA	0x0f
     0017 10rr                      1-  735     	ANDAR	_ADR,W
                                    1-  736     ;;3	MOVAR	r0x1015
                                    1-  737     	BANKSEL	_R_AIN2_DATA_LB
     0018 rrrr                      3-  110 m1      .banksel ram_address
     0019 03rr                      1-  738     	ADDAR	_R_AIN2_DATA_LB,F
                                    1-  739     	.line	395, "main.c"; 	R_AIN2_DATA    += ADD; 
     001A 01rr                      1-  740     	MOVR	_ADD,W
                                    1-  741     	BANKSEL	r0x1015
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 00rr                      1-  742     	MOVAR	r0x1015
                                    1-  743     ;;1	CLRR	r0x1016
                                    1-  744     ;;104	MOVR	r0x1015,W
                                    1-  745     ;;102	MOVAR	r0x1017
     001D 2100                      1-  746     	MOVIA	0x00
                                    1-  747     	BANKSEL	r0x1018
     001E rrrr                      3-  110 m1      .banksel ram_address
     001F 00rr                      1-  748     	MOVAR	r0x1018
                                    1-  749     ;;103	MOVR	r0x1017,W
                                    1-  750     	BANKSEL	r0x1015
     0020 rrrr                      3-  110 m1      .banksel ram_address
     0021 01rr                      1-  751     	MOVR	r0x1015,W
                                    1-  752     	BANKSEL	_R_AIN2_DATA
     0022 rrrr                      3-  110 m1      .banksel ram_address
     0023 03rr                      1-  753     	ADDAR	_R_AIN2_DATA,F
                                    1-  754     	BANKSEL	r0x1018
     0024 rrrr                      3-  110 m1      .banksel ram_address
     0025 01rr                      1-  755     	MOVR	r0x1018,W
     0026 0C03                      1-  756     	BTRSC	STATUS,0
     0027 05rr                      1-  757     	INCR	r0x1018,W
     0028 0D03                      1-  758     	BTRSC	STATUS,2
                                    1-  759     	MGOTO	_00003_DS_
     0029 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  760     	BANKSEL	_R_AIN2_DATA
     002A rrrr                      3-  110 m1      .banksel ram_address
     002B 03rr                      1-  761     	ADDAR	(_R_AIN2_DATA + 1),F
     002C                           1-  762     _00003_DS_:
                                    1-  763     	.line	390, "main.c"; 	for(i=1;i<=count;i++)
                                    1-  764     	BANKSEL	r0x1014
     002C rrrr                      3-  110 m1      .banksel ram_address
     002D 05rr                      1-  765     	INCR	r0x1014,F
                                    1-  766     	MGOTO	_00283_DS_
     002E 3rrr                      3-   63 m1      LGOTO rom_address
     002F                           1-  767     _00285_DS_:
                                    1-  768     	.line	397, "main.c"; 	}
                                    1-  769     	RETURN	
     002F 0010                      3-   40 m1      ret
                                    1-  770     ; exit point of _F_AIN2_Convert
                                    1-  772     ;***
                                    1-  773     ;  pBlock Stats: dbName = C
                                    1-  774     ;***
                                    1-  775     ;has an exit
                                    1-  776     ;functions called:
                                    1-  777     ;   _delayms
                                    1-  778     ;   _F_wait_eoc
                                    1-  779     ;   _delayms
                                    1-  780     ;   _F_wait_eoc
                                    1-  781     ;6 compiler assigned registers:
                                    1-  782     ;   r0x101D
                                    1-  783     ;   r0x101E
                                    1-  784     ;   r0x101F
                                    1-  785     ;   r0x1020
                                    1-  786     ;   r0x1021
                                    1-  787     ;   r0x1022
                                    1-  788     ;; Starting pCode block
                                    1-  789     .segment "code"; module=main, function=_F_AIN4_Convert
                                    1-  791     ;local variable name mapping:
     0000                           1-  794     _F_AIN4_Convert:
                                    1-  795     ; 2 exit points
                                    1-  796     	.line	369, "main.c"; 	void F_AIN4_Convert(char count)
                                    1-  797     	BANKSEL	r0x101D
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1-  798     	MOVAR	r0x101D
                                    1-  799     	.line	371, "main.c"; 	R_AIN4_DATA=R_AIN4_DATA_LB=0x00;   
                                    1-  800     	BANKSEL	_R_AIN4_DATA_LB
     0002 rrrr                      3-  110 m1      .banksel ram_address
     0003 02rr                      1-  801     	CLRR	_R_AIN4_DATA_LB
                                    1-  802     	BANKSEL	_R_AIN4_DATA
     0004 rrrr                      3-  110 m1      .banksel ram_address
     0005 02rr                      1-  803     	CLRR	_R_AIN4_DATA
     0006 02rr                      1-  804     	CLRR	(_R_AIN4_DATA + 1)
                                    1-  805     	.line	373, "main.c"; 	ADMD  = 0x90 | C_ADC_PA3;				// Select AIN6(PB1) pad as ADC input
     0007 2193                      1-  806     	MOVIA	0x93
     0008 00rr                      1-  807     	MOVAR	_ADMD
                                    1-  808     	.line	374, "main.c"; 	delayms(200);	
     0009 21C8                      1-  809     	MOVIA	0xc8
                                    1-  810     	MCALL	_delayms
     000A 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  811     	.line	375, "main.c"; 	for(i=1;i<=count;i++)
     000B 2101                      1-  812     	MOVIA	0x01
                                    1-  813     	BANKSEL	r0x101E
     000C rrrr                      3-  110 m1      .banksel ram_address
     000D 00rr                      1-  814     	MOVAR	r0x101E
     000E                           1-  815     _00274_DS_:
                                    1-  816     	BANKSEL	r0x101E
     000E rrrr                      3-  110 m1      .banksel ram_address
     000F 01rr                      1-  817     	MOVR	r0x101E,W
                                    1-  818     	BANKSEL	r0x101D
     0010 rrrr                      3-  110 m1      .banksel ram_address
     0011 04rr                      1-  819     	SUBAR	r0x101D,W
     0012 0803                      1-  820     	BTRSS	STATUS,0
                                    1-  821     	MGOTO	_00276_DS_
     0013 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  822     	.line	377, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0014 1Brr                      1-  823     	BSR	_ADMDbits,6
                                    1-  824     	.line	378, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
                                    1-  825     	MCALL	_F_wait_eoc
     0015 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  826     	.line	379, "main.c"; 	R_AIN4_DATA_LB += ( 0x0F & ADR); 
     0016 210F                      1-  827     	MOVIA	0x0f
     0017 10rr                      1-  828     	ANDAR	_ADR,W
                                    1-  829     ;;3	MOVAR	r0x101F
                                    1-  830     	BANKSEL	_R_AIN4_DATA_LB
     0018 rrrr                      3-  110 m1      .banksel ram_address
     0019 03rr                      1-  831     	ADDAR	_R_AIN4_DATA_LB,F
                                    1-  832     	.line	380, "main.c"; 	R_AIN4_DATA    += ADD; 
     001A 01rr                      1-  833     	MOVR	_ADD,W
                                    1-  834     	BANKSEL	r0x101F
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 00rr                      1-  835     	MOVAR	r0x101F
                                    1-  836     ;;1	CLRR	r0x1020
                                    1-  837     ;;101	MOVR	r0x101F,W
                                    1-  838     ;;99	MOVAR	r0x1021
     001D 2100                      1-  839     	MOVIA	0x00
                                    1-  840     	BANKSEL	r0x1022
     001E rrrr                      3-  110 m1      .banksel ram_address
     001F 00rr                      1-  841     	MOVAR	r0x1022
                                    1-  842     ;;100	MOVR	r0x1021,W
                                    1-  843     	BANKSEL	r0x101F
     0020 rrrr                      3-  110 m1      .banksel ram_address
     0021 01rr                      1-  844     	MOVR	r0x101F,W
                                    1-  845     	BANKSEL	_R_AIN4_DATA
     0022 rrrr                      3-  110 m1      .banksel ram_address
     0023 03rr                      1-  846     	ADDAR	_R_AIN4_DATA,F
                                    1-  847     	BANKSEL	r0x1022
     0024 rrrr                      3-  110 m1      .banksel ram_address
     0025 01rr                      1-  848     	MOVR	r0x1022,W
     0026 0C03                      1-  849     	BTRSC	STATUS,0
     0027 05rr                      1-  850     	INCR	r0x1022,W
     0028 0D03                      1-  851     	BTRSC	STATUS,2
                                    1-  852     	MGOTO	_00004_DS_
     0029 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  853     	BANKSEL	_R_AIN4_DATA
     002A rrrr                      3-  110 m1      .banksel ram_address
     002B 03rr                      1-  854     	ADDAR	(_R_AIN4_DATA + 1),F
     002C                           1-  855     _00004_DS_:
                                    1-  856     	.line	375, "main.c"; 	for(i=1;i<=count;i++)
                                    1-  857     	BANKSEL	r0x101E
     002C rrrr                      3-  110 m1      .banksel ram_address
     002D 05rr                      1-  858     	INCR	r0x101E,F
                                    1-  859     	MGOTO	_00274_DS_
     002E 3rrr                      3-   63 m1      LGOTO rom_address
     002F                           1-  860     _00276_DS_:
                                    1-  861     	.line	382, "main.c"; 	}
                                    1-  862     	RETURN	
     002F 0010                      3-   40 m1      ret
                                    1-  863     ; exit point of _F_AIN4_Convert
                                    1-  865     ;***
                                    1-  866     ;  pBlock Stats: dbName = C
                                    1-  867     ;***
                                    1-  868     ;has an exit
                                    1-  869     ;functions called:
                                    1-  870     ;   _delayms
                                    1-  871     ;   _delayms
                                    1-  872     ;; Starting pCode block
                                    1-  873     .segment "code"; module=main, function=_initAD
     0000                           1-  875     _initAD:
                                    1-  876     ; 2 exit points
                                    1-  877     	.line	344, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA1 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2181                      1-  878     	MOVIA	0x81
     0001 00rr                      1-  879     	MOVAR	_ADMD
                                    1-  880     	.line	347, "main.c"; 	ADVREFH = C_Vrefh_4V;					// ADC reference high voltage is supplied by internal 4V  (Note: ADC clock freq. must be equal or less than 1MHz)
     0002 2102                      1-  881     	MOVIA	0x02
     0003 00rr                      1-  882     	MOVAR	_ADVREFH
                                    1-  883     	.line	354, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0004 2110                      1-  884     	MOVIA	0x10
     0005 00rr                      1-  885     	MOVAR	_ADR
                                    1-  886     	.line	356, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0006 2103                      1-  887     	MOVIA	0x03
     0007 00rr                      1-  888     	MOVAR	_ADCR
                                    1-  889     	.line	358, "main.c"; 	PACON =  C_PA1_AIN1 | C_PA3_AIN3;						// Set AIN0(PA0) as pure ADC input for reduce power consumption (SFR "PACON")
     0008 210A                      1-  890     	MOVIA	0x0a
     0009 00rr                      1-  891     	MOVAR	_PACON
                                    1-  892     	.line	359, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     000A 1Arr                      1-  893     	BSR	_ADMDbits,4
                                    1-  894     	.line	360, "main.c"; 	delayms(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     000B 2164                      1-  895     	MOVIA	0x64
                                    1-  896     	MCALL	_delayms
     000C 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  897     	.line	363, "main.c"; 	}
                                    1-  898     	RETURN	
     000D 0010                      3-   40 m1      ret
                                    1-  899     ; exit point of _initAD
                                    1-  901     ;***
                                    1-  902     ;  pBlock Stats: dbName = C
                                    1-  903     ;***
                                    1-  904     ;functions called:
                                    1-  905     ;   _keyRead
                                    1-  906     ;   _ledoff
                                    1-  907     ;   _keyRead2
                                    1-  908     ;   _ledoff
                                    1-  909     ;   _keyRead
                                    1-  910     ;   _ledoff
                                    1-  911     ;   _keyRead2
                                    1-  912     ;   _ledoff
                                    1-  913     ;2 compiler assigned registers:
                                    1-  914     ;   r0x1028
                                    1-  915     ;   r0x1029
                                    1-  916     ;; Starting pCode block
                                    1-  917     .segment "code"; module=main, function=_keyCtr
                                    1-  919     ;local variable name mapping:
     0000                           1-  921     _keyCtr:
                                    1-  922     ; 0 exit points
                                    1-  923     	.line	302, "main.c"; 	char kclick = keyRead(0x01 & (~PORTA));
     0000 07rr                      1-  924     	COMR	_PORTA,W
                                    1-  925     	BANKSEL	r0x1028
     0001 rrrr                      3-  110 m1      .banksel ram_address
     0002 00rr                      1-  926     	MOVAR	r0x1028
     0003 2101                      1-  927     	MOVIA	0x01
     0004 10rr                      1-  928     	ANDAR	r0x1028,F
     0005 01rr                      1-  929     	MOVR	r0x1028,W
                                    1-  930     	MCALL	_keyRead
     0006 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  931     	BANKSEL	r0x1028
     0007 rrrr                      3-  110 m1      .banksel ram_address
     0008 00rr                      1-  932     	MOVAR	r0x1028
                                    1-  933     	.line	303, "main.c"; 	if(kclick == 1)
     0009 2401                      1-  934     	XORIA	0x01
     000A 0903                      1-  935     	BTRSS	STATUS,2
                                    1-  936     	MGOTO	_00255_DS_
     000B 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  937     	.line	305, "main.c"; 	ledoff();
                                    1-  938     	MCALL	_ledoff
     000C 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  939     	.line	306, "main.c"; 	waitTime = 200;
     000D 21C8                      1-  940     	MOVIA	0xc8
                                    1-  941     	BANKSEL	_waitTime
     000E rrrr                      3-  110 m1      .banksel ram_address
     000F 00rr                      1-  942     	MOVAR	_waitTime
                                    1-  943     	.line	307, "main.c"; 	jrStep = 0;
                                    1-  944     	BANKSEL	_jrStep
     0010 rrrr                      3-  110 m1      .banksel ram_address
     0011 02rr                      1-  945     	CLRR	_jrStep
                                    1-  946     	.line	308, "main.c"; 	if(fjStep == 0)
                                    1-  947     	BANKSEL	_fjStep
     0012 rrrr                      3-  110 m1      .banksel ram_address
     0013 01rr                      1-  948     	MOVR	_fjStep,W
     0014 0903                      1-  949     	BTRSS	STATUS,2
                                    1-  950     	MGOTO	_00252_DS_
     0015 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  951     	.line	310, "main.c"; 	fjStep = 2;
     0016 2102                      1-  952     	MOVIA	0x02
     0017 00rr                      1-  953     	MOVAR	_fjStep
                                    1-  954     	MGOTO	_00255_DS_
     0018 3rrr                      3-   63 m1      LGOTO rom_address
     0019                           1-  955     _00252_DS_:
                                    1-  956     	.line	312, "main.c"; 	else if(fjStep > 0)
                                    1-  957     	BANKSEL	_fjStep
     0019 rrrr                      3-  110 m1      .banksel ram_address
     001A 01rr                      1-  958     	MOVR	_fjStep,W
     001B 0903                      1-  959     	BTRSS	STATUS,2
                                    1-  960     	.line	314, "main.c"; 	fjStep--;
     001C 06rr                      1-  961     	DECR	_fjStep,F
     001D                           1-  962     _00255_DS_:
                                    1-  963     	.line	320, "main.c"; 	kclick = keyRead2(0x01 & (~PORTB));
     001D 07rr                      1-  964     	COMR	_PORTB,W
                                    1-  965     	BANKSEL	r0x1029
     001E rrrr                      3-  110 m1      .banksel ram_address
     001F 00rr                      1-  966     	MOVAR	r0x1029
     0020 2101                      1-  967     	MOVIA	0x01
     0021 10rr                      1-  968     	ANDAR	r0x1029,F
     0022 01rr                      1-  969     	MOVR	r0x1029,W
                                    1-  970     	MCALL	_keyRead2
     0023 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  971     	BANKSEL	r0x1028
     0024 rrrr                      3-  110 m1      .banksel ram_address
     0025 00rr                      1-  972     	MOVAR	r0x1028
                                    1-  973     	.line	321, "main.c"; 	if(kclick == 1)
     0026 2401                      1-  974     	XORIA	0x01
     0027 0903                      1-  975     	BTRSS	STATUS,2
                                    1-  976     	MGOTO	_00263_DS_
     0028 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  977     	.line	323, "main.c"; 	ledoff();
                                    1-  978     	MCALL	_ledoff
     0029 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  979     	.line	324, "main.c"; 	fjStep = 0;
                                    1-  980     	BANKSEL	_fjStep
     002A rrrr                      3-  110 m1      .banksel ram_address
     002B 02rr                      1-  981     	CLRR	_fjStep
                                    1-  982     	.line	325, "main.c"; 	if(jrStep == 0)
                                    1-  983     	BANKSEL	_jrStep
     002C rrrr                      3-  110 m1      .banksel ram_address
     002D 01rr                      1-  984     	MOVR	_jrStep,W
     002E 0903                      1-  985     	BTRSS	STATUS,2
                                    1-  986     	MGOTO	_00259_DS_
     002F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  987     	.line	327, "main.c"; 	jrStep = 2;
     0030 2102                      1-  988     	MOVIA	0x02
     0031 00rr                      1-  989     	MOVAR	_jrStep
                                    1-  990     	MGOTO	_00263_DS_
     0032 3rrr                      3-   63 m1      LGOTO rom_address
     0033                           1-  991     _00259_DS_:
                                    1-  992     	.line	329, "main.c"; 	else if(jrStep > 0)
                                    1-  993     	BANKSEL	_jrStep
     0033 rrrr                      3-  110 m1      .banksel ram_address
     0034 01rr                      1-  994     	MOVR	_jrStep,W
     0035 0903                      1-  995     	BTRSS	STATUS,2
                                    1-  996     	.line	331, "main.c"; 	jrStep--;
     0036 06rr                      1-  997     	DECR	_jrStep,F
     0037                           1-  998     _00263_DS_:
                                    1-  999     	.line	336, "main.c"; 	}
                                    1- 1000     	RETURN	
     0037 0010                      3-   40 m1      ret
                                    1- 1002     ;***
                                    1- 1003     ;  pBlock Stats: dbName = C
                                    1- 1004     ;***
                                    1- 1005     ;has an exit
                                    1- 1006     ;1 compiler assigned register :
                                    1- 1007     ;   r0x1027
                                    1- 1008     ;; Starting pCode block
                                    1- 1009     .segment "code"; module=main, function=_keyRead2
                                    1- 1011     ;local variable name mapping:
     0000                           1- 1013     _keyRead2:
                                    1- 1014     ; 2 exit points
                                    1- 1015     	.line	275, "main.c"; 	char keyRead2(char keyStatus)	
                                    1- 1016     	BANKSEL	r0x1027
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1- 1017     	MOVAR	r0x1027
                                    1- 1018     	.line	277, "main.c"; 	if(keyStatus)
     0002 01rr                      1- 1019     	MOVR	r0x1027,W
     0003 0D03                      1- 1020     	BTRSC	STATUS,2
                                    1- 1021     	MGOTO	_00242_DS_
     0004 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1022     	.line	279, "main.c"; 	keyCount2++;
                                    1- 1023     	BANKSEL	_keyCount2
     0005 rrrr                      3-  110 m1      .banksel ram_address
     0006 05rr                      1- 1024     	INCR	_keyCount2,F
                                    1- 1025     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1- 1026     	.line	281, "main.c"; 	if(keyCount2 >= 200)
     0007 21C8                      1- 1027     	MOVIA	0xc8
     0008 04rr                      1- 1028     	SUBAR	_keyCount2,W
     0009 0803                      1- 1029     	BTRSS	STATUS,0
                                    1- 1030     	MGOTO	_00243_DS_
     000A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1031     	.line	283, "main.c"; 	keyCount2 = 200;
     000B 21C8                      1- 1032     	MOVIA	0xc8
     000C 00rr                      1- 1033     	MOVAR	_keyCount2
                                    1- 1034     	MGOTO	_00243_DS_
     000D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1035     ;;unsigned compare: left < lit (0x4=4), size=1
     000E                           1- 1036     _00242_DS_:
                                    1- 1037     	.line	288, "main.c"; 	if(keyCount2 >= 4)
     000E 2104                      1- 1038     	MOVIA	0x04
                                    1- 1039     	BANKSEL	_keyCount2
     000F rrrr                      3-  110 m1      .banksel ram_address
     0010 04rr                      1- 1040     	SUBAR	_keyCount2,W
     0011 0803                      1- 1041     	BTRSS	STATUS,0
                                    1- 1042     	MGOTO	_00240_DS_
     0012 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1043     	.line	290, "main.c"; 	keyCount2 = 0;
     0013 02rr                      1- 1044     	CLRR	_keyCount2
                                    1- 1045     	.line	291, "main.c"; 	return	1;
     0014 2101                      1- 1046     	MOVIA	0x01
                                    1- 1047     	MGOTO	_00244_DS_
     0015 3rrr                      3-   63 m1      LGOTO rom_address
     0016                           1- 1048     _00240_DS_:
                                    1- 1049     	.line	293, "main.c"; 	keyCount2 = 0;
                                    1- 1050     	BANKSEL	_keyCount2
     0016 rrrr                      3-  110 m1      .banksel ram_address
     0017 02rr                      1- 1051     	CLRR	_keyCount2
     0018                           1- 1052     _00243_DS_:
                                    1- 1053     	.line	295, "main.c"; 	return 0;
     0018 2100                      1- 1054     	MOVIA	0x00
     0019                           1- 1055     _00244_DS_:
                                    1- 1056     	.line	296, "main.c"; 	}
                                    1- 1057     	RETURN	
     0019 0010                      3-   40 m1      ret
                                    1- 1058     ; exit point of _keyRead2
                                    1- 1060     ;***
                                    1- 1061     ;  pBlock Stats: dbName = C
                                    1- 1062     ;***
                                    1- 1063     ;has an exit
                                    1- 1064     ;1 compiler assigned register :
                                    1- 1065     ;   r0x1027
                                    1- 1066     ;; Starting pCode block
                                    1- 1067     .segment "code"; module=main, function=_keyRead
                                    1- 1069     ;local variable name mapping:
     0000                           1- 1071     _keyRead:
                                    1- 1072     ; 2 exit points
                                    1- 1073     	.line	250, "main.c"; 	char keyRead(char keyStatus)	
                                    1- 1074     	BANKSEL	r0x1027
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1- 1075     	MOVAR	r0x1027
                                    1- 1076     	.line	252, "main.c"; 	if(keyStatus)
     0002 01rr                      1- 1077     	MOVR	r0x1027,W
     0003 0D03                      1- 1078     	BTRSC	STATUS,2
                                    1- 1079     	MGOTO	_00230_DS_
     0004 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1080     	.line	254, "main.c"; 	keyCount++;
                                    1- 1081     	BANKSEL	_keyCount
     0005 rrrr                      3-  110 m1      .banksel ram_address
     0006 05rr                      1- 1082     	INCR	_keyCount,F
                                    1- 1083     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1- 1084     	.line	256, "main.c"; 	if(keyCount >= 200)
     0007 21C8                      1- 1085     	MOVIA	0xc8
     0008 04rr                      1- 1086     	SUBAR	_keyCount,W
     0009 0803                      1- 1087     	BTRSS	STATUS,0
                                    1- 1088     	MGOTO	_00231_DS_
     000A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1089     	.line	258, "main.c"; 	keyCount = 200;
     000B 21C8                      1- 1090     	MOVIA	0xc8
     000C 00rr                      1- 1091     	MOVAR	_keyCount
                                    1- 1092     	MGOTO	_00231_DS_
     000D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1093     ;;unsigned compare: left < lit (0x4=4), size=1
     000E                           1- 1094     _00230_DS_:
                                    1- 1095     	.line	263, "main.c"; 	if(keyCount >= 4)
     000E 2104                      1- 1096     	MOVIA	0x04
                                    1- 1097     	BANKSEL	_keyCount
     000F rrrr                      3-  110 m1      .banksel ram_address
     0010 04rr                      1- 1098     	SUBAR	_keyCount,W
     0011 0803                      1- 1099     	BTRSS	STATUS,0
                                    1- 1100     	MGOTO	_00228_DS_
     0012 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1101     	.line	265, "main.c"; 	keyCount = 0;
     0013 02rr                      1- 1102     	CLRR	_keyCount
                                    1- 1103     	.line	266, "main.c"; 	return	1;
     0014 2101                      1- 1104     	MOVIA	0x01
                                    1- 1105     	MGOTO	_00232_DS_
     0015 3rrr                      3-   63 m1      LGOTO rom_address
     0016                           1- 1106     _00228_DS_:
                                    1- 1107     	.line	268, "main.c"; 	keyCount = 0;
                                    1- 1108     	BANKSEL	_keyCount
     0016 rrrr                      3-  110 m1      .banksel ram_address
     0017 02rr                      1- 1109     	CLRR	_keyCount
     0018                           1- 1110     _00231_DS_:
                                    1- 1111     	.line	270, "main.c"; 	return 0;
     0018 2100                      1- 1112     	MOVIA	0x00
     0019                           1- 1113     _00232_DS_:
                                    1- 1114     	.line	271, "main.c"; 	}
                                    1- 1115     	RETURN	
     0019 0010                      3-   40 m1      ret
                                    1- 1116     ; exit point of _keyRead
                                    1- 1118     ;***
                                    1- 1119     ;  pBlock Stats: dbName = C
                                    1- 1120     ;***
                                    1- 1121     ;has an exit
                                    1- 1122     ;; Starting pCode block
                                    1- 1123     .segment "code"; module=main, function=_pwmInit
     0000                           1- 1125     _pwmInit:
                                    1- 1126     ; 2 exit points
                                    1- 1127     	.line	239, "main.c"; 	TM3RH   = 0x00;
     0000 02rr                      1- 1128     	CLRR	_TM3RH
                                    1- 1129     	.line	240, "main.c"; 	TMR3	 = 100;						// Move FFH to TMR3 LB register  ( TMR3[9:0]=3FFH )
     0001 2164                      1- 1130     	MOVIA	0x64
     0002 00rr                      1- 1131     	SFUN	_TMR3
                                    1- 1132     	.line	241, "main.c"; 	PWM3DUTY = 80;			// Move 00H to PWM3DUTY LB register ( PWM3DUTY[9:0]=300H )
     0003 2150                      1- 1133     	MOVIA	0x50
     0004 00rr                      1- 1134     	SFUN	_PWM3DUTY
                                    1- 1135     	.line	242, "main.c"; 	T3CR2	 = C_PS3_Dis | C_TMR3_ClkSrc_Inst;	// Prescaler 1:1 , Timer3 clock source is instruction clock  
     0005 2108                      1- 1136     	MOVIA	0x08
     0006 00rr                      1- 1137     	SFUN	_T3CR2
                                    1- 1138     	.line	243, "main.c"; 	T3CR1	 = C_PWM3_En | C_PWM3_Active_Hi | C_TMR3_Reload | C_TMR3_En;	// Enable PWM3 , Active_High , Non-Stop mode ,reloaded from TMR3[9:0] , enable Timer3 
     0007 2183                      1- 1139     	MOVIA	0x83
     0008 00rr                      1- 1140     	SFUN	_T3CR1
                                    1- 1141     	.line	244, "main.c"; 	}
                                    1- 1142     	RETURN	
     0009 0010                      3-   40 m1      ret
                                    1- 1143     ; exit point of _pwmInit
                                    1- 1145     ;***
                                    1- 1146     ;  pBlock Stats: dbName = C
                                    1- 1147     ;***
                                    1- 1148     ;has an exit
                                    1- 1149     ;; Starting pCode block
                                    1- 1150     .segment "code"; module=main, function=_ledoff
     0000                           1- 1152     _ledoff:
                                    1- 1153     ; 2 exit points
                                    1- 1154     	.line	227, "main.c"; 	PORTA &= 0x28;
     0000 2128                      1- 1155     	MOVIA	0x28
     0001 10rr                      1- 1156     	ANDAR	_PORTA,F
                                    1- 1157     	.line	228, "main.c"; 	PORTB &= 0xFD;
     0002 1Crr                      1- 1158     	BCR	_PORTB,1
                                    1- 1159     	.line	229, "main.c"; 	}
                                    1- 1160     	RETURN	
     0003 0010                      3-   40 m1      ret
                                    1- 1161     ; exit point of _ledoff
                                    1- 1163     ;***
                                    1- 1164     ;  pBlock Stats: dbName = C
                                    1- 1165     ;***
                                    1- 1166     ;has an exit
                                    1- 1167     ;; Starting pCode block
                                    1- 1168     .segment "code"; module=main, function=_fjLed2
     0000                           1- 1170     _fjLed2:
                                    1- 1171     ; 2 exit points
                                    1- 1172     	.line	220, "main.c"; 	PORTA |= 0x80;
     0000 1Brr                      1- 1173     	BSR	_PORTA,7
                                    1- 1174     	.line	221, "main.c"; 	PORTB |= 0x02;
     0001 18rr                      1- 1175     	BSR	_PORTB,1
                                    1- 1176     	.line	222, "main.c"; 	}
                                    1- 1177     	RETURN	
     0002 0010                      3-   40 m1      ret
                                    1- 1178     ; exit point of _fjLed2
                                    1- 1180     ;***
                                    1- 1181     ;  pBlock Stats: dbName = C
                                    1- 1182     ;***
                                    1- 1183     ;has an exit
                                    1- 1184     ;; Starting pCode block
                                    1- 1185     .segment "code"; module=main, function=_fjLed1
     0000                           1- 1187     _fjLed1:
                                    1- 1188     ; 2 exit points
                                    1- 1189     	.line	214, "main.c"; 	PORTA |= 0x80;
     0000 1Brr                      1- 1190     	BSR	_PORTA,7
                                    1- 1191     	.line	215, "main.c"; 	}
                                    1- 1192     	RETURN	
     0001 0010                      3-   40 m1      ret
                                    1- 1193     ; exit point of _fjLed1
                                    1- 1195     ;***
                                    1- 1196     ;  pBlock Stats: dbName = C
                                    1- 1197     ;***
                                    1- 1198     ;has an exit
                                    1- 1199     ;; Starting pCode block
                                    1- 1200     .segment "code"; module=main, function=_jrLed2
     0000                           1- 1202     _jrLed2:
                                    1- 1203     ; 2 exit points
                                    1- 1204     	.line	207, "main.c"; 	PORTA |= 0x50;
     0000 2150                      1- 1205     	MOVIA	0x50
     0001 11rr                      1- 1206     	IORAR	_PORTA,F
                                    1- 1207     	.line	208, "main.c"; 	}
                                    1- 1208     	RETURN	
     0002 0010                      3-   40 m1      ret
                                    1- 1209     ; exit point of _jrLed2
                                    1- 1211     ;***
                                    1- 1212     ;  pBlock Stats: dbName = C
                                    1- 1213     ;***
                                    1- 1214     ;has an exit
                                    1- 1215     ;; Starting pCode block
                                    1- 1216     .segment "code"; module=main, function=_jrLed1
     0000                           1- 1218     _jrLed1:
                                    1- 1219     ; 2 exit points
                                    1- 1220     	.line	201, "main.c"; 	PORTA |= 0x10;
     0000 1Arr                      1- 1221     	BSR	_PORTA,4
                                    1- 1222     	.line	202, "main.c"; 	}
                                    1- 1223     	RETURN	
     0001 0010                      3-   40 m1      ret
                                    1- 1224     ; exit point of _jrLed1
                                    1- 1226     ;***
                                    1- 1227     ;  pBlock Stats: dbName = C
                                    1- 1228     ;***
                                    1- 1229     ;has an exit
                                    1- 1230     ;; Starting pCode block
                                    1- 1231     .segment "code"; module=main, function=_closeFJ
     0000                           1- 1233     _closeFJ:
                                    1- 1234     ; 2 exit points
                                    1- 1235     	.line	193, "main.c"; 	pwmFlag = 0;
                                    1- 1236     	BANKSEL	_pwmFlag
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 02rr                      1- 1237     	CLRR	_pwmFlag
                                    1- 1238     	.line	194, "main.c"; 	PORTB &= 0xFB;
     0002 1Drr                      1- 1239     	BCR	_PORTB,2
                                    1- 1240     	.line	195, "main.c"; 	T3CR1 = C_TMR3_Dis;
     0003 0200                      1- 1241     	CLRA	
     0004 00rr                      1- 1242     	SFUN	_T3CR1
                                    1- 1243     	.line	196, "main.c"; 	}
                                    1- 1244     	RETURN	
     0005 0010                      3-   40 m1      ret
                                    1- 1245     ; exit point of _closeFJ
                                    1- 1247     ;***
                                    1- 1248     ;  pBlock Stats: dbName = C
                                    1- 1249     ;***
                                    1- 1250     ;has an exit
                                    1- 1251     ;functions called:
                                    1- 1252     ;   _checkTempAD
                                    1- 1253     ;   _closeFJ
                                    1- 1254     ;   _fjLed1
                                    1- 1255     ;   _pwmInit
                                    1- 1256     ;   _fjLed2
                                    1- 1257     ;   _pwmInit
                                    1- 1258     ;   _jrLed1
                                    1- 1259     ;   _closeFJ
                                    1- 1260     ;   _jrLed2
                                    1- 1261     ;   _closeFJ
                                    1- 1262     ;   _ledoff
                                    1- 1263     ;   _closeFJ
                                    1- 1264     ;   _checkTempAD
                                    1- 1265     ;   _closeFJ
                                    1- 1266     ;   _fjLed1
                                    1- 1267     ;   _pwmInit
                                    1- 1268     ;   _fjLed2
                                    1- 1269     ;   _pwmInit
                                    1- 1270     ;   _jrLed1
                                    1- 1271     ;   _closeFJ
                                    1- 1272     ;   _jrLed2
                                    1- 1273     ;   _closeFJ
                                    1- 1274     ;   _ledoff
                                    1- 1275     ;   _closeFJ
                                    1- 1276     ;; Starting pCode block
                                    1- 1277     .segment "code"; module=main, function=_workCtr
     0000                           1- 1279     _workCtr:
                                    1- 1280     ; 2 exit points
                                    1- 1281     	.line	118, "main.c"; 	if(jrStep > 0)
                                    1- 1282     	BANKSEL	_jrStep
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 01rr                      1- 1283     	MOVR	_jrStep,W
     0002 0903                      1- 1284     	BTRSS	STATUS,2
                                    1- 1285     	.line	120, "main.c"; 	checkTempAD();
                                    1- 1286     	MCALL	_checkTempAD
     0003 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1287     	.line	122, "main.c"; 	if(waitTime > 0)
                                    1- 1288     	BANKSEL	_waitTime
     0004 rrrr                      3-  110 m1      .banksel ram_address
     0005 01rr                      1- 1289     	MOVR	_waitTime,W
     0006 0D03                      1- 1290     	BTRSC	STATUS,2
                                    1- 1291     	MGOTO	_00126_DS_
     0007 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1292     	.line	124, "main.c"; 	waitTime--;
     0008 06rr                      1- 1293     	DECR	_waitTime,F
                                    1- 1294     	.line	125, "main.c"; 	pwmFlag = 0;
                                    1- 1295     	BANKSEL	_pwmFlag
     0009 rrrr                      3-  110 m1      .banksel ram_address
     000A 02rr                      1- 1296     	CLRR	_pwmFlag
                                    1- 1297     	.line	126, "main.c"; 	closeFJ();
                                    1- 1298     	MCALL	_closeFJ
     000B 2rrr                      3-   66 m1      LCALL rom_address
     000C                           1- 1299     _00126_DS_:
                                    1- 1300     	.line	128, "main.c"; 	if(fjStep == 1)
                                    1- 1301     	BANKSEL	_fjStep
     000C rrrr                      3-  110 m1      .banksel ram_address
     000D 01rr                      1- 1302     	MOVR	_fjStep,W
     000E 2401                      1- 1303     	XORIA	0x01
     000F 0903                      1- 1304     	BTRSS	STATUS,2
                                    1- 1305     	MGOTO	_00149_DS_
     0010 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1306     	.line	130, "main.c"; 	fjLed1();
                                    1- 1307     	MCALL	_fjLed1
     0011 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1308     	.line	131, "main.c"; 	PORTB &= 0xF7;
     0012 1Drr                      1- 1309     	BCR	_PORTB,3
                                    1- 1310     	.line	132, "main.c"; 	PWM3DUTY = 80;
     0013 2150                      1- 1311     	MOVIA	0x50
     0014 00rr                      1- 1312     	SFUN	_PWM3DUTY
                                    1- 1313     	.line	133, "main.c"; 	PORTB |= 0x04;
     0015 19rr                      1- 1314     	BSR	_PORTB,2
                                    1- 1315     	.line	134, "main.c"; 	if(pwmFlag == 0)
                                    1- 1316     	BANKSEL	_pwmFlag
     0016 rrrr                      3-  110 m1      .banksel ram_address
     0017 01rr                      1- 1317     	MOVR	_pwmFlag,W
     0018 0903                      1- 1318     	BTRSS	STATUS,2
                                    1- 1319     	MGOTO	_00151_DS_
     0019 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1320     	.line	136, "main.c"; 	pwmFlag = 1;
     001A 2101                      1- 1321     	MOVIA	0x01
     001B 00rr                      1- 1322     	MOVAR	_pwmFlag
                                    1- 1323     	.line	137, "main.c"; 	pwmInit();
                                    1- 1324     	MCALL	_pwmInit
     001C 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1325     	MGOTO	_00151_DS_
     001D 3rrr                      3-   63 m1      LGOTO rom_address
     001E                           1- 1326     _00149_DS_:
                                    1- 1327     	.line	140, "main.c"; 	else if(fjStep == 2)
                                    1- 1328     	BANKSEL	_fjStep
     001E rrrr                      3-  110 m1      .banksel ram_address
     001F 01rr                      1- 1329     	MOVR	_fjStep,W
     0020 2402                      1- 1330     	XORIA	0x02
     0021 0903                      1- 1331     	BTRSS	STATUS,2
                                    1- 1332     	MGOTO	_00146_DS_
     0022 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1333     	.line	142, "main.c"; 	fjLed2();
                                    1- 1334     	MCALL	_fjLed2
     0023 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1335     	.line	143, "main.c"; 	PORTB &= 0xF7;
     0024 1Drr                      1- 1336     	BCR	_PORTB,3
                                    1- 1337     	.line	144, "main.c"; 	PWM3DUTY = 20;
     0025 2114                      1- 1338     	MOVIA	0x14
     0026 00rr                      1- 1339     	SFUN	_PWM3DUTY
                                    1- 1340     	.line	145, "main.c"; 	PORTB |= 0x04;
     0027 19rr                      1- 1341     	BSR	_PORTB,2
                                    1- 1342     	.line	146, "main.c"; 	if(pwmFlag == 0)
                                    1- 1343     	BANKSEL	_pwmFlag
     0028 rrrr                      3-  110 m1      .banksel ram_address
     0029 01rr                      1- 1344     	MOVR	_pwmFlag,W
     002A 0903                      1- 1345     	BTRSS	STATUS,2
                                    1- 1346     	MGOTO	_00151_DS_
     002B 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1347     	.line	148, "main.c"; 	pwmFlag = 1;
     002C 2101                      1- 1348     	MOVIA	0x01
     002D 00rr                      1- 1349     	MOVAR	_pwmFlag
                                    1- 1350     	.line	149, "main.c"; 	pwmInit();
                                    1- 1351     	MCALL	_pwmInit
     002E 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1352     	MGOTO	_00151_DS_
     002F 3rrr                      3-   63 m1      LGOTO rom_address
     0030                           1- 1353     _00146_DS_:
                                    1- 1354     	.line	152, "main.c"; 	else if(jrStep == 1)
                                    1- 1355     	BANKSEL	_jrStep
     0030 rrrr                      3-  110 m1      .banksel ram_address
     0031 01rr                      1- 1356     	MOVR	_jrStep,W
     0032 2401                      1- 1357     	XORIA	0x01
     0033 0903                      1- 1358     	BTRSS	STATUS,2
                                    1- 1359     	MGOTO	_00143_DS_
     0034 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1360     	.line	154, "main.c"; 	jrLed1();
                                    1- 1361     	MCALL	_jrLed1
     0035 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1362     	.line	155, "main.c"; 	closeFJ();
                                    1- 1363     	MCALL	_closeFJ
     0036 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1364     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1365     ;;unsigned compare: left >= lit (0x96C=2412), size=2
                                    1- 1366     	.line	157, "main.c"; 	if(R_AIN2_DATA > 2411)
     0037 2109                      1- 1367     	MOVIA	0x09
                                    1- 1368     	BANKSEL	_R_AIN2_DATA
     0038 rrrr                      3-  110 m1      .banksel ram_address
     0039 04rr                      1- 1369     	SUBAR	(_R_AIN2_DATA + 1),W
     003A 0903                      1- 1370     	BTRSS	STATUS,2
                                    1- 1371     	MGOTO	_00189_DS_
     003B 3rrr                      3-   63 m1      LGOTO rom_address
     003C 216C                      1- 1372     	MOVIA	0x6c
     003D 04rr                      1- 1373     	SUBAR	_R_AIN2_DATA,W
     003E                           1- 1374     _00189_DS_:
     003E 0803                      1- 1375     	BTRSS	STATUS,0
                                    1- 1376     	MGOTO	_00132_DS_
     003F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1377     	.line	159, "main.c"; 	PORTB |= 0x08;
     0040 19rr                      1- 1378     	BSR	_PORTB,3
                                    1- 1379     ;;unsigned compare: left < lit (0x901=2305), size=2
     0041                           1- 1380     _00132_DS_:
                                    1- 1381     	.line	162, "main.c"; 	if(R_AIN2_DATA < 2305)
     0041 2109                      1- 1382     	MOVIA	0x09
                                    1- 1383     	BANKSEL	_R_AIN2_DATA
     0042 rrrr                      3-  110 m1      .banksel ram_address
     0043 04rr                      1- 1384     	SUBAR	(_R_AIN2_DATA + 1),W
     0044 0903                      1- 1385     	BTRSS	STATUS,2
                                    1- 1386     	MGOTO	_00190_DS_
     0045 3rrr                      3-   63 m1      LGOTO rom_address
     0046 2101                      1- 1387     	MOVIA	0x01
     0047 04rr                      1- 1388     	SUBAR	_R_AIN2_DATA,W
     0048                           1- 1389     _00190_DS_:
     0048 0C03                      1- 1390     	BTRSC	STATUS,0
                                    1- 1391     	MGOTO	_00151_DS_
     0049 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1392     	.line	164, "main.c"; 	PORTB &= 0xF7;
     004A 1Drr                      1- 1393     	BCR	_PORTB,3
                                    1- 1394     	MGOTO	_00151_DS_
     004B 3rrr                      3-   63 m1      LGOTO rom_address
     004C                           1- 1395     _00143_DS_:
                                    1- 1396     	.line	167, "main.c"; 	else if(jrStep == 2)
                                    1- 1397     	BANKSEL	_jrStep
     004C rrrr                      3-  110 m1      .banksel ram_address
     004D 01rr                      1- 1398     	MOVR	_jrStep,W
     004E 2402                      1- 1399     	XORIA	0x02
     004F 0903                      1- 1400     	BTRSS	STATUS,2
                                    1- 1401     	MGOTO	_00140_DS_
     0050 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1402     	.line	169, "main.c"; 	jrLed2();
                                    1- 1403     	MCALL	_jrLed2
     0051 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1404     	.line	170, "main.c"; 	closeFJ();
                                    1- 1405     	MCALL	_closeFJ
     0052 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1406     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1407     ;;unsigned compare: left >= lit (0x8E4=2276), size=2
                                    1- 1408     	.line	172, "main.c"; 	if(R_AIN2_DATA > 2275)
     0053 2108                      1- 1409     	MOVIA	0x08
                                    1- 1410     	BANKSEL	_R_AIN2_DATA
     0054 rrrr                      3-  110 m1      .banksel ram_address
     0055 04rr                      1- 1411     	SUBAR	(_R_AIN2_DATA + 1),W
     0056 0903                      1- 1412     	BTRSS	STATUS,2
                                    1- 1413     	MGOTO	_00191_DS_
     0057 3rrr                      3-   63 m1      LGOTO rom_address
     0058 21E4                      1- 1414     	MOVIA	0xe4
     0059 04rr                      1- 1415     	SUBAR	_R_AIN2_DATA,W
     005A                           1- 1416     _00191_DS_:
     005A 0803                      1- 1417     	BTRSS	STATUS,0
                                    1- 1418     	MGOTO	_00136_DS_
     005B 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1419     	.line	174, "main.c"; 	PORTB |= 0x08;
     005C 19rr                      1- 1420     	BSR	_PORTB,3
                                    1- 1421     ;;unsigned compare: left < lit (0x8D4=2260), size=2
     005D                           1- 1422     _00136_DS_:
                                    1- 1423     	.line	177, "main.c"; 	if(R_AIN2_DATA < 2260)
     005D 2108                      1- 1424     	MOVIA	0x08
                                    1- 1425     	BANKSEL	_R_AIN2_DATA
     005E rrrr                      3-  110 m1      .banksel ram_address
     005F 04rr                      1- 1426     	SUBAR	(_R_AIN2_DATA + 1),W
     0060 0903                      1- 1427     	BTRSS	STATUS,2
                                    1- 1428     	MGOTO	_00192_DS_
     0061 3rrr                      3-   63 m1      LGOTO rom_address
     0062 21D4                      1- 1429     	MOVIA	0xd4
     0063 04rr                      1- 1430     	SUBAR	_R_AIN2_DATA,W
     0064                           1- 1431     _00192_DS_:
     0064 0C03                      1- 1432     	BTRSC	STATUS,0
                                    1- 1433     	MGOTO	_00151_DS_
     0065 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1434     	.line	179, "main.c"; 	PORTB &= 0xF7;
     0066 1Drr                      1- 1435     	BCR	_PORTB,3
                                    1- 1436     	MGOTO	_00151_DS_
     0067 3rrr                      3-   63 m1      LGOTO rom_address
     0068                           1- 1437     _00140_DS_:
                                    1- 1438     	.line	184, "main.c"; 	ledoff();
                                    1- 1439     	MCALL	_ledoff
     0068 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1440     	.line	185, "main.c"; 	closeFJ();
                                    1- 1441     	MCALL	_closeFJ
     0069 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1442     	.line	186, "main.c"; 	PORTB &= 0xF7;
     006A 1Drr                      1- 1443     	BCR	_PORTB,3
     006B                           1- 1444     _00151_DS_:
                                    1- 1445     	.line	188, "main.c"; 	}
                                    1- 1446     	RETURN	
     006B 0010                      3-   40 m1      ret
                                    1- 1447     ; exit point of _workCtr
                                    1- 1450     ;	code size estimation:
                                    1- 1451     ;	  457+   98 =   555 instructions ( 1306 byte)
                                    1- 1453     	end

SYMBOL TABLE            TYPE     VALUE
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
C                       Constant 00000000
DC                      Constant 00000001
ENABLE_RAM_BANK         Constant 00000001
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
STATUS                  Constant 00000003
USEFGOTO                Constant 00000000
W                       Constant 00000000
Z                       Constant 00000002


SOURCE FILE TABLE
001 OBJ/main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
