
                    Nyquest Technology Co., Ltd.

NYASM 2.28

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_showNub
                                    1-   15     	extern	_setHightOutput
                                    1-   16     	extern	_setlowOutput
                                    1-   17     	extern	_setOutput
                                    1-   18     	extern	_setInput
                                    1-   19     	extern	_showNubBaiwei
                                    1-   20     	extern	_showNubBaiwei2
                                    1-   21     	extern	_showNubGewei
                                    1-   22     	extern	_showNubGewei2
                                    1-   23     	extern	_showNubShiwei
                                    1-   24     	extern	_showNubShiwei2
                                    1-   25     	extern	_A1
                                    1-   26     	extern	_B1
                                    1-   27     	extern	_C1
                                    1-   28     	extern	_D1
                                    1-   29     	extern	_E1
                                    1-   30     	extern	_F1
                                    1-   31     	extern	_G1
                                    1-   32     	extern	_A2
                                    1-   33     	extern	_B2
                                    1-   34     	extern	_C2
                                    1-   35     	extern	_D2
                                    1-   36     	extern	_E2
                                    1-   37     	extern	_F2
                                    1-   38     	extern	_G2
                                    1-   39     	extern	_A3
                                    1-   40     	extern	_B3
                                    1-   41     	extern	_C3
                                    1-   42     	extern	_D3
                                    1-   43     	extern	_E3
                                    1-   44     	extern	_F3
                                    1-   45     	extern	_G3
                                    1-   46     	extern	_delayms
                                    1-   47     	extern	__divuchar
                                    1-   48     	extern	__moduchar
                                    1-   49     	extern	__moduint
                                    1-   50     	extern	__divuint
                                    1-   51     	extern	_PORTAbits
                                    1-   52     	extern	_PORTBbits
                                    1-   53     	extern	_PCONbits
                                    1-   54     	extern	_BWUCONbits
                                    1-   55     	extern	_ABPLCONbits
                                    1-   56     	extern	_BPHCONbits
                                    1-   57     	extern	_INTEbits
                                    1-   58     	extern	_INTFbits
                                    1-   59     	extern	_ADMDbits
                                    1-   60     	extern	_ADRbits
                                    1-   61     	extern	_ADVREFHbits
                                    1-   62     	extern	_ADCRbits
                                    1-   63     	extern	_AWUCONbits
                                    1-   64     	extern	_PACONbits
                                    1-   65     	extern	_INTEDGbits
                                    1-   66     	extern	_ANAENbits
                                    1-   67     	extern	_RFCbits
                                    1-   68     	extern	_INTE2bits
                                    1-   69     	extern	_INDF
                                    1-   70     	extern	_TMR0
                                    1-   71     	extern	_PCL
                                    1-   72     	extern	_STATUS
                                    1-   73     	extern	_FSR
                                    1-   74     	extern	_PORTA
                                    1-   75     	extern	_PORTB
                                    1-   76     	extern	_PCON
                                    1-   77     	extern	_BWUCON
                                    1-   78     	extern	_PCHBUF
                                    1-   79     	extern	_ABPLCON
                                    1-   80     	extern	_BPHCON
                                    1-   81     	extern	_INTE
                                    1-   82     	extern	_INTF
                                    1-   83     	extern	_ADMD
                                    1-   84     	extern	_ADR
                                    1-   85     	extern	_ADD
                                    1-   86     	extern	_ADVREFH
                                    1-   87     	extern	_ADCR
                                    1-   88     	extern	_AWUCON
                                    1-   89     	extern	_PACON
                                    1-   90     	extern	_INTEDG
                                    1-   91     	extern	_TMRH
                                    1-   92     	extern	_ANAEN
                                    1-   93     	extern	_RFC
                                    1-   94     	extern	_TM3RH
                                    1-   95     	extern	_INTE2
                                    1-   96     	extern	_TMR1
                                    1-   97     	extern	_T1CR1
                                    1-   98     	extern	_T1CR2
                                    1-   99     	extern	_PWM1DUTY
                                    1-  100     	extern	_PS1CV
                                    1-  101     	extern	_BZ1CR
                                    1-  102     	extern	_IRCR
                                    1-  103     	extern	_TBHP
                                    1-  104     	extern	_TBHD
                                    1-  105     	extern	_TMR2
                                    1-  106     	extern	_T2CR1
                                    1-  107     	extern	_T2CR2
                                    1-  108     	extern	_PWM2DUTY
                                    1-  109     	extern	_PS2CV
                                    1-  110     	extern	_BZ2CR
                                    1-  111     	extern	_OSCCR
                                    1-  112     	extern	_TMR3
                                    1-  113     	extern	_T3CR1
                                    1-  114     	extern	_T3CR2
                                    1-  115     	extern	_PWM3DUTY
                                    1-  116     	extern	_PS3CV
                                    1-  117     	extern	_BZ3CR
                                    1-  118     	extern	_IOSTA
                                    1-  119     	extern	_IOSTB
                                    1-  120     	extern	_APHCON
                                    1-  121     	extern	_PS0CV
                                    1-  122     	extern	_BODCON
                                    1-  123     	extern	_CMPCR
                                    1-  124     	extern	_PCON1
                                    1-  125     	extern	_T0MD
                                    1-  126     	extern	___sdcc_saved_fsr
                                    1-  127     	extern	___sdcc_saved_stk00
                                    1-  128     	extern	___sdcc_saved_stk01
                                    1-  129     	extern	__gptrget1
                                    1-  130     	extern	__nyc_ny8_startup
                                    1-  131     ;--------------------------------------------------------
                                    1-  132     ; global declarations
                                    1-  133     ;--------------------------------------------------------
                                    1-  134     	extern	_delay
                                    1-  135     	extern	_F_wait_eoc
                                    1-  136     	extern	_F_Quarter_VDD_Convert
                                    1-  137     	extern	_checkBat
                                    1-  138     	extern	_initAD
                                    1-  139     	extern	_keyCtr
                                    1-  140     	extern	_pwmStop
                                    1-  141     	extern	_pwmInit
                                    1-  142     	extern	_gotoSleep
                                    1-  143     	extern	_initSys
                                    1-  144     	extern	_refreshNub
                                    1-  145     	extern	_checkIRKey
                                    1-  146     	extern	_chrgCtr
                                    1-  147     	extern	_isr
                                    1-  148     	extern	_main
                                    1-  149     	extern	_keyRead
                                    1-  150     	extern	_R_Quarter_VDD_DATA
                                    1-  151     	extern	_R_Quarter_VDD_DATA_LB
                                    1-  152     	extern	_intCount
                                    1-  153     	extern	_IntFlag
                                    1-  154     	extern	_baiweiNum
                                    1-  155     	extern	_shiweiNum
                                    1-  156     	extern	_geweiNum
                                    1-  157     	extern	_showFlag
                                    1-  158     	extern	_irStep
                                    1-  159     	extern	_revCount
                                    1-  160     	extern	_revZeroCount
                                    1-  161     	extern	_checkCount
                                    1-  162     	extern	_pwmTime
                                    1-  163     	extern	_sendFlag
                                    1-  164     	extern	_workTime
                                    1-  165     	extern	_workStep
                                    1-  166     	extern	_pwFlag
                                    1-  167     	extern	_pwShowTime
                                    1-  168     	extern	_stepShowTime
                                    1-  169     	extern	_pwStep
                                    1-  170     	extern	_keyCount
                                    1-  171     	extern	_longPressFlag
                                    1-  172     	extern	_sleepTime
                                    1-  173     	extern	_fullFlag
                                    1-  174     	extern	_shanTime
                                    1-  175     	extern	_count1s
                                    1-  176     	extern	_waitTime
                                    1-  178     	extern PSAVE
                                    1-  179     	extern SSAVE
                                    1-  180     	extern WSAVE
                                    1-  181     	extern STK04
                                    1-  182     	extern STK03
                                    1-  183     	extern STK02
                                    1-  184     	extern STK01
                                    1-  185     	extern STK00
                                    1-  187     .segment "uninit", 0x20000040
 20000040                           1-  188     PSAVE:
                                    1-  189     	.res 1
 20000041                           1-  190     SSAVE:
                                    1-  191     	.res 1
 20000042                           1-  192     WSAVE:
                                    1-  193     	.res 1
 20000043                           1-  194     STK04:
                                    1-  195     	.res 1
 20000044                           1-  196     STK03:
                                    1-  197     	.res 1
 20000045                           1-  198     STK02:
                                    1-  199     	.res 1
 20000046                           1-  200     STK01:
                                    1-  201     	.res 1
 20000047                           1-  202     STK00:
                                    1-  203     	.res 1
                                    1-  205     ;--------------------------------------------------------
                                    1-  206     ; global definitions
                                    1-  207     ;--------------------------------------------------------
                                    1-  208     .segment "uninit"
     0000                           1-  209     _R_Quarter_VDD_DATA:
                                    1-  210     	.res	2
                                    1-  213     .segment "uninit"
     0000                           1-  214     _R_Quarter_VDD_DATA_LB:
                                    1-  215     	.res	1
                                    1-  218     ;--------------------------------------------------------
                                    1-  219     ; absolute symbol definitions
                                    1-  220     ;--------------------------------------------------------
                                    1-  221     ;--------------------------------------------------------
                                    1-  222     ; compiler-defined variables
                                    1-  223     ;--------------------------------------------------------
                                    1-  224     .segment "uninit"
     0000                           1-  225     r0x1047:
                                    1-  226     	.res	1
                                    1-  227     .segment "uninit"
     0000                           1-  228     r0x1048:
                                    1-  229     	.res	1
                                    1-  230     .segment "uninit"
     0000                           1-  231     r0x1046:
                                    1-  232     	.res	1
                                    1-  233     .segment "uninit"
     0000                           1-  234     r0x1045:
                                    1-  235     	.res	1
                                    1-  236     .segment "uninit"
     0000                           1-  237     r0x1043:
                                    1-  238     	.res	1
                                    1-  239     .segment "uninit"
     0000                           1-  240     r0x1044:
                                    1-  241     	.res	1
                                    1-  242     .segment "uninit"
     0000                           1-  243     r0x1040:
                                    1-  244     	.res	1
                                    1-  245     .segment "uninit"
     0000                           1-  246     r0x1041:
                                    1-  247     	.res	1
                                    1-  248     .segment "uninit"
     0000                           1-  249     r0x103F:
                                    1-  250     	.res	1
                                    1-  251     .segment "uninit"
     0000                           1-  252     r0x103D:
                                    1-  253     	.res	1
                                    1-  254     .segment "uninit"
     0000                           1-  255     r0x103E:
                                    1-  256     	.res	1
                                    1-  257     .segment "uninit"
     0000                           1-  258     r0x1039:
                                    1-  259     	.res	1
                                    1-  260     .segment "uninit"
     0000                           1-  261     r0x103A:
                                    1-  262     	.res	1
                                    1-  263     .segment "uninit"
     0000                           1-  264     r0x103B:
                                    1-  265     	.res	1
                                    1-  266     .segment "uninit"
     0000                           1-  267     r0x103C:
                                    1-  268     	.res	1
                                    1-  269     .segment "uninit"
     0000                           1-  270     r0x1033:
                                    1-  271     	.res	1
                                    1-  272     .segment "uninit"
     0000                           1-  273     r0x1034:
                                    1-  274     	.res	1
                                    1-  275     .segment "uninit"
     0000                           1-  276     r0x1035:
                                    1-  277     	.res	1
                                    1-  278     .segment "uninit"
     0000                           1-  279     r0x1038:
                                    1-  280     	.res	1
                                    1-  281     .segment "uninit"
     0000                           1-  282     r0x102F:
                                    1-  283     	.res	1
                                    1-  284     .segment "uninit"
     0000                           1-  285     r0x102E:
                                    1-  286     	.res	1
                                    1-  287     .segment "uninit"
     0000                           1-  288     r0x1030:
                                    1-  289     	.res	1
                                    1-  290     .segment "uninit"
     0000                           1-  291     r0x1031:
                                    1-  292     	.res	1
                                    1-  293     .segment "uninit"
     0000                           1-  294     r0x1032:
                                    1-  295     	.res	1
                                    1-  296     ;--------------------------------------------------------
                                    1-  297     ; initialized data
                                    1-  298     ;--------------------------------------------------------
                                    1-  300     .segment "idata"
     0000                           1-  301     _intCount:
     0000 0000                      1-  302     	dw	0x00
                                    1-  306     .segment "idata"
     0000                           1-  307     _IntFlag:
     0000 0000                      1-  308     	dw	0x00
                                    1-  312     .segment "idata"
     0000                           1-  313     _baiweiNum:
     0000 0000                      1-  314     	dw	0x00
                                    1-  318     .segment "idata"
     0000                           1-  319     _shiweiNum:
     0000 0000                      1-  320     	dw	0x00
                                    1-  324     .segment "idata"
     0000                           1-  325     _geweiNum:
     0000 0000                      1-  326     	dw	0x00
                                    1-  330     .segment "idata"
     0000                           1-  331     _showFlag:
     0000 0000                      1-  332     	dw	0x00
                                    1-  336     .segment "idata"
     0000                           1-  337     _irStep:
     0000 0000                      1-  338     	dw	0x00
                                    1-  342     .segment "idata"
     0000                           1-  343     _revCount:
     0000 0000                      1-  344     	dw	0x00
                                    1-  348     .segment "idata"
     0000                           1-  349     _revZeroCount:
     0000 0000                      1-  350     	dw	0x00
                                    1-  354     .segment "idata"
     0000                           1-  355     _checkCount:
     0000 0000                      1-  356     	dw	0x00
                                    1-  360     .segment "idata"
     0000                           1-  361     _pwmTime:
     0000 0000                      1-  362     	dw	0x00
                                    1-  366     .segment "idata"
     0000                           1-  367     _sendFlag:
     0000 0000                      1-  368     	dw	0x00
                                    1-  372     .segment "idata"
     0000                           1-  373     _workTime:
     0000 0000                      1-  374     	dw	0x00
                                    1-  378     .segment "idata"
     0000                           1-  379     _workStep:
     0000 0000                      1-  380     	dw	0x00
                                    1-  384     .segment "idata"
     0000                           1-  385     _pwFlag:
     0000 0000                      1-  386     	dw	0x00
                                    1-  390     .segment "idata"
     0000                           1-  391     _pwShowTime:
     0000 0000                      1-  392     	dw	0x00
                                    1-  396     .segment "idata"
     0000                           1-  397     _stepShowTime:
     0000 0000                      1-  398     	dw	0x00
                                    1-  402     .segment "idata"
     0000                           1-  403     _pwStep:
     0000 0000                      1-  404     	dw	0x00
                                    1-  408     .segment "idata"
     0000                           1-  409     _keyCount:
     0000 0000                      1-  410     	dw	0x00
                                    1-  414     .segment "idata"
     0000                           1-  415     _longPressFlag:
     0000 0000                      1-  416     	dw	0x00
                                    1-  420     .segment "idata"
     0000                           1-  421     _sleepTime:
     0000 0000                      1-  422     	dw	0x00
                                    1-  426     .segment "idata"
     0000                           1-  427     _fullFlag:
     0000 0000                      1-  428     	dw	0x00
                                    1-  432     .segment "idata"
     0000                           1-  433     _shanTime:
     0000 0000 0000                 1-  434     	dw	0x00, 0x00
                                    1-  438     .segment "idata"
     0000                           1-  439     _count1s:
     0000 0000                      1-  440     	dw	0x00
                                    1-  444     .segment "idata"
     0000                           1-  445     _waitTime:
     0000 0000 0000                 1-  446     	dw	0x00, 0x00
                                    1-  450     .segment "idata"
     0000                           1-  451     _numArray:
     0000 003F                      1-  452     	dw	0x3f
     0001 0006                      1-  453     	dw	0x06
     0002 005B                      1-  454     	dw	0x5b
     0003 004F                      1-  455     	dw	0x4f
     0004 0066                      1-  456     	dw	0x66
     0005 006D                      1-  457     	dw	0x6d
     0006 007D                      1-  458     	dw	0x7d
     0007 0007                      1-  459     	dw	0x07
     0008 007F                      1-  460     	dw	0x7f
     0009 006F                      1-  461     	dw	0x6f
     000A 0071                      1-  462     	dw	0x71
     000B 0079                      1-  463     	dw	0x79
     000C 0050                      1-  464     	dw	0x50
                                    1-  467     ;--------------------------------------------------------
                                    1-  468     ; overlayable items in internal ram 
                                    1-  469     ;--------------------------------------------------------
                                    1-  470     ;	udata_ovr
                                    1-  471     ;--------------------------------------------------------
                                    1-  472     ; reset vector 
                                    1-  473     ;--------------------------------------------------------
                                    1-  474     ORG	0x0000
     0000 3rrr                      1-  475     	LGOTO	__nyc_ny8_startup
                                    1-  476     ;--------------------------------------------------------
                                    1-  477     ; interrupt and initialization code
                                    1-  478     ;--------------------------------------------------------
                                    1-  479     ORG 0x0008
                                    1-  480     	MGOTO	__sdcc_interrupt
     0008 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  482     .segment "code"
     0000                           1-  483     __sdcc_interrupt:
                                    1-  484     ;***
                                    1-  485     ;  pBlock Stats: dbName = I
                                    1-  486     ;***
                                    1-  487     ;2 compiler assigned registers:
                                    1-  488     ;   STK00
                                    1-  489     ;   STK01
                                    1-  490     ;; Starting pCode block
     0000                           1-  491     _isr:
                                    1-  492     ; 0 exit points
                                    1-  493     	.line	68, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  494     	MOVAR	WSAVE
     0001 1503                      1-  495     	SWAPR	STATUS,W
     0002 0283                      1-  496     	CLRR	STATUS
     0003 00rr                      1-  497     	MOVAR	SSAVE
     0004 010A                      1-  498     	MOVR	PCHBUF,W
     0005 028A                      1-  499     	CLRR	PCHBUF
     0006 00rr                      1-  500     	MOVAR	PSAVE
     0007 0104                      1-  501     	MOVR	FSR,W
                                    1-  502     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-  110 m1      .banksel ram_address
     0009 00rr                      1-  503     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  504     	MOVR	STK00,W
                                    1-  505     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-  110 m1      .banksel ram_address
     000C 00rr                      1-  506     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  507     	MOVR	STK01,W
                                    1-  508     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-  110 m1      .banksel ram_address
     000F 00rr                      1-  509     	MOVAR	___sdcc_saved_stk01
                                    1-  510     	.line	70, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  511     	BTRSS	_INTFbits,0
                                    1-  512     	MGOTO	_00121_DS_
     0011 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  513     	.line	72, "main.c"; 	TMR0 += 55;
     0012 2137                      1-  514     	MOVIA	0x37
     0013 03rr                      1-  515     	ADDAR	_TMR0,F
                                    1-  516     	.line	74, "main.c"; 	if(++intCount >= 100)
                                    1-  517     	BANKSEL	_intCount
     0014 rrrr                      3-  110 m1      .banksel ram_address
     0015 05rr                      1-  518     	INCR	_intCount,F
                                    1-  519     ;;unsigned compare: left < lit (0x64=100), size=1
     0016 2164                      1-  520     	MOVIA	0x64
     0017 04rr                      1-  521     	SUBAR	_intCount,W
     0018 0803                      1-  522     	BTRSS	STATUS,0
                                    1-  523     	MGOTO	_00113_DS_
     0019 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  524     	.line	76, "main.c"; 	IntFlag = 1;
     001A 2101                      1-  525     	MOVIA	0x01
                                    1-  526     	BANKSEL	_IntFlag
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 00rr                      1-  527     	MOVAR	_IntFlag
                                    1-  528     	.line	77, "main.c"; 	intCount = 0;	
                                    1-  529     	BANKSEL	_intCount
     001D rrrr                      3-  110 m1      .banksel ram_address
     001E 02rr                      1-  530     	CLRR	_intCount
                                    1-  531     	.line	78, "main.c"; 	if(++count1s > 100)
                                    1-  532     	BANKSEL	_count1s
     001F rrrr                      3-  110 m1      .banksel ram_address
     0020 05rr                      1-  533     	INCR	_count1s,F
                                    1-  534     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  535     ;;unsigned compare: left >= lit (0x65=101), size=1
     0021 2165                      1-  536     	MOVIA	0x65
     0022 04rr                      1-  537     	SUBAR	_count1s,W
     0023 0803                      1-  538     	BTRSS	STATUS,0
                                    1-  539     	MGOTO	_00113_DS_
     0024 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  540     	.line	80, "main.c"; 	count1s = 0;
     0025 02rr                      1-  541     	CLRR	_count1s
                                    1-  542     	.line	81, "main.c"; 	if(pwShowTime > 0)
                                    1-  543     	BANKSEL	_pwShowTime
     0026 rrrr                      3-  110 m1      .banksel ram_address
     0027 01rr                      1-  544     	MOVR	_pwShowTime,W
     0028 0D03                      1-  545     	BTRSC	STATUS,2
                                    1-  546     	MGOTO	_00108_DS_
     0029 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  547     	.line	82, "main.c"; 	pwShowTime--;
     002A 06rr                      1-  548     	DECR	_pwShowTime,F
                                    1-  549     	MGOTO	_00113_DS_
     002B 3rrr                      3-   63 m1      LGOTO rom_address
     002C                           1-  550     _00108_DS_:
                                    1-  551     	.line	83, "main.c"; 	else if(stepShowTime > 0)
                                    1-  552     	BANKSEL	_stepShowTime
     002C rrrr                      3-  110 m1      .banksel ram_address
     002D 01rr                      1-  553     	MOVR	_stepShowTime,W
     002E 0903                      1-  554     	BTRSS	STATUS,2
                                    1-  555     	.line	85, "main.c"; 	stepShowTime--;
     002F 06rr                      1-  556     	DECR	_stepShowTime,F
     0030                           1-  557     _00113_DS_:
                                    1-  558     	.line	90, "main.c"; 	if(pwmTime < 12 && sendFlag)
     0030 210C                      1-  559     	MOVIA	0x0c
                                    1-  560     	BANKSEL	_pwmTime
     0031 rrrr                      3-  110 m1      .banksel ram_address
     0032 04rr                      1-  561     	SUBAR	_pwmTime,W
     0033 0C03                      1-  562     	BTRSC	STATUS,0
                                    1-  563     	MGOTO	_00115_DS_
     0034 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  564     	BANKSEL	_sendFlag
     0035 rrrr                      3-  110 m1      .banksel ram_address
     0036 01rr                      1-  565     	MOVR	_sendFlag,W
     0037 0D03                      1-  566     	BTRSC	STATUS,2
                                    1-  567     	MGOTO	_00115_DS_
     0038 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  568     	.line	91, "main.c"; 	PORTB |= 0x02;
     0039 18rr                      1-  569     	BSR	_PORTB,1
                                    1-  570     	MGOTO	_00116_DS_
     003A 3rrr                      3-   63 m1      LGOTO rom_address
     003B                           1-  571     _00115_DS_:
                                    1-  572     	.line	93, "main.c"; 	PORTB &= 0xFD;
     003B 1Crr                      1-  573     	BCR	_PORTB,1
     003C                           1-  574     _00116_DS_:
                                    1-  575     	.line	94, "main.c"; 	if(++pwmTime >= 44)
                                    1-  576     	BANKSEL	_pwmTime
     003C rrrr                      3-  110 m1      .banksel ram_address
     003D 05rr                      1-  577     	INCR	_pwmTime,F
                                    1-  578     ;;unsigned compare: left < lit (0x2C=44), size=1
     003E 212C                      1-  579     	MOVIA	0x2c
     003F 04rr                      1-  580     	SUBAR	_pwmTime,W
     0040 0C03                      1-  581     	BTRSC	STATUS,0
                                    1-  582     	.line	96, "main.c"; 	pwmTime = 0;
     0041 02rr                      1-  583     	CLRR	_pwmTime
     0042                           1-  584     _00121_DS_:
                                    1-  585     	.line	102, "main.c"; 	if(INTFbits.PABIF)
     0042 08rr                      1-  586     	BTRSS	_INTFbits,1
                                    1-  587     	MGOTO	_00123_DS_
     0043 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  588     	.line	104, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)
     0044 21FD                      1-  589     	MOVIA	0xfd
     0045 00rr                      1-  590     	MOVAR	_INTF
     0046                           1-  591     _00123_DS_:
                                    1-  592     	.line	107, "main.c"; 	INTF = 0;
     0046 02rr                      1-  593     	CLRR	_INTF
                                    1-  594     	.line	109, "main.c"; 	}
                                    1-  595     	BANKSEL	___sdcc_saved_stk01
     0047 rrrr                      3-  110 m1      .banksel ram_address
     0048 01rr                      1-  596     	MOVR	___sdcc_saved_stk01,W
     0049 00rr                      1-  597     	MOVAR	STK01
                                    1-  598     	BANKSEL	___sdcc_saved_stk00
     004A rrrr                      3-  110 m1      .banksel ram_address
     004B 01rr                      1-  599     	MOVR	___sdcc_saved_stk00,W
     004C 00rr                      1-  600     	MOVAR	STK00
                                    1-  601     	BANKSEL	___sdcc_saved_fsr
     004D rrrr                      3-  110 m1      .banksel ram_address
     004E 01rr                      1-  602     	MOVR	___sdcc_saved_fsr,W
     004F 0084                      1-  603     	MOVAR	FSR
     0050 01rr                      1-  604     	MOVR	PSAVE,W
     0051 008A                      1-  605     	MOVAR	PCHBUF
     0052 0283                      1-  606     	CLRR	STATUS
     0053 15rr                      1-  607     	SWAPR	SSAVE,W
     0054 0083                      1-  608     	MOVAR	STATUS
     0055 15rr                      1-  609     	SWAPR	WSAVE,F
     0056 15rr                      1-  610     	SWAPR	WSAVE,W
     0057                           1-  611     END_OF_INTERRUPT:
     0057 0011                      1-  612     	RETIE	
                                    1-  614     ;--------------------------------------------------------
                                    1-  615     ; code
                                    1-  616     ;--------------------------------------------------------
                                    1-  617     ;***
                                    1-  618     ;  pBlock Stats: dbName = M
                                    1-  619     ;***
                                    1-  620     ;has an exit
                                    1-  621     ;functions called:
                                    1-  622     ;   _initSys
                                    1-  623     ;   _initAD
                                    1-  624     ;   _gotoSleep
                                    1-  625     ;   _refreshNub
                                    1-  626     ;   _setInput
                                    1-  627     ;   _checkBat
                                    1-  628     ;   _checkIRKey
                                    1-  629     ;   _keyCtr
                                    1-  630     ;   _chrgCtr
                                    1-  631     ;   _gotoSleep
                                    1-  632     ;   _initSys
                                    1-  633     ;   _initAD
                                    1-  634     ;   _gotoSleep
                                    1-  635     ;   _refreshNub
                                    1-  636     ;   _setInput
                                    1-  637     ;   _checkBat
                                    1-  638     ;   _checkIRKey
                                    1-  639     ;   _keyCtr
                                    1-  640     ;   _chrgCtr
                                    1-  641     ;   _gotoSleep
                                    1-  642     ;2 compiler assigned registers:
                                    1-  643     ;   r0x1047
                                    1-  644     ;   r0x1048
                                    1-  645     ;; Starting pCode block
                                    1-  646     .segment "code"; module=main, function=_main
     0000                           1-  648     _main:
                                    1-  649     ; 2 exit points
                                    1-  650     	.line	113, "main.c"; 	initSys();
                                    1-  651     	MCALL	_initSys
     0000 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  652     	.line	114, "main.c"; 	initAD();
                                    1-  653     	MCALL	_initAD
     0001 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  654     	.line	115, "main.c"; 	gotoSleep();
                                    1-  655     	MCALL	_gotoSleep
     0002 2rrr                      3-   66 m1      LCALL rom_address
     0003                           1-  656     _00142_DS_:
                                    1-  657     	.line	118, "main.c"; 	CLRWDT();							// Clear WatchDog
     0003 0002                      1-  658     	clrwdt
                                    1-  659     	.line	119, "main.c"; 	if(showFlag)
                                    1-  660     	BANKSEL	_showFlag
     0004 rrrr                      3-  110 m1      .banksel ram_address
     0005 01rr                      1-  661     	MOVR	_showFlag,W
     0006 0D03                      1-  662     	BTRSC	STATUS,2
                                    1-  663     	MGOTO	_00129_DS_
     0007 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  664     	.line	120, "main.c"; 	refreshNub();
                                    1-  665     	MCALL	_refreshNub
     0008 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  666     	MGOTO	_00130_DS_
     0009 3rrr                      3-   63 m1      LGOTO rom_address
     000A                           1-  667     _00129_DS_:
                                    1-  668     	.line	123, "main.c"; 	baiweiNum = shiweiNum = geweiNum = 0;
                                    1-  669     	BANKSEL	_geweiNum
     000A rrrr                      3-  110 m1      .banksel ram_address
     000B 02rr                      1-  670     	CLRR	_geweiNum
                                    1-  671     	BANKSEL	_shiweiNum
     000C rrrr                      3-  110 m1      .banksel ram_address
     000D 02rr                      1-  672     	CLRR	_shiweiNum
                                    1-  673     	BANKSEL	_baiweiNum
     000E rrrr                      3-  110 m1      .banksel ram_address
     000F 02rr                      1-  674     	CLRR	_baiweiNum
                                    1-  675     	.line	124, "main.c"; 	setInput();
                                    1-  676     	MCALL	_setInput
     0010 2rrr                      3-   66 m1      LCALL rom_address
     0011                           1-  677     _00130_DS_:
                                    1-  678     	.line	126, "main.c"; 	if(!IntFlag)
                                    1-  679     	BANKSEL	_IntFlag
     0011 rrrr                      3-  110 m1      .banksel ram_address
     0012 01rr                      1-  680     	MOVR	_IntFlag,W
     0013 0D03                      1-  681     	BTRSC	STATUS,2
                                    1-  682     	MGOTO	_00142_DS_
     0014 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  683     	.line	128, "main.c"; 	IntFlag = 0;
     0015 02rr                      1-  684     	CLRR	_IntFlag
                                    1-  685     	.line	129, "main.c"; 	checkBat();
                                    1-  686     	MCALL	_checkBat
     0016 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  687     	.line	130, "main.c"; 	checkIRKey();
                                    1-  688     	MCALL	_checkIRKey
     0017 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  689     	.line	131, "main.c"; 	keyCtr();
                                    1-  690     	MCALL	_keyCtr
     0018 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  691     	.line	132, "main.c"; 	chrgCtr();
                                    1-  692     	MCALL	_chrgCtr
     0019 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  693     	.line	133, "main.c"; 	if(waitTime > 0)
                                    1-  694     	BANKSEL	_waitTime
     001A rrrr                      3-  110 m1      .banksel ram_address
     001B 01rr                      1-  695     	MOVR	_waitTime,W
     001C 11rr                      1-  696     	IORAR	(_waitTime + 1),W
     001D 0D03                      1-  697     	BTRSC	STATUS,2
                                    1-  698     	MGOTO	_00134_DS_
     001E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  699     	.line	134, "main.c"; 	waitTime--;
     001F 21FF                      1-  700     	MOVIA	0xff
     0020 03rr                      1-  701     	ADDAR	_waitTime,F
     0021 0803                      1-  702     	BTRSS	STATUS,0
     0022 06rr                      1-  703     	DECR	(_waitTime + 1),F
     0023                           1-  704     _00134_DS_:
                                    1-  705     	.line	135, "main.c"; 	if((0x20 & ~PORTA) && keyCount == 0 && pwFlag == 0)
     0023 01rr                      1-  706     	MOVR	_PORTA,W
                                    1-  707     	BANKSEL	r0x1047
     0024 rrrr                      3-  110 m1      .banksel ram_address
     0025 00rr                      1-  708     	MOVAR	r0x1047
                                    1-  709     	BANKSEL	r0x1048
     0026 rrrr                      3-  110 m1      .banksel ram_address
     0027 02rr                      1-  710     	CLRR	r0x1048
                                    1-  711     	BANKSEL	r0x1047
     0028 rrrr                      3-  110 m1      .banksel ram_address
     0029 07rr                      1-  712     	COMR	r0x1047,W
     002A 00rr                      1-  713     	MOVAR	r0x1047
                                    1-  714     	BANKSEL	r0x1048
     002B rrrr                      3-  110 m1      .banksel ram_address
     002C 07rr                      1-  715     	COMR	r0x1048,W
     002D 00rr                      1-  716     	MOVAR	r0x1048
                                    1-  717     	BANKSEL	r0x1047
     002E rrrr                      3-  110 m1      .banksel ram_address
     002F 0Arr                      1-  718     	BTRSS	r0x1047,5
                                    1-  719     	MGOTO	_00142_DS_
     0030 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  720     	BANKSEL	_keyCount
     0031 rrrr                      3-  110 m1      .banksel ram_address
     0032 01rr                      1-  721     	MOVR	_keyCount,W
     0033 0903                      1-  722     	BTRSS	STATUS,2
                                    1-  723     	MGOTO	_00142_DS_
     0034 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  724     	BANKSEL	_pwFlag
     0035 rrrr                      3-  110 m1      .banksel ram_address
     0036 01rr                      1-  725     	MOVR	_pwFlag,W
     0037 0903                      1-  726     	BTRSS	STATUS,2
                                    1-  727     	MGOTO	_00142_DS_
     0038 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  728     	.line	138, "main.c"; 	if(++sleepTime > 100)
                                    1-  729     	BANKSEL	_sleepTime
     0039 rrrr                      3-  110 m1      .banksel ram_address
     003A 05rr                      1-  730     	INCR	_sleepTime,F
                                    1-  731     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  732     ;;unsigned compare: left >= lit (0x65=101), size=1
     003B 2165                      1-  733     	MOVIA	0x65
     003C 04rr                      1-  734     	SUBAR	_sleepTime,W
     003D 0803                      1-  735     	BTRSS	STATUS,0
                                    1-  736     	MGOTO	_00142_DS_
     003E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  737     	.line	139, "main.c"; 	gotoSleep();
                                    1-  738     	MCALL	_gotoSleep
     003F 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  739     	MGOTO	_00142_DS_
     0040 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  740     	.line	143, "main.c"; 	}
                                    1-  741     	RETURN	
     0041 0010                      3-   40 m1      ret
                                    1-  742     ; exit point of _main
                                    1-  744     ;***
                                    1-  745     ;  pBlock Stats: dbName = C
                                    1-  746     ;***
                                    1-  747     ;has an exit
                                    1-  748     ;6 compiler assigned registers:
                                    1-  749     ;   r0x102E
                                    1-  750     ;   STK00
                                    1-  751     ;   r0x102F
                                    1-  752     ;   r0x1030
                                    1-  753     ;   r0x1031
                                    1-  754     ;   r0x1032
                                    1-  755     ;; Starting pCode block
                                    1-  756     .segment "code"; module=main, function=_delay
                                    1-  758     ;local variable name mapping:
     0000                           1-  763     _delay:
                                    1-  764     ; 2 exit points
                                    1-  765     	.line	551, "main.c"; 	void delay(int count)
                                    1-  766     	BANKSEL	r0x102E
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1-  767     	MOVAR	r0x102E
     0002 01rr                      1-  768     	MOVR	STK00,W
                                    1-  769     	BANKSEL	r0x102F
     0003 rrrr                      3-  110 m1      .banksel ram_address
     0004 00rr                      1-  770     	MOVAR	r0x102F
                                    1-  771     	.line	554, "main.c"; 	for(i=1;i<=count;i++)
     0005 2101                      1-  772     	MOVIA	0x01
                                    1-  773     	BANKSEL	r0x1030
     0006 rrrr                      3-  110 m1      .banksel ram_address
     0007 00rr                      1-  774     	MOVAR	r0x1030
                                    1-  775     	BANKSEL	r0x1031
     0008 rrrr                      3-  110 m1      .banksel ram_address
     0009 02rr                      1-  776     	CLRR	r0x1031
     000A                           1-  777     _00368_DS_:
                                    1-  778     	BANKSEL	r0x102E
     000A rrrr                      3-  110 m1      .banksel ram_address
     000B 01rr                      1-  779     	MOVR	r0x102E,W
     000C 2580                      1-  780     	ADDIA	0x80
                                    1-  781     	BANKSEL	r0x1032
     000D rrrr                      3-  110 m1      .banksel ram_address
     000E 00rr                      1-  782     	MOVAR	r0x1032
                                    1-  783     	BANKSEL	r0x1031
     000F rrrr                      3-  110 m1      .banksel ram_address
     0010 01rr                      1-  784     	MOVR	r0x1031,W
     0011 2580                      1-  785     	ADDIA	0x80
                                    1-  786     	BANKSEL	r0x1032
     0012 rrrr                      3-  110 m1      .banksel ram_address
     0013 04rr                      1-  787     	SUBAR	r0x1032,W
     0014 0903                      1-  788     	BTRSS	STATUS,2
                                    1-  789     	MGOTO	_00379_DS_
     0015 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  790     	BANKSEL	r0x1030
     0016 rrrr                      3-  110 m1      .banksel ram_address
     0017 01rr                      1-  791     	MOVR	r0x1030,W
                                    1-  792     	BANKSEL	r0x102F
     0018 rrrr                      3-  110 m1      .banksel ram_address
     0019 04rr                      1-  793     	SUBAR	r0x102F,W
     001A                           1-  794     _00379_DS_:
     001A 0803                      1-  795     	BTRSS	STATUS,0
                                    1-  796     	MGOTO	_00370_DS_
     001B 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  797     	BANKSEL	r0x1030
     001C rrrr                      3-  110 m1      .banksel ram_address
     001D 05rr                      1-  798     	INCR	r0x1030,F
     001E 0903                      1-  799     	BTRSS	STATUS,2
                                    1-  800     	MGOTO	_00001_DS_
     001F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  801     	BANKSEL	r0x1031
     0020 rrrr                      3-  110 m1      .banksel ram_address
     0021 05rr                      1-  802     	INCR	r0x1031,F
     0022                           1-  803     _00001_DS_:
                                    1-  804     	MGOTO	_00368_DS_
     0022 3rrr                      3-   63 m1      LGOTO rom_address
     0023                           1-  805     _00370_DS_:
                                    1-  806     	.line	556, "main.c"; 	}
                                    1-  807     	RETURN	
     0023 0010                      3-   40 m1      ret
                                    1-  808     ; exit point of _delay
                                    1-  810     ;***
                                    1-  811     ;  pBlock Stats: dbName = C
                                    1-  812     ;***
                                    1-  813     ;has an exit
                                    1-  814     ;; Starting pCode block
                                    1-  815     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  817     _F_wait_eoc:
                                    1-  818     ; 2 exit points
     0000                           1-  819     _00361_DS_:
                                    1-  820     	.line	547, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  821     	BTRSS	_ADMDbits,5
                                    1-  822     	MGOTO	_00361_DS_
     0001 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  823     	.line	549, "main.c"; 	}
                                    1-  824     	RETURN	
     0002 0010                      3-   40 m1      ret
                                    1-  825     ; exit point of _F_wait_eoc
                                    1-  827     ;***
                                    1-  828     ;  pBlock Stats: dbName = C
                                    1-  829     ;***
                                    1-  830     ;has an exit
                                    1-  831     ;functions called:
                                    1-  832     ;   _F_wait_eoc
                                    1-  833     ;   _F_wait_eoc
                                    1-  834     ;6 compiler assigned registers:
                                    1-  835     ;   r0x1033
                                    1-  836     ;   r0x1034
                                    1-  837     ;   r0x1035
                                    1-  838     ;   r0x1036
                                    1-  839     ;   r0x1037
                                    1-  840     ;   r0x1038
                                    1-  841     ;; Starting pCode block
                                    1-  842     .segment "code"; module=main, function=_F_Quarter_VDD_Convert
                                    1-  844     ;local variable name mapping:
     0000                           1-  847     _F_Quarter_VDD_Convert:
                                    1-  848     ; 2 exit points
                                    1-  849     	.line	532, "main.c"; 	void F_Quarter_VDD_Convert(char count)
                                    1-  850     	BANKSEL	r0x1033
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1-  851     	MOVAR	r0x1033
                                    1-  852     	.line	535, "main.c"; 	ADMD  = 0x90 | C_Quarter_VDD;			// Select internal 1/4VDD as ADC input
     0002 219B                      1-  853     	MOVIA	0x9b
     0003 00rr                      1-  854     	MOVAR	_ADMD
                                    1-  855     	.line	536, "main.c"; 	for(i=1;i<=count;i++)
     0004 2101                      1-  856     	MOVIA	0x01
                                    1-  857     	BANKSEL	r0x1034
     0005 rrrr                      3-  110 m1      .banksel ram_address
     0006 00rr                      1-  858     	MOVAR	r0x1034
     0007                           1-  859     _00354_DS_:
                                    1-  860     	BANKSEL	r0x1034
     0007 rrrr                      3-  110 m1      .banksel ram_address
     0008 01rr                      1-  861     	MOVR	r0x1034,W
                                    1-  862     	BANKSEL	r0x1033
     0009 rrrr                      3-  110 m1      .banksel ram_address
     000A 04rr                      1-  863     	SUBAR	r0x1033,W
     000B 0803                      1-  864     	BTRSS	STATUS,0
                                    1-  865     	MGOTO	_00356_DS_
     000C 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  866     	.line	538, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     000D 1Brr                      1-  867     	BSR	_ADMDbits,6
                                    1-  868     	.line	539, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete	
                                    1-  869     	MCALL	_F_wait_eoc
     000E 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  870     	.line	540, "main.c"; 	R_Quarter_VDD_DATA_LB += ( 0x0F & ADR); 
     000F 210F                      1-  871     	MOVIA	0x0f
     0010 10rr                      1-  872     	ANDAR	_ADR,W
                                    1-  873     ;;3	MOVAR	r0x1035
                                    1-  874     	BANKSEL	_R_Quarter_VDD_DATA_LB
     0011 rrrr                      3-  110 m1      .banksel ram_address
     0012 03rr                      1-  875     	ADDAR	_R_Quarter_VDD_DATA_LB,F
                                    1-  876     	.line	541, "main.c"; 	R_Quarter_VDD_DATA    += ADD; 
     0013 01rr                      1-  877     	MOVR	_ADD,W
                                    1-  878     	BANKSEL	r0x1035
     0014 rrrr                      3-  110 m1      .banksel ram_address
     0015 00rr                      1-  879     	MOVAR	r0x1035
                                    1-  880     ;;1	CLRR	r0x1036
                                    1-  881     ;;101	MOVR	r0x1035,W
                                    1-  882     ;;99	MOVAR	r0x1037
     0016 2100                      1-  883     	MOVIA	0x00
                                    1-  884     	BANKSEL	r0x1038
     0017 rrrr                      3-  110 m1      .banksel ram_address
     0018 00rr                      1-  885     	MOVAR	r0x1038
                                    1-  886     ;;100	MOVR	r0x1037,W
                                    1-  887     	BANKSEL	r0x1035
     0019 rrrr                      3-  110 m1      .banksel ram_address
     001A 01rr                      1-  888     	MOVR	r0x1035,W
                                    1-  889     	BANKSEL	_R_Quarter_VDD_DATA
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 03rr                      1-  890     	ADDAR	_R_Quarter_VDD_DATA,F
                                    1-  891     	BANKSEL	r0x1038
     001D rrrr                      3-  110 m1      .banksel ram_address
     001E 01rr                      1-  892     	MOVR	r0x1038,W
     001F 0C03                      1-  893     	BTRSC	STATUS,0
     0020 05rr                      1-  894     	INCR	r0x1038,W
     0021 0D03                      1-  895     	BTRSC	STATUS,2
                                    1-  896     	MGOTO	_00002_DS_
     0022 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  897     	BANKSEL	_R_Quarter_VDD_DATA
     0023 rrrr                      3-  110 m1      .banksel ram_address
     0024 03rr                      1-  898     	ADDAR	(_R_Quarter_VDD_DATA + 1),F
     0025                           1-  899     _00002_DS_:
                                    1-  900     	.line	536, "main.c"; 	for(i=1;i<=count;i++)
                                    1-  901     	BANKSEL	r0x1034
     0025 rrrr                      3-  110 m1      .banksel ram_address
     0026 05rr                      1-  902     	INCR	r0x1034,F
                                    1-  903     	MGOTO	_00354_DS_
     0027 3rrr                      3-   63 m1      LGOTO rom_address
     0028                           1-  904     _00356_DS_:
                                    1-  905     	.line	543, "main.c"; 	}
                                    1-  906     	RETURN	
     0028 0010                      3-   40 m1      ret
                                    1-  907     ; exit point of _F_Quarter_VDD_Convert
                                    1-  909     ;***
                                    1-  910     ;  pBlock Stats: dbName = C
                                    1-  911     ;***
                                    1-  912     ;has an exit
                                    1-  913     ;functions called:
                                    1-  914     ;   _F_Quarter_VDD_Convert
                                    1-  915     ;   __divuint
                                    1-  916     ;   _F_Quarter_VDD_Convert
                                    1-  917     ;   __divuint
                                    1-  918     ;7 compiler assigned registers:
                                    1-  919     ;   r0x1039
                                    1-  920     ;   r0x103A
                                    1-  921     ;   r0x103B
                                    1-  922     ;   r0x103C
                                    1-  923     ;   STK02
                                    1-  924     ;   STK01
                                    1-  925     ;   STK00
                                    1-  926     ;; Starting pCode block
                                    1-  927     .segment "code"; module=main, function=_checkBat
                                    1-  929     ;local variable name mapping:
     0000                           1-  932     _checkBat:
                                    1-  933     ; 2 exit points
                                    1-  934     	.line	499, "main.c"; 	R_Quarter_VDD_DATA=R_Quarter_VDD_DATA_LB=0x00;
                                    1-  935     	BANKSEL	_R_Quarter_VDD_DATA_LB
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 02rr                      1-  936     	CLRR	_R_Quarter_VDD_DATA_LB
                                    1-  937     	BANKSEL	_R_Quarter_VDD_DATA
     0002 rrrr                      3-  110 m1      .banksel ram_address
     0003 02rr                      1-  938     	CLRR	_R_Quarter_VDD_DATA
     0004 02rr                      1-  939     	CLRR	(_R_Quarter_VDD_DATA + 1)
                                    1-  940     	.line	500, "main.c"; 	F_Quarter_VDD_Convert(8);			// execute 1/4VDD input channel ADC converting 8 times
     0005 2108                      1-  941     	MOVIA	0x08
                                    1-  942     	MCALL	_F_Quarter_VDD_Convert
     0006 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  943     	.line	501, "main.c"; 	R_Quarter_VDD_DATA <<= 4;			// R_Quarter_VDD_DATA shift left 4 bit
                                    1-  944     	BANKSEL	_R_Quarter_VDD_DATA
     0007 rrrr                      3-  110 m1      .banksel ram_address
     0008 15rr                      1-  945     	SWAPR	(_R_Quarter_VDD_DATA + 1),W
     0009 22F0                      1-  946     	ANDIA	0xf0
     000A 00rr                      1-  947     	MOVAR	(_R_Quarter_VDD_DATA + 1)
     000B 15rr                      1-  948     	SWAPR	_R_Quarter_VDD_DATA,W
     000C 00rr                      1-  949     	MOVAR	_R_Quarter_VDD_DATA
     000D 220F                      1-  950     	ANDIA	0x0f
     000E 11rr                      1-  951     	IORAR	(_R_Quarter_VDD_DATA + 1),F
     000F 12rr                      1-  952     	XORAR	_R_Quarter_VDD_DATA,F
                                    1-  953     	.line	502, "main.c"; 	R_Quarter_VDD_DATA_LB &= 0xF0;		// Only get Bit7~4
     0010 21F0                      1-  954     	MOVIA	0xf0
                                    1-  955     	BANKSEL	_R_Quarter_VDD_DATA_LB
     0011 rrrr                      3-  110 m1      .banksel ram_address
     0012 10rr                      1-  956     	ANDAR	_R_Quarter_VDD_DATA_LB,F
                                    1-  957     	.line	503, "main.c"; 	R_Quarter_VDD_DATA += R_Quarter_VDD_DATA_LB; //// R_Quarter_VDD_DATA + R_Quarter_VDD_DATA_LB
     0013 01rr                      1-  958     	MOVR	_R_Quarter_VDD_DATA_LB,W
                                    1-  959     	BANKSEL	r0x103B
     0014 rrrr                      3-  110 m1      .banksel ram_address
     0015 00rr                      1-  960     	MOVAR	r0x103B
                                    1-  961     	BANKSEL	r0x1039
     0016 rrrr                      3-  110 m1      .banksel ram_address
     0017 00rr                      1-  962     	MOVAR	r0x1039
                                    1-  963     	BANKSEL	r0x103A
     0018 rrrr                      3-  110 m1      .banksel ram_address
     0019 02rr                      1-  964     	CLRR	r0x103A
                                    1-  965     ;;104	MOVR	r0x1039,W
     001A 2100                      1-  966     	MOVIA	0x00
                                    1-  967     	BANKSEL	r0x103C
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 00rr                      1-  968     	MOVAR	r0x103C
                                    1-  969     	BANKSEL	r0x103B
     001D rrrr                      3-  110 m1      .banksel ram_address
     001E 01rr                      1-  970     	MOVR	r0x103B,W
                                    1-  971     	BANKSEL	_R_Quarter_VDD_DATA
     001F rrrr                      3-  110 m1      .banksel ram_address
     0020 03rr                      1-  972     	ADDAR	_R_Quarter_VDD_DATA,F
                                    1-  973     	BANKSEL	r0x103C
     0021 rrrr                      3-  110 m1      .banksel ram_address
     0022 01rr                      1-  974     	MOVR	r0x103C,W
     0023 0C03                      1-  975     	BTRSC	STATUS,0
     0024 05rr                      1-  976     	INCR	r0x103C,W
     0025 0D03                      1-  977     	BTRSC	STATUS,2
                                    1-  978     	MGOTO	_00003_DS_
     0026 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  979     	BANKSEL	_R_Quarter_VDD_DATA
     0027 rrrr                      3-  110 m1      .banksel ram_address
     0028 03rr                      1-  980     	ADDAR	(_R_Quarter_VDD_DATA + 1),F
                                    1-  981     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     0029                           1-  982     _00003_DS_:
                                    1-  983     	.line	504, "main.c"; 	R_Quarter_VDD_DATA >>=3;			// R_Quarter_VDD_DATA dividing 8
     0029 1C03                      1-  984     	BCR	STATUS,0
                                    1-  985     	BANKSEL	_R_Quarter_VDD_DATA
     002A rrrr                      3-  110 m1      .banksel ram_address
     002B 13rr                      1-  986     	RRR	(_R_Quarter_VDD_DATA + 1),F
     002C 13rr                      1-  987     	RRR	_R_Quarter_VDD_DATA,F
                                    1-  988     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     002D 1C03                      1-  989     	BCR	STATUS,0
     002E 13rr                      1-  990     	RRR	(_R_Quarter_VDD_DATA + 1),F
     002F 13rr                      1-  991     	RRR	_R_Quarter_VDD_DATA,F
                                    1-  992     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     0030 1C03                      1-  993     	BCR	STATUS,0
     0031 13rr                      1-  994     	RRR	(_R_Quarter_VDD_DATA + 1),F
     0032 13rr                      1-  995     	RRR	_R_Quarter_VDD_DATA,F
                                    1-  996     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  997     ;;unsigned compare: left >= lit (0x899=2201), size=2
                                    1-  998     	.line	505, "main.c"; 	if(R_Quarter_VDD_DATA > 2200)
     0033 2108                      1-  999     	MOVIA	0x08
     0034 04rr                      1- 1000     	SUBAR	(_R_Quarter_VDD_DATA + 1),W
     0035 0903                      1- 1001     	BTRSS	STATUS,2
                                    1- 1002     	MGOTO	_00344_DS_
     0036 3rrr                      3-   63 m1      LGOTO rom_address
     0037 2199                      1- 1003     	MOVIA	0x99
     0038 04rr                      1- 1004     	SUBAR	_R_Quarter_VDD_DATA,W
     0039                           1- 1005     _00344_DS_:
     0039 0803                      1- 1006     	BTRSS	STATUS,0
                                    1- 1007     	MGOTO	_00325_DS_
     003A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1008     	.line	507, "main.c"; 	pwStep = 100;
     003B 2164                      1- 1009     	MOVIA	0x64
                                    1- 1010     	BANKSEL	_pwStep
     003C rrrr                      3-  110 m1      .banksel ram_address
     003D 00rr                      1- 1011     	MOVAR	_pwStep
                                    1- 1012     	MGOTO	_00327_DS_
     003E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1013     ;;unsigned compare: left < lit (0x5DC=1500), size=2
     003F                           1- 1014     _00325_DS_:
                                    1- 1015     	.line	509, "main.c"; 	else if(R_Quarter_VDD_DATA < 1500)
     003F 2105                      1- 1016     	MOVIA	0x05
                                    1- 1017     	BANKSEL	_R_Quarter_VDD_DATA
     0040 rrrr                      3-  110 m1      .banksel ram_address
     0041 04rr                      1- 1018     	SUBAR	(_R_Quarter_VDD_DATA + 1),W
     0042 0903                      1- 1019     	BTRSS	STATUS,2
                                    1- 1020     	MGOTO	_00345_DS_
     0043 3rrr                      3-   63 m1      LGOTO rom_address
     0044 21DC                      1- 1021     	MOVIA	0xdc
     0045 04rr                      1- 1022     	SUBAR	_R_Quarter_VDD_DATA,W
     0046                           1- 1023     _00345_DS_:
     0046 0C03                      1- 1024     	BTRSC	STATUS,0
                                    1- 1025     	MGOTO	_00322_DS_
     0047 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1026     	.line	511, "main.c"; 	pwStep = 0;
                                    1- 1027     	BANKSEL	_pwStep
     0048 rrrr                      3-  110 m1      .banksel ram_address
     0049 02rr                      1- 1028     	CLRR	_pwStep
                                    1- 1029     	MGOTO	_00327_DS_
     004A 3rrr                      3-   63 m1      LGOTO rom_address
     004B                           1- 1030     _00322_DS_:
                                    1- 1031     	.line	515, "main.c"; 	u16t tempValue = (R_Quarter_VDD_DATA - 1500)/7;
     004B 2124                      1- 1032     	MOVIA	0x24
                                    1- 1033     	BANKSEL	_R_Quarter_VDD_DATA
     004C rrrr                      3-  110 m1      .banksel ram_address
     004D 03rr                      1- 1034     	ADDAR	_R_Quarter_VDD_DATA,W
                                    1- 1035     	BANKSEL	r0x1039
     004E rrrr                      3-  110 m1      .banksel ram_address
     004F 00rr                      1- 1036     	MOVAR	r0x1039
     0050 21FA                      1- 1037     	MOVIA	0xfa
                                    1- 1038     	BANKSEL	r0x103A
     0051 rrrr                      3-  110 m1      .banksel ram_address
     0052 00rr                      1- 1039     	MOVAR	r0x103A
                                    1- 1040     	BANKSEL	_R_Quarter_VDD_DATA
     0053 rrrr                      3-  110 m1      .banksel ram_address
     0054 01rr                      1- 1041     	MOVR	(_R_Quarter_VDD_DATA + 1),W
     0055 0C03                      1- 1042     	BTRSC	STATUS,0
     0056 05rr                      1- 1043     	INCR	(_R_Quarter_VDD_DATA + 1),W
     0057 0D03                      1- 1044     	BTRSC	STATUS,2
                                    1- 1045     	MGOTO	_00004_DS_
     0058 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1046     	BANKSEL	r0x103A
     0059 rrrr                      3-  110 m1      .banksel ram_address
     005A 03rr                      1- 1047     	ADDAR	r0x103A,F
     005B                           1- 1048     _00004_DS_:
     005B 2107                      1- 1049     	MOVIA	0x07
     005C 00rr                      1- 1050     	MOVAR	STK02
     005D 2100                      1- 1051     	MOVIA	0x00
     005E 00rr                      1- 1052     	MOVAR	STK01
                                    1- 1053     	BANKSEL	r0x1039
     005F rrrr                      3-  110 m1      .banksel ram_address
     0060 01rr                      1- 1054     	MOVR	r0x1039,W
     0061 00rr                      1- 1055     	MOVAR	STK00
                                    1- 1056     	BANKSEL	r0x103A
     0062 rrrr                      3-  110 m1      .banksel ram_address
     0063 01rr                      1- 1057     	MOVR	r0x103A,W
                                    1- 1058     	MCALL	__divuint
     0064 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1059     	BANKSEL	r0x103A
     0065 rrrr                      3-  110 m1      .banksel ram_address
     0066 00rr                      1- 1060     	MOVAR	r0x103A
     0067 01rr                      1- 1061     	MOVR	STK00,W
                                    1- 1062     	BANKSEL	r0x1039
     0068 rrrr                      3-  110 m1      .banksel ram_address
     0069 00rr                      1- 1063     	MOVAR	r0x1039
                                    1- 1064     	.line	516, "main.c"; 	if(0x20 & PORTA)
     006A 0Arr                      1- 1065     	BTRSS	_PORTA,5
                                    1- 1066     	MGOTO	_00319_DS_
     006B 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1067     	.line	518, "main.c"; 	if(pwStep < tempValue)
                                    1- 1068     	BANKSEL	_pwStep
     006C rrrr                      3-  110 m1      .banksel ram_address
     006D 01rr                      1- 1069     	MOVR	_pwStep,W
                                    1- 1070     	BANKSEL	r0x103B
     006E rrrr                      3-  110 m1      .banksel ram_address
     006F 00rr                      1- 1071     	MOVAR	r0x103B
                                    1- 1072     	BANKSEL	r0x103C
     0070 rrrr                      3-  110 m1      .banksel ram_address
     0071 02rr                      1- 1073     	CLRR	r0x103C
                                    1- 1074     	BANKSEL	r0x103A
     0072 rrrr                      3-  110 m1      .banksel ram_address
     0073 01rr                      1- 1075     	MOVR	r0x103A,W
                                    1- 1076     	BANKSEL	r0x103C
     0074 rrrr                      3-  110 m1      .banksel ram_address
     0075 04rr                      1- 1077     	SUBAR	r0x103C,W
     0076 0903                      1- 1078     	BTRSS	STATUS,2
                                    1- 1079     	MGOTO	_00346_DS_
     0077 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1080     	BANKSEL	r0x1039
     0078 rrrr                      3-  110 m1      .banksel ram_address
     0079 01rr                      1- 1081     	MOVR	r0x1039,W
                                    1- 1082     	BANKSEL	r0x103B
     007A rrrr                      3-  110 m1      .banksel ram_address
     007B 04rr                      1- 1083     	SUBAR	r0x103B,W
     007C                           1- 1084     _00346_DS_:
     007C 0C03                      1- 1085     	BTRSC	STATUS,0
                                    1- 1086     	MGOTO	_00327_DS_
     007D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1087     	.line	519, "main.c"; 	pwStep = tempValue;
                                    1- 1088     	BANKSEL	r0x1039
     007E rrrr                      3-  110 m1      .banksel ram_address
     007F 01rr                      1- 1089     	MOVR	r0x1039,W
                                    1- 1090     	BANKSEL	_pwStep
     0080 rrrr                      3-  110 m1      .banksel ram_address
     0081 00rr                      1- 1091     	MOVAR	_pwStep
                                    1- 1092     	MGOTO	_00327_DS_
     0082 3rrr                      3-   63 m1      LGOTO rom_address
     0083                           1- 1093     _00319_DS_:
                                    1- 1094     	.line	523, "main.c"; 	if(pwStep > tempValue || pwStep == 0)
                                    1- 1095     	BANKSEL	_pwStep
     0083 rrrr                      3-  110 m1      .banksel ram_address
     0084 01rr                      1- 1096     	MOVR	_pwStep,W
                                    1- 1097     	BANKSEL	r0x103B
     0085 rrrr                      3-  110 m1      .banksel ram_address
     0086 00rr                      1- 1098     	MOVAR	r0x103B
                                    1- 1099     	BANKSEL	r0x103C
     0087 rrrr                      3-  110 m1      .banksel ram_address
     0088 02rr                      1- 1100     	CLRR	r0x103C
     0089 2100                      1- 1101     	MOVIA	0x00
                                    1- 1102     	BANKSEL	r0x103A
     008A rrrr                      3-  110 m1      .banksel ram_address
     008B 04rr                      1- 1103     	SUBAR	r0x103A,W
     008C 0903                      1- 1104     	BTRSS	STATUS,2
                                    1- 1105     	MGOTO	_00347_DS_
     008D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1106     	BANKSEL	r0x103B
     008E rrrr                      3-  110 m1      .banksel ram_address
     008F 01rr                      1- 1107     	MOVR	r0x103B,W
                                    1- 1108     	BANKSEL	r0x1039
     0090 rrrr                      3-  110 m1      .banksel ram_address
     0091 04rr                      1- 1109     	SUBAR	r0x1039,W
     0092                           1- 1110     _00347_DS_:
     0092 0803                      1- 1111     	BTRSS	STATUS,0
                                    1- 1112     	MGOTO	_00315_DS_
     0093 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1113     	BANKSEL	_pwStep
     0094 rrrr                      3-  110 m1      .banksel ram_address
     0095 01rr                      1- 1114     	MOVR	_pwStep,W
     0096 0903                      1- 1115     	BTRSS	STATUS,2
                                    1- 1116     	MGOTO	_00327_DS_
     0097 3rrr                      3-   63 m1      LGOTO rom_address
     0098                           1- 1117     _00315_DS_:
                                    1- 1118     	.line	524, "main.c"; 	pwStep = tempValue;
                                    1- 1119     	BANKSEL	r0x1039
     0098 rrrr                      3-  110 m1      .banksel ram_address
     0099 01rr                      1- 1120     	MOVR	r0x1039,W
                                    1- 1121     	BANKSEL	_pwStep
     009A rrrr                      3-  110 m1      .banksel ram_address
     009B 00rr                      1- 1122     	MOVAR	_pwStep
     009C                           1- 1123     _00327_DS_:
                                    1- 1124     	.line	528, "main.c"; 	}
                                    1- 1125     	RETURN	
     009C 0010                      3-   40 m1      ret
                                    1- 1126     ; exit point of _checkBat
                                    1- 1128     ;***
                                    1- 1129     ;  pBlock Stats: dbName = C
                                    1- 1130     ;***
                                    1- 1131     ;has an exit
                                    1- 1132     ;functions called:
                                    1- 1133     ;   _delay
                                    1- 1134     ;   _delay
                                    1- 1135     ;1 compiler assigned register :
                                    1- 1136     ;   STK00
                                    1- 1137     ;; Starting pCode block
                                    1- 1138     .segment "code"; module=main, function=_initAD
     0000                           1- 1140     _initAD:
                                    1- 1141     ; 2 exit points
                                    1- 1142     	.line	471, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2180                      1- 1143     	MOVIA	0x80
     0001 00rr                      1- 1144     	MOVAR	_ADMD
                                    1- 1145     	.line	476, "main.c"; 	ADVREFH = C_Vrefh_2V;					// ADC reference high voltage is supplied by internal 2V  (Note: ADC clock freq. must be equal or less than 250KHz)
     0002 02rr                      1- 1146     	CLRR	_ADVREFH
                                    1- 1147     	.line	481, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0003 2110                      1- 1148     	MOVIA	0x10
     0004 00rr                      1- 1149     	MOVAR	_ADR
                                    1- 1150     	.line	485, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;		// Sample pulse width=1 adc clock, ADC select 12-bit conversion ( Note: ADC clock freq. must be equal or less than 500KHz)
     0005 2103                      1- 1151     	MOVIA	0x03
     0006 00rr                      1- 1152     	MOVAR	_ADCR
                                    1- 1153     	.line	492, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0007 1Arr                      1- 1154     	BSR	_ADMDbits,4
                                    1- 1155     	.line	493, "main.c"; 	delay(50);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     0008 2132                      1- 1156     	MOVIA	0x32
     0009 00rr                      1- 1157     	MOVAR	STK00
     000A 2100                      1- 1158     	MOVIA	0x00
                                    1- 1159     	MCALL	_delay
     000B 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1160     	.line	494, "main.c"; 	}
                                    1- 1161     	RETURN	
     000C 0010                      3-   40 m1      ret
                                    1- 1162     ; exit point of _initAD
                                    1- 1164     ;***
                                    1- 1165     ;  pBlock Stats: dbName = C
                                    1- 1166     ;***
                                    1- 1167     ;has an exit
                                    1- 1168     ;functions called:
                                    1- 1169     ;   _keyRead
                                    1- 1170     ;   _keyRead
                                    1- 1171     ;1 compiler assigned register :
                                    1- 1172     ;   r0x103E
                                    1- 1173     ;; Starting pCode block
                                    1- 1174     .segment "code"; module=main, function=_keyCtr
                                    1- 1176     ;local variable name mapping:
     0000                           1- 1178     _keyCtr:
                                    1- 1179     ; 2 exit points
                                    1- 1180     	.line	430, "main.c"; 	char kclick = keyRead(0x40 & (~PORTA));
     0000 07rr                      1- 1181     	COMR	_PORTA,W
                                    1- 1182     	BANKSEL	r0x103E
     0001 rrrr                      3-  110 m1      .banksel ram_address
     0002 00rr                      1- 1183     	MOVAR	r0x103E
     0003 2140                      1- 1184     	MOVIA	0x40
     0004 10rr                      1- 1185     	ANDAR	r0x103E,F
     0005 01rr                      1- 1186     	MOVR	r0x103E,W
                                    1- 1187     	MCALL	_keyRead
     0006 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1188     	BANKSEL	r0x103E
     0007 rrrr                      3-  110 m1      .banksel ram_address
     0008 00rr                      1- 1189     	MOVAR	r0x103E
                                    1- 1190     	.line	431, "main.c"; 	if(kclick == 1)
     0009 2401                      1- 1191     	XORIA	0x01
     000A 0903                      1- 1192     	BTRSS	STATUS,2
                                    1- 1193     	MGOTO	_00302_DS_
     000B 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1194     	.line	433, "main.c"; 	if(pwFlag)
                                    1- 1195     	BANKSEL	_pwFlag
     000C rrrr                      3-  110 m1      .banksel ram_address
     000D 01rr                      1- 1196     	MOVR	_pwFlag,W
     000E 0D03                      1- 1197     	BTRSC	STATUS,2
                                    1- 1198     	MGOTO	_00304_DS_
     000F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1199     	.line	435, "main.c"; 	if(showFlag == 0)
                                    1- 1200     	BANKSEL	_showFlag
     0010 rrrr                      3-  110 m1      .banksel ram_address
     0011 01rr                      1- 1201     	MOVR	_showFlag,W
     0012 0903                      1- 1202     	BTRSS	STATUS,2
                                    1- 1203     	MGOTO	_00290_DS_
     0013 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1204     	.line	438, "main.c"; 	pwShowTime = 3;
     0014 2103                      1- 1205     	MOVIA	0x03
                                    1- 1206     	BANKSEL	_pwShowTime
     0015 rrrr                      3-  110 m1      .banksel ram_address
     0016 00rr                      1- 1207     	MOVAR	_pwShowTime
                                    1- 1208     	MGOTO	_00304_DS_
     0017 3rrr                      3-   63 m1      LGOTO rom_address
     0018                           1- 1209     _00290_DS_:
                                    1- 1210     	.line	442, "main.c"; 	pwShowTime = 0;
                                    1- 1211     	BANKSEL	_pwShowTime
     0018 rrrr                      3-  110 m1      .banksel ram_address
     0019 02rr                      1- 1212     	CLRR	_pwShowTime
                                    1- 1213     	.line	443, "main.c"; 	if(++workStep > 3)
                                    1- 1214     	BANKSEL	_workStep
     001A rrrr                      3-  110 m1      .banksel ram_address
     001B 05rr                      1- 1215     	INCR	_workStep,F
                                    1- 1216     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1217     ;;unsigned compare: left >= lit (0x4=4), size=1
     001C 2104                      1- 1218     	MOVIA	0x04
     001D 04rr                      1- 1219     	SUBAR	_workStep,W
     001E 0803                      1- 1220     	BTRSS	STATUS,0
                                    1- 1221     	MGOTO	_00288_DS_
     001F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1222     	.line	444, "main.c"; 	workStep = 1;
     0020 2101                      1- 1223     	MOVIA	0x01
     0021 00rr                      1- 1224     	MOVAR	_workStep
     0022                           1- 1225     _00288_DS_:
                                    1- 1226     	.line	445, "main.c"; 	stepShowTime = 2;
     0022 2102                      1- 1227     	MOVIA	0x02
                                    1- 1228     	BANKSEL	_stepShowTime
     0023 rrrr                      3-  110 m1      .banksel ram_address
     0024 00rr                      1- 1229     	MOVAR	_stepShowTime
                                    1- 1230     	MGOTO	_00304_DS_
     0025 3rrr                      3-   63 m1      LGOTO rom_address
     0026                           1- 1231     _00302_DS_:
                                    1- 1232     	.line	449, "main.c"; 	else if(kclick == 2)
                                    1- 1233     	BANKSEL	r0x103E
     0026 rrrr                      3-  110 m1      .banksel ram_address
     0027 01rr                      1- 1234     	MOVR	r0x103E,W
     0028 2402                      1- 1235     	XORIA	0x02
     0029 0903                      1- 1236     	BTRSS	STATUS,2
                                    1- 1237     	MGOTO	_00304_DS_
     002A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1238     	.line	451, "main.c"; 	if(pwFlag)
                                    1- 1239     	BANKSEL	_pwFlag
     002B rrrr                      3-  110 m1      .banksel ram_address
     002C 01rr                      1- 1240     	MOVR	_pwFlag,W
     002D 0D03                      1- 1241     	BTRSC	STATUS,2
                                    1- 1242     	MGOTO	_00297_DS_
     002E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1243     	.line	453, "main.c"; 	pwFlag = 0;		//关机
     002F 02rr                      1- 1244     	CLRR	_pwFlag
                                    1- 1245     	.line	454, "main.c"; 	workStep = 0;
                                    1- 1246     	BANKSEL	_workStep
     0030 rrrr                      3-  110 m1      .banksel ram_address
     0031 02rr                      1- 1247     	CLRR	_workStep
                                    1- 1248     	MGOTO	_00304_DS_
     0032 3rrr                      3-   63 m1      LGOTO rom_address
     0033                           1- 1249     _00297_DS_:
                                    1- 1250     	.line	458, "main.c"; 	pwFlag = 1;		//开机
     0033 2101                      1- 1251     	MOVIA	0x01
                                    1- 1252     	BANKSEL	_pwFlag
     0034 rrrr                      3-  110 m1      .banksel ram_address
     0035 00rr                      1- 1253     	MOVAR	_pwFlag
                                    1- 1254     	.line	459, "main.c"; 	pwShowTime = 3;
     0036 2103                      1- 1255     	MOVIA	0x03
                                    1- 1256     	BANKSEL	_pwShowTime
     0037 rrrr                      3-  110 m1      .banksel ram_address
     0038 00rr                      1- 1257     	MOVAR	_pwShowTime
                                    1- 1258     	.line	460, "main.c"; 	stepShowTime = 2;
     0039 2102                      1- 1259     	MOVIA	0x02
                                    1- 1260     	BANKSEL	_stepShowTime
     003A rrrr                      3-  110 m1      .banksel ram_address
     003B 00rr                      1- 1261     	MOVAR	_stepShowTime
                                    1- 1262     	.line	461, "main.c"; 	if(workStep == 0)
                                    1- 1263     	BANKSEL	_workStep
     003C rrrr                      3-  110 m1      .banksel ram_address
     003D 01rr                      1- 1264     	MOVR	_workStep,W
     003E 0903                      1- 1265     	BTRSS	STATUS,2
                                    1- 1266     	MGOTO	_00304_DS_
     003F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1267     	.line	462, "main.c"; 	workStep = 1;
     0040 2101                      1- 1268     	MOVIA	0x01
     0041 00rr                      1- 1269     	MOVAR	_workStep
     0042                           1- 1270     _00304_DS_:
                                    1- 1271     	.line	465, "main.c"; 	}
                                    1- 1272     	RETURN	
     0042 0010                      3-   40 m1      ret
                                    1- 1273     ; exit point of _keyCtr
                                    1- 1275     ;***
                                    1- 1276     ;  pBlock Stats: dbName = C
                                    1- 1277     ;***
                                    1- 1278     ;has an exit
                                    1- 1279     ;1 compiler assigned register :
                                    1- 1280     ;   r0x103D
                                    1- 1281     ;; Starting pCode block
                                    1- 1282     .segment "code"; module=main, function=_keyRead
                                    1- 1284     ;local variable name mapping:
     0000                           1- 1286     _keyRead:
                                    1- 1287     ; 2 exit points
                                    1- 1288     	.line	395, "main.c"; 	char keyRead(char keyStatus)	
                                    1- 1289     	BANKSEL	r0x103D
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 00rr                      1- 1290     	MOVAR	r0x103D
                                    1- 1291     	.line	397, "main.c"; 	if(keyStatus)
     0002 01rr                      1- 1292     	MOVR	r0x103D,W
     0003 0D03                      1- 1293     	BTRSC	STATUS,2
                                    1- 1294     	MGOTO	_00280_DS_
     0004 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1295     	.line	399, "main.c"; 	keyCount++;
                                    1- 1296     	BANKSEL	_keyCount
     0005 rrrr                      3-  110 m1      .banksel ram_address
     0006 05rr                      1- 1297     	INCR	_keyCount,F
                                    1- 1298     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1- 1299     	.line	400, "main.c"; 	if(keyCount >= 200)
     0007 21C8                      1- 1300     	MOVIA	0xc8
     0008 04rr                      1- 1301     	SUBAR	_keyCount,W
     0009 0803                      1- 1302     	BTRSS	STATUS,0
                                    1- 1303     	MGOTO	_00281_DS_
     000A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1304     	.line	402, "main.c"; 	keyCount = 200;
     000B 21C8                      1- 1305     	MOVIA	0xc8
     000C 00rr                      1- 1306     	MOVAR	_keyCount
                                    1- 1307     	.line	403, "main.c"; 	if(!longPressFlag)
                                    1- 1308     	BANKSEL	_longPressFlag
     000D rrrr                      3-  110 m1      .banksel ram_address
     000E 01rr                      1- 1309     	MOVR	_longPressFlag,W
     000F 0903                      1- 1310     	BTRSS	STATUS,2
                                    1- 1311     	MGOTO	_00281_DS_
     0010 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1312     	.line	405, "main.c"; 	longPressFlag = 1;
     0011 2101                      1- 1313     	MOVIA	0x01
     0012 00rr                      1- 1314     	MOVAR	_longPressFlag
                                    1- 1315     	.line	406, "main.c"; 	return 2;
     0013 2102                      1- 1316     	MOVIA	0x02
                                    1- 1317     	MGOTO	_00282_DS_
     0014 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1318     ;;unsigned compare: left < lit (0xC8=200), size=1
     0015                           1- 1319     _00280_DS_:
                                    1- 1320     	.line	412, "main.c"; 	if(keyCount >= 200)
     0015 21C8                      1- 1321     	MOVIA	0xc8
                                    1- 1322     	BANKSEL	_keyCount
     0016 rrrr                      3-  110 m1      .banksel ram_address
     0017 04rr                      1- 1323     	SUBAR	_keyCount,W
     0018 0803                      1- 1324     	BTRSS	STATUS,0
                                    1- 1325     	MGOTO	_00277_DS_
     0019 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1326     	.line	414, "main.c"; 	keyCount = 0;
     001A 02rr                      1- 1327     	CLRR	_keyCount
                                    1- 1328     	.line	415, "main.c"; 	longPressFlag = 0;
                                    1- 1329     	BANKSEL	_longPressFlag
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 02rr                      1- 1330     	CLRR	_longPressFlag
                                    1- 1331     	.line	416, "main.c"; 	return	0;
     001D 2100                      1- 1332     	MOVIA	0x00
                                    1- 1333     	MGOTO	_00282_DS_
     001E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1334     ;;unsigned compare: left < lit (0x4=4), size=1
     001F                           1- 1335     _00277_DS_:
                                    1- 1336     	.line	418, "main.c"; 	else if(keyCount >= 4)
     001F 2104                      1- 1337     	MOVIA	0x04
                                    1- 1338     	BANKSEL	_keyCount
     0020 rrrr                      3-  110 m1      .banksel ram_address
     0021 04rr                      1- 1339     	SUBAR	_keyCount,W
     0022 0803                      1- 1340     	BTRSS	STATUS,0
                                    1- 1341     	MGOTO	_00278_DS_
     0023 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1342     	.line	420, "main.c"; 	keyCount = 0;
     0024 02rr                      1- 1343     	CLRR	_keyCount
                                    1- 1344     	.line	421, "main.c"; 	return	1;
     0025 2101                      1- 1345     	MOVIA	0x01
                                    1- 1346     	MGOTO	_00282_DS_
     0026 3rrr                      3-   63 m1      LGOTO rom_address
     0027                           1- 1347     _00278_DS_:
                                    1- 1348     	.line	423, "main.c"; 	keyCount = 0;
                                    1- 1349     	BANKSEL	_keyCount
     0027 rrrr                      3-  110 m1      .banksel ram_address
     0028 02rr                      1- 1350     	CLRR	_keyCount
     0029                           1- 1351     _00281_DS_:
                                    1- 1352     	.line	425, "main.c"; 	return 0;
     0029 2100                      1- 1353     	MOVIA	0x00
     002A                           1- 1354     _00282_DS_:
                                    1- 1355     	.line	426, "main.c"; 	}
                                    1- 1356     	RETURN	
     002A 0010                      3-   40 m1      ret
                                    1- 1357     ; exit point of _keyRead
                                    1- 1359     ;***
                                    1- 1360     ;  pBlock Stats: dbName = C
                                    1- 1361     ;***
                                    1- 1362     ;has an exit
                                    1- 1363     ;; Starting pCode block
                                    1- 1364     .segment "code"; module=main, function=_pwmStop
     0000                           1- 1366     _pwmStop:
                                    1- 1367     ; 2 exit points
                                    1- 1368     	.line	389, "main.c"; 	T2CR1 = C_TMR2_Dis;
     0000 0200                      1- 1369     	CLRA	
     0001 00rr                      1- 1370     	SFUN	_T2CR1
                                    1- 1371     	.line	390, "main.c"; 	}
                                    1- 1372     	RETURN	
     0002 0010                      3-   40 m1      ret
                                    1- 1373     ; exit point of _pwmStop
                                    1- 1375     ;***
                                    1- 1376     ;  pBlock Stats: dbName = C
                                    1- 1377     ;***
                                    1- 1378     ;has an exit
                                    1- 1379     ;1 compiler assigned register :
                                    1- 1380     ;   r0x103F
                                    1- 1381     ;; Starting pCode block
                                    1- 1382     .segment "code"; module=main, function=_pwmInit
     0000                           1- 1384     _pwmInit:
                                    1- 1385     ; 2 exit points
                                    1- 1386     	.line	377, "main.c"; 	if(0x80&T2CR1)
     0000 00rr                      1- 1387     	SFUNR	_T2CR1
                                    1- 1388     	BANKSEL	r0x103F
     0001 rrrr                      3-  110 m1      .banksel ram_address
     0002 00rr                      1- 1389     	MOVAR	r0x103F
     0003 0Frr                      1- 1390     	BTRSC	r0x103F,7
                                    1- 1391     	.line	378, "main.c"; 	return;
                                    1- 1392     	MGOTO	_00261_DS_
     0004 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1393     	.line	379, "main.c"; 	TMRH = 0x00;
     0005 02rr                      1- 1394     	CLRR	_TMRH
                                    1- 1395     	.line	380, "main.c"; 	TMR2 = 100;							//频率为110K
     0006 2164                      1- 1396     	MOVIA	0x64
     0007 00rr                      1- 1397     	SFUN	_TMR2
                                    1- 1398     	.line	381, "main.c"; 	PWM2DUTY = 100;				// 		
     0008 00rr                      1- 1399     	SFUN	_PWM2DUTY
                                    1- 1400     	.line	383, "main.c"; 	T2CR2 = C_TMR2_ClkSrc_Inst | C_PS2_Div4;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0009 2101                      1- 1401     	MOVIA	0x01
     000A 00rr                      1- 1402     	SFUN	_T2CR2
                                    1- 1403     	.line	384, "main.c"; 	T2CR1 = C_PWM2_En | C_TMR2_Reload | C_TMR2_En;	// PWM1 output will be present on PB6 , PWM1 output is active high, reloaded from TMR1, non-stop mode
     000B 2183                      1- 1404     	MOVIA	0x83
     000C 00rr                      1- 1405     	SFUN	_T2CR1
     000D                           1- 1406     _00261_DS_:
                                    1- 1407     	.line	385, "main.c"; 	}
                                    1- 1408     	RETURN	
     000D 0010                      3-   40 m1      ret
                                    1- 1409     ; exit point of _pwmInit
                                    1- 1411     ;***
                                    1- 1412     ;  pBlock Stats: dbName = C
                                    1- 1413     ;***
                                    1- 1414     ;has an exit
                                    1- 1415     ;functions called:
                                    1- 1416     ;   _setInput
                                    1- 1417     ;   _pwmStop
                                    1- 1418     ;   _setInput
                                    1- 1419     ;   _pwmStop
                                    1- 1420     ;; Starting pCode block
                                    1- 1421     .segment "code"; module=main, function=_gotoSleep
     0000                           1- 1423     _gotoSleep:
                                    1- 1424     ; 2 exit points
                                    1- 1425     	.line	346, "main.c"; 	waitTime = 0;
                                    1- 1426     	BANKSEL	_waitTime
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 02rr                      1- 1427     	CLRR	_waitTime
     0002 02rr                      1- 1428     	CLRR	(_waitTime + 1)
                                    1- 1429     	.line	347, "main.c"; 	setInput();
                                    1- 1430     	MCALL	_setInput
     0003 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1431     	.line	348, "main.c"; 	sleepTime = 0;
                                    1- 1432     	BANKSEL	_sleepTime
     0004 rrrr                      3-  110 m1      .banksel ram_address
     0005 02rr                      1- 1433     	CLRR	_sleepTime
                                    1- 1434     	.line	350, "main.c"; 	pwmStop();
                                    1- 1435     	MCALL	_pwmStop
     0006 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1436     	.line	351, "main.c"; 	AWUCON = 0x60;
     0007 2160                      1- 1437     	MOVIA	0x60
     0008 00rr                      1- 1438     	MOVAR	_AWUCON
                                    1- 1439     	.line	352, "main.c"; 	BWUCON = 0x00;
     0009 02rr                      1- 1440     	CLRR	_BWUCON
                                    1- 1441     	.line	353, "main.c"; 	IOSTB = C_PB3_Input | C_PB1_Input;
     000A 210A                      1- 1442     	MOVIA	0x0a
     000B 000r                      1- 1443     	IOST	_IOSTB
                                    1- 1444     	.line	354, "main.c"; 	PORTA = 0X00;
     000C 02rr                      1- 1445     	CLRR	_PORTA
                                    1- 1446     	.line	355, "main.c"; 	PORTB = 0X00;
     000D 02rr                      1- 1447     	CLRR	_PORTB
                                    1- 1448     	.line	356, "main.c"; 	INTE =  C_INT_PABKey;
     000E 2102                      1- 1449     	MOVIA	0x02
     000F 00rr                      1- 1450     	MOVAR	_INTE
                                    1- 1451     	.line	357, "main.c"; 	PCON =  C_LVR_En | 0x10;	
     0010 2118                      1- 1452     	MOVIA	0x18
     0011 00rr                      1- 1453     	MOVAR	_PCON
                                    1- 1454     	.line	358, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0012 02rr                      1- 1455     	CLRR	_INTF
                                    1- 1456     	.line	359, "main.c"; 	CLRWDT();
     0013 0002                      1- 1457     	clrwdt
                                    1- 1458     	.line	360, "main.c"; 	ENI();
     0014 0004                      1- 1459     	ENI
                                    1- 1460     	.line	361, "main.c"; 	SLEEP();
     0015 0001                      1- 1461     	sleep
                                    1- 1462     	.line	362, "main.c"; 	AWUCON = 0x00;
     0016 02rr                      1- 1463     	CLRR	_AWUCON
                                    1- 1464     	.line	363, "main.c"; 	IOSTA = C_PA7_Input | C_PA6_Input | C_PA5_Input;
     0017 21E0                      1- 1465     	MOVIA	0xe0
     0018 000r                      1- 1466     	IOST	_IOSTA
                                    1- 1467     	.line	364, "main.c"; 	IOSTB = C_PB3_Input;
     0019 2108                      1- 1468     	MOVIA	0x08
     001A 000r                      1- 1469     	IOST	_IOSTB
                                    1- 1470     	.line	365, "main.c"; 	PORTA = 0x00;
     001B 02rr                      1- 1471     	CLRR	_PORTA
                                    1- 1472     	.line	366, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     001C 2101                      1- 1473     	MOVIA	0x01
     001D 00rr                      1- 1474     	MOVAR	_INTE
                                    1- 1475     	.line	367, "main.c"; 	INTF = 0;
     001E 02rr                      1- 1476     	CLRR	_INTF
                                    1- 1477     	.line	369, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En | 0x10;				// Enable WDT ,  Enable LVR
     001F 21B8                      1- 1478     	MOVIA	0xb8
     0020 00rr                      1- 1479     	MOVAR	_PCON
                                    1- 1480     	.line	372, "main.c"; 	}
                                    1- 1481     	RETURN	
     0021 0010                      3-   40 m1      ret
                                    1- 1482     ; exit point of _gotoSleep
                                    1- 1484     ;***
                                    1- 1485     ;  pBlock Stats: dbName = C
                                    1- 1486     ;***
                                    1- 1487     ;has an exit
                                    1- 1488     ;functions called:
                                    1- 1489     ;   _setInput
                                    1- 1490     ;   _setInput
                                    1- 1491     ;; Starting pCode block
                                    1- 1492     .segment "code"; module=main, function=_initSys
     0000                           1- 1494     _initSys:
                                    1- 1495     ; 2 exit points
                                    1- 1496     	.line	315, "main.c"; 	DISI();
     0000 0013                      1- 1497     	DISI
                                    1- 1498     	.line	316, "main.c"; 	IOSTA = C_PA7_Input | C_PA6_Input | C_PA5_Input;
     0001 21E0                      1- 1499     	MOVIA	0xe0
     0002 000r                      1- 1500     	IOST	_IOSTA
                                    1- 1501     	.line	317, "main.c"; 	IOSTB = C_PB3_Input;
     0003 2108                      1- 1502     	MOVIA	0x08
     0004 000r                      1- 1503     	IOST	_IOSTB
                                    1- 1504     	.line	318, "main.c"; 	PORTB = 0x00;
     0005 02rr                      1- 1505     	CLRR	_PORTB
                                    1- 1506     	.line	319, "main.c"; 	PORTA = 0x00;
     0006 02rr                      1- 1507     	CLRR	_PORTA
                                    1- 1508     	.line	320, "main.c"; 	setInput();
                                    1- 1509     	MCALL	_setInput
     0007 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1510     	.line	321, "main.c"; 	APHCON = 0x3F;
     0008 213F                      1- 1511     	MOVIA	0x3f
     0009 000r                      1- 1512     	IOST	_APHCON
                                    1- 1513     	.line	322, "main.c"; 	BPHCON = 0xF7;		//PB3上拉
     000A 21F7                      1- 1514     	MOVIA	0xf7
     000B 00rr                      1- 1515     	MOVAR	_BPHCON
                                    1- 1516     	.line	323, "main.c"; 	ABPLCON = 0xFF;
     000C 21FF                      1- 1517     	MOVIA	0xff
     000D 00rr                      1- 1518     	MOVAR	_ABPLCON
                                    1- 1519     	.line	325, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000E 2101                      1- 1520     	MOVIA	0x01
     000F 00rr                      1- 1521     	MOVAR	_INTE
                                    1- 1522     	.line	327, "main.c"; 	PCON1 = C_TMR0_Dis;
     0010 0200                      1- 1523     	CLRA	
     0011 000r                      1- 1524     	IOST	_PCON1
                                    1- 1525     	.line	329, "main.c"; 	TMR0 = 55;
     0012 2137                      1- 1526     	MOVIA	0x37
     0013 00rr                      1- 1527     	MOVAR	_TMR0
                                    1- 1528     	.line	330, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0014 0200                      1- 1529     	CLRA	
     0015 0003                      1- 1530     	T0MD	
                                    1- 1531     	.line	332, "main.c"; 	PCON1 = C_TMR0_En;
     0016 2101                      1- 1532     	MOVIA	0x01
     0017 000r                      1- 1533     	IOST	_PCON1
                                    1- 1534     	.line	335, "main.c"; 	PCON = C_WDT_En | C_LVR_En | 0x10;				// Enable WDT ,  Enable LVR
     0018 2198                      1- 1535     	MOVIA	0x98
     0019 00rr                      1- 1536     	MOVAR	_PCON
                                    1- 1537     	.line	338, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     001A 2101                      1- 1538     	MOVIA	0x01
     001B 000r                      1- 1539     	IOST	_PCON1
                                    1- 1540     	.line	339, "main.c"; 	ENI();
     001C 0004                      1- 1541     	ENI
                                    1- 1542     	.line	340, "main.c"; 	}
                                    1- 1543     	RETURN	
     001D 0010                      3-   40 m1      ret
                                    1- 1544     ; exit point of _initSys
                                    1- 1546     ;***
                                    1- 1547     ;  pBlock Stats: dbName = C
                                    1- 1548     ;***
                                    1- 1549     ;has an exit
                                    1- 1550     ;functions called:
                                    1- 1551     ;   __gptrget1
                                    1- 1552     ;   _showNubBaiwei
                                    1- 1553     ;   __gptrget1
                                    1- 1554     ;   _showNubShiwei
                                    1- 1555     ;   __gptrget1
                                    1- 1556     ;   _showNubGewei
                                    1- 1557     ;   __gptrget1
                                    1- 1558     ;   _showNubBaiwei
                                    1- 1559     ;   __gptrget1
                                    1- 1560     ;   _showNubShiwei
                                    1- 1561     ;   __gptrget1
                                    1- 1562     ;   _showNubGewei
                                    1- 1563     ;5 compiler assigned registers:
                                    1- 1564     ;   r0x1040
                                    1- 1565     ;   r0x1041
                                    1- 1566     ;   STK01
                                    1- 1567     ;   STK00
                                    1- 1568     ;   r0x1042
                                    1- 1569     ;; Starting pCode block
                                    1- 1570     .segment "code"; module=main, function=_refreshNub
     0000                           1- 1572     _refreshNub:
                                    1- 1573     ; 2 exit points
                                    1- 1574     	.line	307, "main.c"; 	showNubBaiwei(numArray[baiweiNum]);
                                    1- 1575     	BANKSEL	_baiweiNum
     0000 rrrr                      3-  110 m1      .banksel ram_address
     0001 01rr                      1- 1576     	MOVR	_baiweiNum,W
     0002 25rr                      1- 1577     	ADDIA	(_numArray + 0)
                                    1- 1578     	BANKSEL	r0x1040
     0003 rrrr                      3-  110 m1      .banksel ram_address
     0004 00rr                      1- 1579     	MOVAR	r0x1040
     0005 21rr                      1- 1580     	MOVIA	((_numArray + 0) >> 8) & 0xff
     0006 0C03                      1- 1581     	BTRSC	STATUS,0
     0007 2501                      1- 1582     	ADDIA	0x01
                                    1- 1583     	BANKSEL	r0x1041
     0008 rrrr                      3-  110 m1      .banksel ram_address
     0009 00rr                      1- 1584     	MOVAR	r0x1041
                                    1- 1585     	BANKSEL	r0x1040
     000A rrrr                      3-  110 m1      .banksel ram_address
     000B 01rr                      1- 1586     	MOVR	r0x1040,W
     000C 00rr                      1- 1587     	MOVAR	STK01
                                    1- 1588     	BANKSEL	r0x1041
     000D rrrr                      3-  110 m1      .banksel ram_address
     000E 01rr                      1- 1589     	MOVR	r0x1041,W
     000F 00rr                      1- 1590     	MOVAR	STK00
     0010 2100                      1- 1591     	MOVIA	0x00
                                    1- 1592     	MCALL	__gptrget1
     0011 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1593     ;;103	MOVAR	r0x1042
                                    1- 1594     	MCALL	_showNubBaiwei
     0012 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1595     	.line	308, "main.c"; 	showNubShiwei(numArray[shiweiNum]);
                                    1- 1596     	BANKSEL	_shiweiNum
     0013 rrrr                      3-  110 m1      .banksel ram_address
     0014 01rr                      1- 1597     	MOVR	_shiweiNum,W
     0015 25rr                      1- 1598     	ADDIA	(_numArray + 0)
                                    1- 1599     	BANKSEL	r0x1040
     0016 rrrr                      3-  110 m1      .banksel ram_address
     0017 00rr                      1- 1600     	MOVAR	r0x1040
     0018 21rr                      1- 1601     	MOVIA	((_numArray + 0) >> 8) & 0xff
     0019 0C03                      1- 1602     	BTRSC	STATUS,0
     001A 2501                      1- 1603     	ADDIA	0x01
                                    1- 1604     	BANKSEL	r0x1041
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 00rr                      1- 1605     	MOVAR	r0x1041
                                    1- 1606     	BANKSEL	r0x1040
     001D rrrr                      3-  110 m1      .banksel ram_address
     001E 01rr                      1- 1607     	MOVR	r0x1040,W
     001F 00rr                      1- 1608     	MOVAR	STK01
                                    1- 1609     	BANKSEL	r0x1041
     0020 rrrr                      3-  110 m1      .banksel ram_address
     0021 01rr                      1- 1610     	MOVR	r0x1041,W
     0022 00rr                      1- 1611     	MOVAR	STK00
     0023 2100                      1- 1612     	MOVIA	0x00
                                    1- 1613     	MCALL	__gptrget1
     0024 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1614     ;;102	MOVAR	r0x1042
                                    1- 1615     	MCALL	_showNubShiwei
     0025 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1616     	.line	309, "main.c"; 	showNubGewei(numArray[geweiNum]);
                                    1- 1617     	BANKSEL	_geweiNum
     0026 rrrr                      3-  110 m1      .banksel ram_address
     0027 01rr                      1- 1618     	MOVR	_geweiNum,W
     0028 25rr                      1- 1619     	ADDIA	(_numArray + 0)
                                    1- 1620     	BANKSEL	r0x1040
     0029 rrrr                      3-  110 m1      .banksel ram_address
     002A 00rr                      1- 1621     	MOVAR	r0x1040
     002B 21rr                      1- 1622     	MOVIA	((_numArray + 0) >> 8) & 0xff
     002C 0C03                      1- 1623     	BTRSC	STATUS,0
     002D 2501                      1- 1624     	ADDIA	0x01
                                    1- 1625     	BANKSEL	r0x1041
     002E rrrr                      3-  110 m1      .banksel ram_address
     002F 00rr                      1- 1626     	MOVAR	r0x1041
                                    1- 1627     	BANKSEL	r0x1040
     0030 rrrr                      3-  110 m1      .banksel ram_address
     0031 01rr                      1- 1628     	MOVR	r0x1040,W
     0032 00rr                      1- 1629     	MOVAR	STK01
                                    1- 1630     	BANKSEL	r0x1041
     0033 rrrr                      3-  110 m1      .banksel ram_address
     0034 01rr                      1- 1631     	MOVR	r0x1041,W
     0035 00rr                      1- 1632     	MOVAR	STK00
     0036 2100                      1- 1633     	MOVIA	0x00
                                    1- 1634     	MCALL	__gptrget1
     0037 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1635     ;;2	MOVAR	r0x1042
                                    1- 1636     	MCALL	_showNubGewei
     0038 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1637     	.line	310, "main.c"; 	}
                                    1- 1638     	RETURN	
     0039 0010                      3-   40 m1      ret
                                    1- 1639     ; exit point of _refreshNub
                                    1- 1641     ;***
                                    1- 1642     ;  pBlock Stats: dbName = C
                                    1- 1643     ;***
                                    1- 1644     ;has an exit
                                    1- 1645     ;2 compiler assigned registers:
                                    1- 1646     ;   r0x1043
                                    1- 1647     ;   r0x1044
                                    1- 1648     ;; Starting pCode block
                                    1- 1649     .segment "code"; module=main, function=_checkIRKey
     0000                           1- 1651     _checkIRKey:
                                    1- 1652     ; 2 exit points
                                    1- 1653     	.line	246, "main.c"; 	if(getbit(PORTB, 3) == 0)
     0000 01rr                      1- 1654     	MOVR	_PORTB,W
     0001 2208                      1- 1655     	ANDIA	0x08
     0002 0903                      1- 1656     	BTRSS	STATUS,2
     0003 2101                      1- 1657     	MOVIA	0x01
                                    1- 1658     	BANKSEL	r0x1043
     0004 rrrr                      3-  110 m1      .banksel ram_address
     0005 00rr                      1- 1659     	MOVAR	r0x1043
     0006 01rr                      1- 1660     	MOVR	r0x1043,W
     0007 0903                      1- 1661     	BTRSS	STATUS,2
                                    1- 1662     	MGOTO	_00005_DS_
     0008 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1663     	.line	248, "main.c"; 	revCount++;		//检测到遮挡了
                                    1- 1664     	BANKSEL	_revCount
     0009 rrrr                      3-  110 m1      .banksel ram_address
     000A 05rr                      1- 1665     	INCR	_revCount,F
     000B                           1- 1666     _00005_DS_:
                                    1- 1667     	.line	251, "main.c"; 	if(checkCount > 10 && irStep)
     000B 210B                      1- 1668     	MOVIA	0x0b
                                    1- 1669     	BANKSEL	_checkCount
     000C rrrr                      3-  110 m1      .banksel ram_address
     000D 04rr                      1- 1670     	SUBAR	_checkCount,W
     000E 0803                      1- 1671     	BTRSS	STATUS,0
                                    1- 1672     	MGOTO	_00221_DS_
     000F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1673     	BANKSEL	_irStep
     0010 rrrr                      3-  110 m1      .banksel ram_address
     0011 01rr                      1- 1674     	MOVR	_irStep,W
     0012 0D03                      1- 1675     	BTRSC	STATUS,2
                                    1- 1676     	MGOTO	_00221_DS_
     0013 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1677     	.line	253, "main.c"; 	sendFlag = 0;
                                    1- 1678     	BANKSEL	_sendFlag
     0014 rrrr                      3-  110 m1      .banksel ram_address
     0015 02rr                      1- 1679     	CLRR	_sendFlag
                                    1- 1680     	MGOTO	_00222_DS_
     0016 3rrr                      3-   63 m1      LGOTO rom_address
     0017                           1- 1681     _00221_DS_:
                                    1- 1682     	.line	257, "main.c"; 	sendFlag = 1;	//未检测到遮挡
     0017 2101                      1- 1683     	MOVIA	0x01
                                    1- 1684     	BANKSEL	_sendFlag
     0018 rrrr                      3-  110 m1      .banksel ram_address
     0019 00rr                      1- 1685     	MOVAR	_sendFlag
     001A                           1- 1686     _00222_DS_:
                                    1- 1687     	.line	260, "main.c"; 	if(++checkCount >= 20)
                                    1- 1688     	BANKSEL	_checkCount
     001A rrrr                      3-  110 m1      .banksel ram_address
     001B 05rr                      1- 1689     	INCR	_checkCount,F
                                    1- 1690     ;;unsigned compare: left < lit (0x14=20), size=1
     001C 2114                      1- 1691     	MOVIA	0x14
     001D 04rr                      1- 1692     	SUBAR	_checkCount,W
     001E 0803                      1- 1693     	BTRSS	STATUS,0
                                    1- 1694     	MGOTO	_00242_DS_
     001F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1695     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1696     ;;unsigned compare: left >= lit (0x3=3), size=1
                                    1- 1697     	.line	262, "main.c"; 	if(revCount > 2)
     0020 2103                      1- 1698     	MOVIA	0x03
                                    1- 1699     	BANKSEL	_revCount
     0021 rrrr                      3-  110 m1      .banksel ram_address
     0022 04rr                      1- 1700     	SUBAR	_revCount,W
     0023 0803                      1- 1701     	BTRSS	STATUS,0
                                    1- 1702     	MGOTO	_00238_DS_
     0024 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1703     	.line	264, "main.c"; 	if(irStep == 0 && waitTime == 0)
                                    1- 1704     	BANKSEL	_irStep
     0025 rrrr                      3-  110 m1      .banksel ram_address
     0026 01rr                      1- 1705     	MOVR	_irStep,W
     0027 0903                      1- 1706     	BTRSS	STATUS,2
                                    1- 1707     	MGOTO	_00007_DS_
     0028 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1708     	BANKSEL	_waitTime
     0029 rrrr                      3-  110 m1      .banksel ram_address
     002A 01rr                      1- 1709     	MOVR	_waitTime,W
     002B 11rr                      1- 1710     	IORAR	(_waitTime + 1),W
     002C 0903                      1- 1711     	BTRSS	STATUS,2
                                    1- 1712     	MGOTO	_00007_DS_
     002D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1713     	.line	266, "main.c"; 	irStep = 1;		//检测到遮挡了
     002E 2101                      1- 1714     	MOVIA	0x01
                                    1- 1715     	BANKSEL	_irStep
     002F rrrr                      3-  110 m1      .banksel ram_address
     0030 00rr                      1- 1716     	MOVAR	_irStep
                                    1- 1717     	.line	268, "main.c"; 	if(workStep == 1)
                                    1- 1718     	BANKSEL	_workStep
     0031 rrrr                      3-  110 m1      .banksel ram_address
     0032 01rr                      1- 1719     	MOVR	_workStep,W
     0033 2401                      1- 1720     	XORIA	0x01
     0034 0903                      1- 1721     	BTRSS	STATUS,2
                                    1- 1722     	MGOTO	_00230_DS_
     0035 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1723     	.line	270, "main.c"; 	workTime = 50;
     0036 2132                      1- 1724     	MOVIA	0x32
                                    1- 1725     	BANKSEL	_workTime
     0037 rrrr                      3-  110 m1      .banksel ram_address
     0038 00rr                      1- 1726     	MOVAR	_workTime
                                    1- 1727     	MGOTO	_00231_DS_
     0039 3rrr                      3-   63 m1      LGOTO rom_address
     003A                           1- 1728     _00230_DS_:
                                    1- 1729     	.line	272, "main.c"; 	else if(workStep == 2)
                                    1- 1730     	BANKSEL	_workStep
     003A rrrr                      3-  110 m1      .banksel ram_address
     003B 01rr                      1- 1731     	MOVR	_workStep,W
     003C 2402                      1- 1732     	XORIA	0x02
     003D 0903                      1- 1733     	BTRSS	STATUS,2
                                    1- 1734     	MGOTO	_00227_DS_
     003E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1735     	.line	274, "main.c"; 	workTime = 100;
     003F 2164                      1- 1736     	MOVIA	0x64
                                    1- 1737     	BANKSEL	_workTime
     0040 rrrr                      3-  110 m1      .banksel ram_address
     0041 00rr                      1- 1738     	MOVAR	_workTime
                                    1- 1739     	MGOTO	_00231_DS_
     0042 3rrr                      3-   63 m1      LGOTO rom_address
     0043                           1- 1740     _00227_DS_:
                                    1- 1741     	.line	276, "main.c"; 	else if(workStep == 3)
                                    1- 1742     	BANKSEL	_workStep
     0043 rrrr                      3-  110 m1      .banksel ram_address
     0044 01rr                      1- 1743     	MOVR	_workStep,W
     0045 2403                      1- 1744     	XORIA	0x03
     0046 0903                      1- 1745     	BTRSS	STATUS,2
                                    1- 1746     	MGOTO	_00231_DS_
     0047 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1747     	.line	278, "main.c"; 	workTime = 150;
     0048 2196                      1- 1748     	MOVIA	0x96
                                    1- 1749     	BANKSEL	_workTime
     0049 rrrr                      3-  110 m1      .banksel ram_address
     004A 00rr                      1- 1750     	MOVAR	_workTime
     004B                           1- 1751     _00231_DS_:
                                    1- 1752     	.line	280, "main.c"; 	waitTime = workTime + 300;
                                    1- 1753     	BANKSEL	_workTime
     004B rrrr                      3-  110 m1      .banksel ram_address
     004C 01rr                      1- 1754     	MOVR	_workTime,W
                                    1- 1755     	BANKSEL	r0x1043
     004D rrrr                      3-  110 m1      .banksel ram_address
     004E 00rr                      1- 1756     	MOVAR	r0x1043
                                    1- 1757     	BANKSEL	r0x1044
     004F rrrr                      3-  110 m1      .banksel ram_address
     0050 02rr                      1- 1758     	CLRR	r0x1044
     0051 212C                      1- 1759     	MOVIA	0x2c
                                    1- 1760     	BANKSEL	r0x1043
     0052 rrrr                      3-  110 m1      .banksel ram_address
     0053 03rr                      1- 1761     	ADDAR	r0x1043,W
                                    1- 1762     	BANKSEL	_waitTime
     0054 rrrr                      3-  110 m1      .banksel ram_address
     0055 00rr                      1- 1763     	MOVAR	_waitTime
     0056 2101                      1- 1764     	MOVIA	0x01
     0057 00rr                      1- 1765     	MOVAR	(_waitTime + 1)
     0058 2100                      1- 1766     	MOVIA	0x00
     0059 0803                      1- 1767     	BTRSS	STATUS,0
                                    1- 1768     	MGOTO	_00006_DS_
     005A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1769     	BANKSEL	r0x1044
     005B rrrr                      3-  110 m1      .banksel ram_address
     005C 05rr                      1- 1770     	INCR	r0x1044,W
     005D 0D03                      1- 1771     	BTRSC	STATUS,2
                                    1- 1772     	MGOTO	_00007_DS_
     005E 3rrr                      3-   63 m1      LGOTO rom_address
     005F                           1- 1773     _00006_DS_:
                                    1- 1774     	BANKSEL	_waitTime
     005F rrrr                      3-  110 m1      .banksel ram_address
     0060 03rr                      1- 1775     	ADDAR	(_waitTime + 1),F
     0061                           1- 1776     _00007_DS_:
                                    1- 1777     	.line	282, "main.c"; 	revZeroCount = 0;		//重置
                                    1- 1778     	BANKSEL	_revZeroCount
     0061 rrrr                      3-  110 m1      .banksel ram_address
     0062 02rr                      1- 1779     	CLRR	_revZeroCount
                                    1- 1780     	MGOTO	_00239_DS_
     0063 3rrr                      3-   63 m1      LGOTO rom_address
     0064                           1- 1781     _00238_DS_:
                                    1- 1782     	.line	286, "main.c"; 	if(++revZeroCount > 1)
                                    1- 1783     	BANKSEL	_revZeroCount
     0064 rrrr                      3-  110 m1      .banksel ram_address
     0065 05rr                      1- 1784     	INCR	_revZeroCount,F
                                    1- 1785     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1786     ;;unsigned compare: left >= lit (0x2=2), size=1
     0066 2102                      1- 1787     	MOVIA	0x02
     0067 04rr                      1- 1788     	SUBAR	_revZeroCount,W
     0068 0803                      1- 1789     	BTRSS	STATUS,0
                                    1- 1790     	MGOTO	_00239_DS_
     0069 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1791     	.line	288, "main.c"; 	revZeroCount = 1;
     006A 2101                      1- 1792     	MOVIA	0x01
     006B 00rr                      1- 1793     	MOVAR	_revZeroCount
                                    1- 1794     	.line	289, "main.c"; 	irStep = 0;			//移开了
                                    1- 1795     	BANKSEL	_irStep
     006C rrrr                      3-  110 m1      .banksel ram_address
     006D 02rr                      1- 1796     	CLRR	_irStep
                                    1- 1797     	.line	290, "main.c"; 	workTime = 0;
                                    1- 1798     	BANKSEL	_workTime
     006E rrrr                      3-  110 m1      .banksel ram_address
     006F 02rr                      1- 1799     	CLRR	_workTime
     0070                           1- 1800     _00239_DS_:
                                    1- 1801     	.line	295, "main.c"; 	sendFlag = 1;		//重置检测条件
     0070 2101                      1- 1802     	MOVIA	0x01
                                    1- 1803     	BANKSEL	_sendFlag
     0071 rrrr                      3-  110 m1      .banksel ram_address
     0072 00rr                      1- 1804     	MOVAR	_sendFlag
                                    1- 1805     	.line	296, "main.c"; 	checkCount = 0;
                                    1- 1806     	BANKSEL	_checkCount
     0073 rrrr                      3-  110 m1      .banksel ram_address
     0074 02rr                      1- 1807     	CLRR	_checkCount
                                    1- 1808     	.line	297, "main.c"; 	revCount = 0;
                                    1- 1809     	BANKSEL	_revCount
     0075 rrrr                      3-  110 m1      .banksel ram_address
     0076 02rr                      1- 1810     	CLRR	_revCount
     0077                           1- 1811     _00242_DS_:
                                    1- 1812     	.line	300, "main.c"; 	}
                                    1- 1813     	RETURN	
     0077 0010                      3-   40 m1      ret
                                    1- 1814     ; exit point of _checkIRKey
                                    1- 1816     ;***
                                    1- 1817     ;  pBlock Stats: dbName = C
                                    1- 1818     ;***
                                    1- 1819     ;has an exit
                                    1- 1820     ;functions called:
                                    1- 1821     ;   _pwmStop
                                    1- 1822     ;   __divuchar
                                    1- 1823     ;   __moduchar
                                    1- 1824     ;   _pwmInit
                                    1- 1825     ;   _pwmStop
                                    1- 1826     ;   __divuchar
                                    1- 1827     ;   __moduchar
                                    1- 1828     ;   _gotoSleep
                                    1- 1829     ;   __moduint
                                    1- 1830     ;   _pwmStop
                                    1- 1831     ;   __divuchar
                                    1- 1832     ;   __moduchar
                                    1- 1833     ;   _pwmInit
                                    1- 1834     ;   _pwmStop
                                    1- 1835     ;   __divuchar
                                    1- 1836     ;   __moduchar
                                    1- 1837     ;   _gotoSleep
                                    1- 1838     ;   __moduint
                                    1- 1839     ;5 compiler assigned registers:
                                    1- 1840     ;   STK00
                                    1- 1841     ;   STK02
                                    1- 1842     ;   STK01
                                    1- 1843     ;   r0x1045
                                    1- 1844     ;   r0x1046
                                    1- 1845     ;; Starting pCode block
                                    1- 1846     .segment "code"; module=main, function=_chrgCtr
     0000                           1- 1848     _chrgCtr:
                                    1- 1849     ; 2 exit points
                                    1- 1850     	.line	148, "main.c"; 	if(0x20 & PORTA)
     0000 0Arr                      1- 1851     	BTRSS	_PORTA,5
                                    1- 1852     	MGOTO	_00175_DS_
     0001 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1853     	.line	151, "main.c"; 	pwmStop();
                                    1- 1854     	MCALL	_pwmStop
     0002 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1855     	.line	152, "main.c"; 	showFlag = 1;
     0003 2101                      1- 1856     	MOVIA	0x01
                                    1- 1857     	BANKSEL	_showFlag
     0004 rrrr                      3-  110 m1      .banksel ram_address
     0005 00rr                      1- 1858     	MOVAR	_showFlag
                                    1- 1859     	.line	153, "main.c"; 	if(0x80 & PORTA || fullFlag)
     0006 0Frr                      1- 1860     	BTRSC	_PORTA,7
                                    1- 1861     	MGOTO	_00150_DS_
     0007 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1862     	BANKSEL	_fullFlag
     0008 rrrr                      3-  110 m1      .banksel ram_address
     0009 01rr                      1- 1863     	MOVR	_fullFlag,W
     000A 0D03                      1- 1864     	BTRSC	STATUS,2
                                    1- 1865     	MGOTO	_00151_DS_
     000B 3rrr                      3-   63 m1      LGOTO rom_address
     000C                           1- 1866     _00150_DS_:
                                    1- 1867     	.line	155, "main.c"; 	fullFlag = 1;
     000C 2101                      1- 1868     	MOVIA	0x01
                                    1- 1869     	BANKSEL	_fullFlag
     000D rrrr                      3-  110 m1      .banksel ram_address
     000E 00rr                      1- 1870     	MOVAR	_fullFlag
                                    1- 1871     	.line	157, "main.c"; 	baiweiNum = 1;
                                    1- 1872     	BANKSEL	_baiweiNum
     000F rrrr                      3-  110 m1      .banksel ram_address
     0010 00rr                      1- 1873     	MOVAR	_baiweiNum
                                    1- 1874     	.line	158, "main.c"; 	shiweiNum = geweiNum = 0;
                                    1- 1875     	BANKSEL	_geweiNum
     0011 rrrr                      3-  110 m1      .banksel ram_address
     0012 02rr                      1- 1876     	CLRR	_geweiNum
                                    1- 1877     	BANKSEL	_shiweiNum
     0013 rrrr                      3-  110 m1      .banksel ram_address
     0014 02rr                      1- 1878     	CLRR	_shiweiNum
                                    1- 1879     	MGOTO	_00177_DS_
     0015 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1880     ;;unsigned compare: left < lit (0x63=99), size=1
     0016                           1- 1881     _00151_DS_:
                                    1- 1882     	.line	163, "main.c"; 	if(pwStep >= 99)
     0016 2163                      1- 1883     	MOVIA	0x63
                                    1- 1884     	BANKSEL	_pwStep
     0017 rrrr                      3-  110 m1      .banksel ram_address
     0018 04rr                      1- 1885     	SUBAR	_pwStep,W
     0019 0803                      1- 1886     	BTRSS	STATUS,0
                                    1- 1887     	MGOTO	_00148_DS_
     001A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1888     	.line	165, "main.c"; 	baiweiNum = 0;
                                    1- 1889     	BANKSEL	_baiweiNum
     001B rrrr                      3-  110 m1      .banksel ram_address
     001C 02rr                      1- 1890     	CLRR	_baiweiNum
                                    1- 1891     	.line	166, "main.c"; 	shiweiNum = 9;
     001D 2109                      1- 1892     	MOVIA	0x09
                                    1- 1893     	BANKSEL	_shiweiNum
     001E rrrr                      3-  110 m1      .banksel ram_address
     001F 00rr                      1- 1894     	MOVAR	_shiweiNum
                                    1- 1895     	.line	167, "main.c"; 	geweiNum = 9;
                                    1- 1896     	BANKSEL	_geweiNum
     0020 rrrr                      3-  110 m1      .banksel ram_address
     0021 00rr                      1- 1897     	MOVAR	_geweiNum
                                    1- 1898     	MGOTO	_00177_DS_
     0022 3rrr                      3-   63 m1      LGOTO rom_address
     0023                           1- 1899     _00148_DS_:
                                    1- 1900     	.line	171, "main.c"; 	baiweiNum = 0;
                                    1- 1901     	BANKSEL	_baiweiNum
     0023 rrrr                      3-  110 m1      .banksel ram_address
     0024 02rr                      1- 1902     	CLRR	_baiweiNum
                                    1- 1903     	.line	172, "main.c"; 	shiweiNum = pwStep/10;
     0025 210A                      1- 1904     	MOVIA	0x0a
     0026 00rr                      1- 1905     	MOVAR	STK00
                                    1- 1906     	BANKSEL	_pwStep
     0027 rrrr                      3-  110 m1      .banksel ram_address
     0028 01rr                      1- 1907     	MOVR	_pwStep,W
                                    1- 1908     	MCALL	__divuchar
     0029 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1909     	BANKSEL	_shiweiNum
     002A rrrr                      3-  110 m1      .banksel ram_address
     002B 00rr                      1- 1910     	MOVAR	_shiweiNum
                                    1- 1911     	.line	173, "main.c"; 	geweiNum = pwStep%10;
     002C 210A                      1- 1912     	MOVIA	0x0a
     002D 00rr                      1- 1913     	MOVAR	STK00
                                    1- 1914     	BANKSEL	_pwStep
     002E rrrr                      3-  110 m1      .banksel ram_address
     002F 01rr                      1- 1915     	MOVR	_pwStep,W
                                    1- 1916     	MCALL	__moduchar
     0030 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1917     	BANKSEL	_geweiNum
     0031 rrrr                      3-  110 m1      .banksel ram_address
     0032 00rr                      1- 1918     	MOVAR	_geweiNum
                                    1- 1919     	MGOTO	_00177_DS_
     0033 3rrr                      3-   63 m1      LGOTO rom_address
     0034                           1- 1920     _00175_DS_:
                                    1- 1921     	.line	180, "main.c"; 	fullFlag = 0;
                                    1- 1922     	BANKSEL	_fullFlag
     0034 rrrr                      3-  110 m1      .banksel ram_address
     0035 02rr                      1- 1923     	CLRR	_fullFlag
                                    1- 1924     	.line	181, "main.c"; 	if(workTime > 0)
                                    1- 1925     	BANKSEL	_workTime
     0036 rrrr                      3-  110 m1      .banksel ram_address
     0037 01rr                      1- 1926     	MOVR	_workTime,W
     0038 0D03                      1- 1927     	BTRSC	STATUS,2
                                    1- 1928     	MGOTO	_00155_DS_
     0039 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1929     	.line	183, "main.c"; 	pwmInit();
                                    1- 1930     	MCALL	_pwmInit
     003A 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1931     	.line	184, "main.c"; 	workTime--;
                                    1- 1932     	BANKSEL	_workTime
     003B rrrr                      3-  110 m1      .banksel ram_address
     003C 06rr                      1- 1933     	DECR	_workTime,F
                                    1- 1934     	MGOTO	_00156_DS_
     003D 3rrr                      3-   63 m1      LGOTO rom_address
     003E                           1- 1935     _00155_DS_:
                                    1- 1936     	.line	188, "main.c"; 	pwmStop();
                                    1- 1937     	MCALL	_pwmStop
     003E 2rrr                      3-   66 m1      LCALL rom_address
     003F                           1- 1938     _00156_DS_:
                                    1- 1939     	.line	190, "main.c"; 	if(pwShowTime)
                                    1- 1940     	BANKSEL	_pwShowTime
     003F rrrr                      3-  110 m1      .banksel ram_address
     0040 01rr                      1- 1941     	MOVR	_pwShowTime,W
     0041 0D03                      1- 1942     	BTRSC	STATUS,2
                                    1- 1943     	MGOTO	_00172_DS_
     0042 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1944     	.line	192, "main.c"; 	showFlag = 1;
     0043 2101                      1- 1945     	MOVIA	0x01
                                    1- 1946     	BANKSEL	_showFlag
     0044 rrrr                      3-  110 m1      .banksel ram_address
     0045 00rr                      1- 1947     	MOVAR	_showFlag
                                    1- 1948     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1949     ;;unsigned compare: left >= lit (0x64=100), size=1
                                    1- 1950     	.line	193, "main.c"; 	if(pwStep > 99)
     0046 2164                      1- 1951     	MOVIA	0x64
                                    1- 1952     	BANKSEL	_pwStep
     0047 rrrr                      3-  110 m1      .banksel ram_address
     0048 04rr                      1- 1953     	SUBAR	_pwStep,W
     0049 0803                      1- 1954     	BTRSS	STATUS,0
                                    1- 1955     	MGOTO	_00158_DS_
     004A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1956     	.line	195, "main.c"; 	baiweiNum = 1;
     004B 2101                      1- 1957     	MOVIA	0x01
                                    1- 1958     	BANKSEL	_baiweiNum
     004C rrrr                      3-  110 m1      .banksel ram_address
     004D 00rr                      1- 1959     	MOVAR	_baiweiNum
                                    1- 1960     	.line	196, "main.c"; 	shiweiNum = geweiNum = 0;
                                    1- 1961     	BANKSEL	_geweiNum
     004E rrrr                      3-  110 m1      .banksel ram_address
     004F 02rr                      1- 1962     	CLRR	_geweiNum
                                    1- 1963     	BANKSEL	_shiweiNum
     0050 rrrr                      3-  110 m1      .banksel ram_address
     0051 02rr                      1- 1964     	CLRR	_shiweiNum
                                    1- 1965     	MGOTO	_00177_DS_
     0052 3rrr                      3-   63 m1      LGOTO rom_address
     0053                           1- 1966     _00158_DS_:
                                    1- 1967     	.line	200, "main.c"; 	baiweiNum = 0;
                                    1- 1968     	BANKSEL	_baiweiNum
     0053 rrrr                      3-  110 m1      .banksel ram_address
     0054 02rr                      1- 1969     	CLRR	_baiweiNum
                                    1- 1970     	.line	201, "main.c"; 	shiweiNum = pwStep/10;
     0055 210A                      1- 1971     	MOVIA	0x0a
     0056 00rr                      1- 1972     	MOVAR	STK00
                                    1- 1973     	BANKSEL	_pwStep
     0057 rrrr                      3-  110 m1      .banksel ram_address
     0058 01rr                      1- 1974     	MOVR	_pwStep,W
                                    1- 1975     	MCALL	__divuchar
     0059 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1976     	BANKSEL	_shiweiNum
     005A rrrr                      3-  110 m1      .banksel ram_address
     005B 00rr                      1- 1977     	MOVAR	_shiweiNum
                                    1- 1978     	.line	202, "main.c"; 	geweiNum = pwStep%10;
     005C 210A                      1- 1979     	MOVIA	0x0a
     005D 00rr                      1- 1980     	MOVAR	STK00
                                    1- 1981     	BANKSEL	_pwStep
     005E rrrr                      3-  110 m1      .banksel ram_address
     005F 01rr                      1- 1982     	MOVR	_pwStep,W
                                    1- 1983     	MCALL	__moduchar
     0060 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 1984     	BANKSEL	_geweiNum
     0061 rrrr                      3-  110 m1      .banksel ram_address
     0062 00rr                      1- 1985     	MOVAR	_geweiNum
                                    1- 1986     	MGOTO	_00177_DS_
     0063 3rrr                      3-   63 m1      LGOTO rom_address
     0064                           1- 1987     _00172_DS_:
                                    1- 1988     	.line	205, "main.c"; 	else if(stepShowTime)
                                    1- 1989     	BANKSEL	_stepShowTime
     0064 rrrr                      3-  110 m1      .banksel ram_address
     0065 01rr                      1- 1990     	MOVR	_stepShowTime,W
     0066 0D03                      1- 1991     	BTRSC	STATUS,2
                                    1- 1992     	MGOTO	_00169_DS_
     0067 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1993     	.line	207, "main.c"; 	showFlag = 1;
     0068 2101                      1- 1994     	MOVIA	0x01
                                    1- 1995     	BANKSEL	_showFlag
     0069 rrrr                      3-  110 m1      .banksel ram_address
     006A 00rr                      1- 1996     	MOVAR	_showFlag
                                    1- 1997     	.line	208, "main.c"; 	baiweiNum = shiweiNum = 0;
                                    1- 1998     	BANKSEL	_shiweiNum
     006B rrrr                      3-  110 m1      .banksel ram_address
     006C 02rr                      1- 1999     	CLRR	_shiweiNum
                                    1- 2000     	BANKSEL	_baiweiNum
     006D rrrr                      3-  110 m1      .banksel ram_address
     006E 02rr                      1- 2001     	CLRR	_baiweiNum
                                    1- 2002     	.line	209, "main.c"; 	geweiNum = workStep;
                                    1- 2003     	BANKSEL	_workStep
     006F rrrr                      3-  110 m1      .banksel ram_address
     0070 01rr                      1- 2004     	MOVR	_workStep,W
                                    1- 2005     	BANKSEL	_geweiNum
     0071 rrrr                      3-  110 m1      .banksel ram_address
     0072 00rr                      1- 2006     	MOVAR	_geweiNum
                                    1- 2007     	MGOTO	_00177_DS_
     0073 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 2008     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 2009     ;;unsigned compare: left >= lit (0x6=6), size=1
     0074                           1- 2010     _00169_DS_:
                                    1- 2011     	.line	213, "main.c"; 	if(pwStep <= 5)
     0074 2106                      1- 2012     	MOVIA	0x06
                                    1- 2013     	BANKSEL	_pwStep
     0075 rrrr                      3-  110 m1      .banksel ram_address
     0076 04rr                      1- 2014     	SUBAR	_pwStep,W
     0077 0C03                      1- 2015     	BTRSC	STATUS,0
                                    1- 2016     	MGOTO	_00166_DS_
     0078 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 2017     	.line	215, "main.c"; 	showFlag = 1;
     0079 2101                      1- 2018     	MOVIA	0x01
                                    1- 2019     	BANKSEL	_showFlag
     007A rrrr                      3-  110 m1      .banksel ram_address
     007B 00rr                      1- 2020     	MOVAR	_showFlag
                                    1- 2021     	.line	216, "main.c"; 	if(++shanTime > 500)			//电量不足闪灯
                                    1- 2022     	BANKSEL	_shanTime
     007C rrrr                      3-  110 m1      .banksel ram_address
     007D 05rr                      1- 2023     	INCR	_shanTime,F
     007E 0D03                      1- 2024     	BTRSC	STATUS,2
     007F 05rr                      1- 2025     	INCR	(_shanTime + 1),F
                                    1- 2026     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 2027     ;;unsigned compare: left >= lit (0x1F5=501), size=2
     0080 2101                      1- 2028     	MOVIA	0x01
     0081 04rr                      1- 2029     	SUBAR	(_shanTime + 1),W
     0082 0903                      1- 2030     	BTRSS	STATUS,2
                                    1- 2031     	MGOTO	_00212_DS_
     0083 3rrr                      3-   63 m1      LGOTO rom_address
     0084 21F5                      1- 2032     	MOVIA	0xf5
     0085 04rr                      1- 2033     	SUBAR	_shanTime,W
     0086                           1- 2034     _00212_DS_:
     0086 0803                      1- 2035     	BTRSS	STATUS,0
                                    1- 2036     	MGOTO	_00161_DS_
     0087 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 2037     	.line	218, "main.c"; 	shanTime = 0;
                                    1- 2038     	BANKSEL	_shanTime
     0088 rrrr                      3-  110 m1      .banksel ram_address
     0089 02rr                      1- 2039     	CLRR	_shanTime
     008A 02rr                      1- 2040     	CLRR	(_shanTime + 1)
                                    1- 2041     	.line	219, "main.c"; 	showFlag = 0;
                                    1- 2042     	BANKSEL	_showFlag
     008B rrrr                      3-  110 m1      .banksel ram_address
     008C 02rr                      1- 2043     	CLRR	_showFlag
                                    1- 2044     	.line	220, "main.c"; 	gotoSleep();
                                    1- 2045     	MCALL	_gotoSleep
     008D 2rrr                      3-   66 m1      LCALL rom_address
     008E                           1- 2046     _00161_DS_:
                                    1- 2047     	.line	222, "main.c"; 	if(shanTime % 100 < 50)
     008E 2164                      1- 2048     	MOVIA	0x64
     008F 00rr                      1- 2049     	MOVAR	STK02
     0090 2100                      1- 2050     	MOVIA	0x00
     0091 00rr                      1- 2051     	MOVAR	STK01
                                    1- 2052     	BANKSEL	_shanTime
     0092 rrrr                      3-  110 m1      .banksel ram_address
     0093 01rr                      1- 2053     	MOVR	_shanTime,W
     0094 00rr                      1- 2054     	MOVAR	STK00
     0095 01rr                      1- 2055     	MOVR	(_shanTime + 1),W
                                    1- 2056     	MCALL	__moduint
     0096 2rrr                      3-   66 m1      LCALL rom_address
                                    1- 2057     	BANKSEL	r0x1045
     0097 rrrr                      3-  110 m1      .banksel ram_address
     0098 00rr                      1- 2058     	MOVAR	r0x1045
     0099 01rr                      1- 2059     	MOVR	STK00,W
                                    1- 2060     	BANKSEL	r0x1046
     009A rrrr                      3-  110 m1      .banksel ram_address
     009B 00rr                      1- 2061     	MOVAR	r0x1046
                                    1- 2062     ;;unsigned compare: left < lit (0x32=50), size=2
     009C 2100                      1- 2063     	MOVIA	0x00
                                    1- 2064     	BANKSEL	r0x1045
     009D rrrr                      3-  110 m1      .banksel ram_address
     009E 04rr                      1- 2065     	SUBAR	r0x1045,W
     009F 0903                      1- 2066     	BTRSS	STATUS,2
                                    1- 2067     	MGOTO	_00213_DS_
     00A0 3rrr                      3-   63 m1      LGOTO rom_address
     00A1 2132                      1- 2068     	MOVIA	0x32
                                    1- 2069     	BANKSEL	r0x1046
     00A2 rrrr                      3-  110 m1      .banksel ram_address
     00A3 04rr                      1- 2070     	SUBAR	r0x1046,W
     00A4                           1- 2071     _00213_DS_:
     00A4 0C03                      1- 2072     	BTRSC	STATUS,0
                                    1- 2073     	MGOTO	_00163_DS_
     00A5 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 2074     	.line	224, "main.c"; 	showFlag = 1;
     00A6 2101                      1- 2075     	MOVIA	0x01
                                    1- 2076     	BANKSEL	_showFlag
     00A7 rrrr                      3-  110 m1      .banksel ram_address
     00A8 00rr                      1- 2077     	MOVAR	_showFlag
                                    1- 2078     	.line	225, "main.c"; 	baiweiNum = 0;
                                    1- 2079     	BANKSEL	_baiweiNum
     00A9 rrrr                      3-  110 m1      .banksel ram_address
     00AA 02rr                      1- 2080     	CLRR	_baiweiNum
                                    1- 2081     	.line	226, "main.c"; 	shiweiNum = 0;
                                    1- 2082     	BANKSEL	_shiweiNum
     00AB rrrr                      3-  110 m1      .banksel ram_address
     00AC 02rr                      1- 2083     	CLRR	_shiweiNum
                                    1- 2084     	.line	227, "main.c"; 	geweiNum = pwStep;
                                    1- 2085     	BANKSEL	_pwStep
     00AD rrrr                      3-  110 m1      .banksel ram_address
     00AE 01rr                      1- 2086     	MOVR	_pwStep,W
                                    1- 2087     	BANKSEL	_geweiNum
     00AF rrrr                      3-  110 m1      .banksel ram_address
     00B0 00rr                      1- 2088     	MOVAR	_geweiNum
                                    1- 2089     	MGOTO	_00177_DS_
     00B1 3rrr                      3-   63 m1      LGOTO rom_address
     00B2                           1- 2090     _00163_DS_:
                                    1- 2091     	.line	231, "main.c"; 	showFlag = 0;
                                    1- 2092     	BANKSEL	_showFlag
     00B2 rrrr                      3-  110 m1      .banksel ram_address
     00B3 02rr                      1- 2093     	CLRR	_showFlag
                                    1- 2094     	MGOTO	_00177_DS_
     00B4 3rrr                      3-   63 m1      LGOTO rom_address
     00B5                           1- 2095     _00166_DS_:
                                    1- 2096     	.line	236, "main.c"; 	showFlag = 0;
                                    1- 2097     	BANKSEL	_showFlag
     00B5 rrrr                      3-  110 m1      .banksel ram_address
     00B6 02rr                      1- 2098     	CLRR	_showFlag
     00B7                           1- 2099     _00177_DS_:
                                    1- 2100     	.line	240, "main.c"; 	}
                                    1- 2101     	RETURN	
     00B7 0010                      3-   40 m1      ret
                                    1- 2102     ; exit point of _chrgCtr
                                    1- 2105     ;	code size estimation:
                                    1- 2106     ;	  732+  219 =   951 instructions ( 2340 byte)
                                    1- 2108     	end

SYMBOL TABLE            TYPE     VALUE
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
C                       Constant 00000000
DC                      Constant 00000001
ENABLE_RAM_BANK         Constant 00000001
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
STATUS                  Constant 00000003
USEFGOTO                Constant 00000000
W                       Constant 00000000
Z                       Constant 00000002


SOURCE FILE TABLE
001 OBJ/main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
