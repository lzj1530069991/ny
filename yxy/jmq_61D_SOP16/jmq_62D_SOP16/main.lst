
                    Nyquest Technology Co., Ltd.

NYASM 2.27

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B062D,c=on
                                    1-    9     	#include "ny8b062d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	__divuint
                                    1-   15     	extern	__moduint
                                    1-   16     	extern	_PORTAbits
                                    1-   17     	extern	_PORTBbits
                                    1-   18     	extern	_PCONbits
                                    1-   19     	extern	_BWUCONbits
                                    1-   20     	extern	_ABPLCONbits
                                    1-   21     	extern	_BPHCONbits
                                    1-   22     	extern	_INTEbits
                                    1-   23     	extern	_INTFbits
                                    1-   24     	extern	_ADMDbits
                                    1-   25     	extern	_ADRbits
                                    1-   26     	extern	_ADVREFHbits
                                    1-   27     	extern	_ADCRbits
                                    1-   28     	extern	_AWUCONbits
                                    1-   29     	extern	_PACONbits
                                    1-   30     	extern	_INTEDGbits
                                    1-   31     	extern	_ANAENbits
                                    1-   32     	extern	_RFCbits
                                    1-   33     	extern	_INTE2bits
                                    1-   34     	extern	_INDF
                                    1-   35     	extern	_TMR0
                                    1-   36     	extern	_PCL
                                    1-   37     	extern	_STATUS
                                    1-   38     	extern	_FSR
                                    1-   39     	extern	_PORTA
                                    1-   40     	extern	_PORTB
                                    1-   41     	extern	_PCON
                                    1-   42     	extern	_BWUCON
                                    1-   43     	extern	_PCHBUF
                                    1-   44     	extern	_ABPLCON
                                    1-   45     	extern	_BPHCON
                                    1-   46     	extern	_INTE
                                    1-   47     	extern	_INTF
                                    1-   48     	extern	_ADMD
                                    1-   49     	extern	_ADR
                                    1-   50     	extern	_ADD
                                    1-   51     	extern	_ADVREFH
                                    1-   52     	extern	_ADCR
                                    1-   53     	extern	_AWUCON
                                    1-   54     	extern	_PACON
                                    1-   55     	extern	_INTEDG
                                    1-   56     	extern	_TMRH
                                    1-   57     	extern	_ANAEN
                                    1-   58     	extern	_RFC
                                    1-   59     	extern	_TM3RH
                                    1-   60     	extern	_INTE2
                                    1-   61     	extern	_TMR1
                                    1-   62     	extern	_T1CR1
                                    1-   63     	extern	_T1CR2
                                    1-   64     	extern	_PWM1DUTY
                                    1-   65     	extern	_PS1CV
                                    1-   66     	extern	_BZ1CR
                                    1-   67     	extern	_IRCR
                                    1-   68     	extern	_TBHP
                                    1-   69     	extern	_TBHD
                                    1-   70     	extern	_TMR2
                                    1-   71     	extern	_T2CR1
                                    1-   72     	extern	_T2CR2
                                    1-   73     	extern	_PWM2DUTY
                                    1-   74     	extern	_PS2CV
                                    1-   75     	extern	_BZ2CR
                                    1-   76     	extern	_OSCCR
                                    1-   77     	extern	_TMR3
                                    1-   78     	extern	_T3CR1
                                    1-   79     	extern	_T3CR2
                                    1-   80     	extern	_PWM3DUTY
                                    1-   81     	extern	_PS3CV
                                    1-   82     	extern	_BZ3CR
                                    1-   83     	extern	_IOSTA
                                    1-   84     	extern	_IOSTB
                                    1-   85     	extern	_APHCON
                                    1-   86     	extern	_PS0CV
                                    1-   87     	extern	_BODCON
                                    1-   88     	extern	_CMPCR
                                    1-   89     	extern	_PCON1
                                    1-   90     	extern	_T0MD
                                    1-   91     	extern	___sdcc_saved_fsr
                                    1-   92     	extern	___sdcc_saved_stk00
                                    1-   93     	extern	___sdcc_saved_stk01
                                    1-   94     	extern	__gptrget1
                                    1-   95     	extern	__gptrput1
                                    1-   96     	extern	__mulchar
                                    1-   97     	extern	__nyc_ny8_startup
                                    1-   98     ;--------------------------------------------------------
                                    1-   99     ; global declarations
                                    1-  100     ;--------------------------------------------------------
                                    1-  101     	extern	_workCtr
                                    1-  102     	extern	_pwmStop
                                    1-  103     	extern	_pwmInit
                                    1-  104     	extern	_delay_us
                                    1-  105     	extern	_Delay10Us
                                    1-  106     	extern	_gotoSleep
                                    1-  107     	extern	_F_wait_eoc
                                    1-  108     	extern	_F_AIN2_Convert
                                    1-  109     	extern	_F_AIN9_Convert
                                    1-  110     	extern	_checkPWAAD
                                    1-  111     	extern	_checkBatAD
                                    1-  112     	extern	_initAD
                                    1-  113     	extern	_keyRead2
                                    1-  114     	extern	_keyRead
                                    1-  115     	extern	_ind_light_disp
                                    1-  116     	extern	_refresh
                                    1-  117     	extern	_keyCtr
                                    1-  118     	extern	_chrgCtr
                                    1-  119     	extern	_isr
                                    1-  120     	extern	_main
                                    1-  121     	extern	_intCount
                                    1-  122     	extern	_IntFlag
                                    1-  123     	extern	_longPressFlag
                                    1-  124     	extern	_workStep
                                    1-  125     	extern	_chrgStep
                                    1-  126     	extern	_sleepTime
                                    1-  127     	extern	_shiwei
                                    1-  128     	extern	_gewei
                                    1-  129     	extern	_keyCount
                                    1-  130     	extern	_keyCount2
                                    1-  131     	extern	_keyCount3
                                    1-  132     	extern	_batValue
                                    1-  133     	extern	_R_AIN9_DATA
                                    1-  134     	extern	_R_AIN9_DATA_LB
                                    1-  135     	extern	_R_AIN2_DATA
                                    1-  136     	extern	_R_AIN2_DATA_LB
                                    1-  137     	extern	_maxDuty
                                    1-  138     	extern	_duty
                                    1-  139     	extern	_adCheckTime
                                    1-  140     	extern	_count3S
                                    1-  141     	extern	_firstTime
                                    1-  143     	extern PSAVE
                                    1-  144     	extern SSAVE
                                    1-  145     	extern WSAVE
                                    1-  146     	extern STK02
                                    1-  147     	extern STK01
                                    1-  148     	extern STK00
                                    1-  150     .segment "uninit", 0x20000040
 20000040                           1-  151     PSAVE:
                                    1-  152     	.res 1
 20000041                           1-  153     SSAVE:
                                    1-  154     	.res 1
 20000042                           1-  155     WSAVE:
                                    1-  156     	.res 1
 20000043                           1-  157     STK02:
                                    1-  158     	.res 1
 20000044                           1-  159     STK01:
                                    1-  160     	.res 1
 20000045                           1-  161     STK00:
                                    1-  162     	.res 1
                                    1-  164     ;--------------------------------------------------------
                                    1-  165     ; global definitions
                                    1-  166     ;--------------------------------------------------------
                                    1-  167     .segment "uninit"
     0000                           1-  168     _shiwei:
                                    1-  169     	.res	1
                                    1-  172     .segment "uninit"
     0000                           1-  173     _gewei:
                                    1-  174     	.res	1
                                    1-  177     .segment "uninit"
     0000                           1-  178     _R_AIN9_DATA:
                                    1-  179     	.res	2
                                    1-  182     .segment "uninit"
     0000                           1-  183     _R_AIN9_DATA_LB:
                                    1-  184     	.res	1
                                    1-  187     .segment "uninit"
     0000                           1-  188     _R_AIN2_DATA:
                                    1-  189     	.res	2
                                    1-  192     .segment "uninit"
     0000                           1-  193     _R_AIN2_DATA_LB:
                                    1-  194     	.res	1
                                    1-  197     .segment "uninit"
     0000                           1-  198     _maxDuty:
                                    1-  199     	.res	1
                                    1-  202     .segment "uninit"
     0000                           1-  203     _duty:
                                    1-  204     	.res	1
                                    1-  207     ;--------------------------------------------------------
                                    1-  208     ; absolute symbol definitions
                                    1-  209     ;--------------------------------------------------------
                                    1-  210     ;--------------------------------------------------------
                                    1-  211     ; compiler-defined variables
                                    1-  212     ;--------------------------------------------------------
                                    1-  213     .segment "uninit"
     0000                           1-  214     r0x104A:
                                    1-  215     	.res	1
                                    1-  216     .segment "uninit"
     0000                           1-  217     r0x104B:
                                    1-  218     	.res	1
                                    1-  219     .segment "uninit"
     0000                           1-  220     r0x1047:
                                    1-  221     	.res	1
                                    1-  222     .segment "uninit"
     0000                           1-  223     r0x1048:
                                    1-  224     	.res	1
                                    1-  225     .segment "uninit"
     0000                           1-  226     r0x1045:
                                    1-  227     	.res	1
                                    1-  228     .segment "uninit"
     0000                           1-  229     r0x1046:
                                    1-  230     	.res	1
                                    1-  231     .segment "uninit"
     0000                           1-  232     r0x1044:
                                    1-  233     	.res	1
                                    1-  234     .segment "uninit"
     0000                           1-  235     r0x1040:
                                    1-  236     	.res	1
                                    1-  237     .segment "uninit"
     0000                           1-  238     r0x1043:
                                    1-  239     	.res	1
                                    1-  240     .segment "uninit"
     0000                           1-  241     r0x1042:
                                    1-  242     	.res	1
                                    1-  243     .segment "uninit"
     0000                           1-  244     r0x1041:
                                    1-  245     	.res	1
                                    1-  246     .segment "uninit"
     0000                           1-  247     r0x103E:
                                    1-  248     	.res	1
                                    1-  249     .segment "uninit"
     0000                           1-  250     r0x103F:
                                    1-  251     	.res	1
                                    1-  252     .segment "uninit"
     0000                           1-  253     r0x103A:
                                    1-  254     	.res	1
                                    1-  255     .segment "uninit"
     0000                           1-  256     r0x103B:
                                    1-  257     	.res	1
                                    1-  258     .segment "uninit"
     0000                           1-  259     r0x1032:
                                    1-  260     	.res	1
                                    1-  261     .segment "uninit"
     0000                           1-  262     r0x1033:
                                    1-  263     	.res	1
                                    1-  264     .segment "uninit"
     0000                           1-  265     r0x1034:
                                    1-  266     	.res	1
                                    1-  267     .segment "uninit"
     0000                           1-  268     r0x1037:
                                    1-  269     	.res	1
                                    1-  270     .segment "uninit"
     0000                           1-  271     r0x102C:
                                    1-  272     	.res	1
                                    1-  273     .segment "uninit"
     0000                           1-  274     r0x102D:
                                    1-  275     	.res	1
                                    1-  276     .segment "uninit"
     0000                           1-  277     r0x102E:
                                    1-  278     	.res	1
                                    1-  279     .segment "uninit"
     0000                           1-  280     r0x1031:
                                    1-  281     	.res	1
                                    1-  282     .segment "uninit"
     0000                           1-  283     r0x102B:
                                    1-  284     	.res	1
                                    1-  285     .segment "uninit"
     0000                           1-  286     r0x1028:
                                    1-  287     	.res	1
                                    1-  288     .segment "uninit"
     0000                           1-  289     r0x1029:
                                    1-  290     	.res	1
                                    1-  291     .segment "uninit"
     0000                           1-  292     r0x102A:
                                    1-  293     	.res	1
                                    1-  294     ;--------------------------------------------------------
                                    1-  295     ; initialized data
                                    1-  296     ;--------------------------------------------------------
                                    1-  298     .segment "idata"
     0000                           1-  299     _table:
     0000 003F                      1-  300     	dw	0x3f
     0001 0006                      1-  301     	dw	0x06
     0002 005B                      1-  302     	dw	0x5b
     0003 004F                      1-  303     	dw	0x4f
     0004 0066                      1-  304     	dw	0x66
     0005 006D                      1-  305     	dw	0x6d
     0006 007D                      1-  306     	dw	0x7d
     0007 0007                      1-  307     	dw	0x07
     0008 007F                      1-  308     	dw	0x7f
     0009 006F                      1-  309     	dw	0x6f
     000A 0071                      1-  310     	dw	0x71
     000B 0038                      1-  311     	dw	0x38
                                    1-  315     .segment "idata"
     0000                           1-  316     _intCount:
     0000 0000                      1-  317     	dw	0x00
                                    1-  321     .segment "idata"
     0000                           1-  322     _IntFlag:
     0000 0000                      1-  323     	dw	0x00
                                    1-  327     .segment "idata"
     0000                           1-  328     _longPressFlag:
     0000 0000                      1-  329     	dw	0x00
                                    1-  333     .segment "idata"
     0000                           1-  334     _workStep:
     0000 0000                      1-  335     	dw	0x00
                                    1-  339     .segment "idata"
     0000                           1-  340     _chrgStep:
     0000 0000                      1-  341     	dw	0x00
                                    1-  345     .segment "idata"
     0000                           1-  346     _sleepTime:
     0000 0000                      1-  347     	dw	0x00
                                    1-  351     .segment "idata"
     0000                           1-  352     _keyCount:
     0000 0000                      1-  353     	dw	0x00
                                    1-  357     .segment "idata"
     0000                           1-  358     _keyCount2:
     0000 0000                      1-  359     	dw	0x00
                                    1-  363     .segment "idata"
     0000                           1-  364     _keyCount3:
     0000 0000                      1-  365     	dw	0x00
                                    1-  369     .segment "idata"
     0000                           1-  370     _batValue:
     0000 0000 0000                 1-  371     	dw	0x00, 0x00
                                    1-  375     .segment "idata"
     0000                           1-  376     _adCheckTime:
     0000 0000                      1-  377     	dw	0x00
                                    1-  381     .segment "idata"
     0000                           1-  382     _count3S:
     0000 0000 0000                 1-  383     	dw	0x00, 0x00
                                    1-  387     .segment "idata"
     0000                           1-  388     _firstTime:
     0000 0000                      1-  389     	dw	0x00
                                    1-  392     ;--------------------------------------------------------
                                    1-  393     ; overlayable items in internal ram 
                                    1-  394     ;--------------------------------------------------------
                                    1-  395     ;	udata_ovr
                                    1-  396     ;--------------------------------------------------------
                                    1-  397     ; reset vector 
                                    1-  398     ;--------------------------------------------------------
                                    1-  399     ORG	0x0000
     0000 3rrr                      1-  400     	LGOTO	__nyc_ny8_startup
                                    1-  401     ;--------------------------------------------------------
                                    1-  402     ; interrupt and initialization code
                                    1-  403     ;--------------------------------------------------------
                                    1-  404     ORG 0x0008
     0008 3rrr                      1-  405     	lgoto	__sdcc_interrupt
                                    1-  407     .segment "code"
     0000                           1-  408     __sdcc_interrupt:
                                    1-  409     ;***
                                    1-  410     ;  pBlock Stats: dbName = I
                                    1-  411     ;***
                                    1-  412     ;2 compiler assigned registers:
                                    1-  413     ;   STK00
                                    1-  414     ;   STK01
                                    1-  415     ;; Starting pCode block
     0000                           1-  416     _isr:
                                    1-  417     ; 0 exit points
                                    1-  418     	.line	61, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  419     	MOVAR	WSAVE
     0001 1503                      1-  420     	SWAPR	STATUS,W
     0002 0283                      1-  421     	CLRR	STATUS
     0003 00rr                      1-  422     	MOVAR	SSAVE
     0004 010A                      1-  423     	MOVR	PCHBUF,W
     0005 028A                      1-  424     	CLRR	PCHBUF
     0006 00rr                      1-  425     	MOVAR	PSAVE
     0007 0104                      1-  426     	MOVR	FSR,W
                                    1-  427     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1-  428     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  429     	MOVR	STK00,W
                                    1-  430     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 00rr                      1-  431     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  432     	MOVR	STK01,W
                                    1-  433     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 00rr                      1-  434     	MOVAR	___sdcc_saved_stk01
                                    1-  435     	.line	63, "main.c"; 	if(INTFbits.T0IF)
     0010 08rr                      1-  436     	BTRSS	_INTFbits,0
     0011 3rrr                      1-  437     	LGOTO	_00108_DS_
                                    1-  438     	.line	65, "main.c"; 	TMR0 += 56;
     0012 2138                      1-  439     	MOVIA	0x38
     0013 03rr                      1-  440     	ADDAR	_TMR0,F
                                    1-  441     	.line	66, "main.c"; 	intCount++;
                                    1-  442     	BANKSEL	_intCount
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 05rr                      1-  443     	INCR	_intCount,F
                                    1-  444     	.line	67, "main.c"; 	if(intCount == 100)
     0016 01rr                      1-  445     	MOVR	_intCount,W
     0017 2464                      1-  446     	XORIA	0x64
     0018 0903                      1-  447     	BTRSS	STATUS,2
     0019 3rrr                      1-  448     	LGOTO	_00108_DS_
                                    1-  449     	.line	69, "main.c"; 	intCount = 0;
     001A 02rr                      1-  450     	CLRR	_intCount
                                    1-  451     	.line	70, "main.c"; 	IntFlag = 1;
     001B 2101                      1-  452     	MOVIA	0x01
                                    1-  453     	BANKSEL	_IntFlag
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 00rr                      1-  454     	MOVAR	_IntFlag
     001E                           1-  455     _00108_DS_:
                                    1-  456     	.line	73, "main.c"; 	if(INTFbits.PABIF)
     001E 08rr                      1-  457     	BTRSS	_INTFbits,1
     001F 3rrr                      1-  458     	LGOTO	_00110_DS_
                                    1-  459     	.line	75, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     0020 21FD                      1-  460     	MOVIA	0xfd
     0021 00rr                      1-  461     	MOVAR	_INTF
     0022                           1-  462     _00110_DS_:
                                    1-  463     	.line	78, "main.c"; 	INTF = 0;
     0022 02rr                      1-  464     	CLRR	_INTF
                                    1-  465     	.line	80, "main.c"; 	}
                                    1-  466     	BANKSEL	___sdcc_saved_stk01
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 01rr                      1-  467     	MOVR	___sdcc_saved_stk01,W
     0025 00rr                      1-  468     	MOVAR	STK01
                                    1-  469     	BANKSEL	___sdcc_saved_stk00
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 01rr                      1-  470     	MOVR	___sdcc_saved_stk00,W
     0028 00rr                      1-  471     	MOVAR	STK00
                                    1-  472     	BANKSEL	___sdcc_saved_fsr
     0029 rrrr                      3-   71 m1      .banksel ram_address
     002A 01rr                      1-  473     	MOVR	___sdcc_saved_fsr,W
     002B 0084                      1-  474     	MOVAR	FSR
     002C 01rr                      1-  475     	MOVR	PSAVE,W
     002D 008A                      1-  476     	MOVAR	PCHBUF
     002E 0283                      1-  477     	CLRR	STATUS
     002F 15rr                      1-  478     	SWAPR	SSAVE,W
     0030 0083                      1-  479     	MOVAR	STATUS
     0031 15rr                      1-  480     	SWAPR	WSAVE,F
     0032 15rr                      1-  481     	SWAPR	WSAVE,W
     0033                           1-  482     END_OF_INTERRUPT:
     0033 0011                      1-  483     	RETIE	
                                    1-  485     ;--------------------------------------------------------
                                    1-  486     ; code
                                    1-  487     ;--------------------------------------------------------
                                    1-  488     ;***
                                    1-  489     ;  pBlock Stats: dbName = M
                                    1-  490     ;***
                                    1-  491     ;has an exit
                                    1-  492     ;functions called:
                                    1-  493     ;   _initAD
                                    1-  494     ;   __divuint
                                    1-  495     ;   __moduint
                                    1-  496     ;   _refresh
                                    1-  497     ;   _refresh
                                    1-  498     ;   _refresh
                                    1-  499     ;   _checkBatAD
                                    1-  500     ;   _checkPWAAD
                                    1-  501     ;   _chrgCtr
                                    1-  502     ;   _keyCtr
                                    1-  503     ;   _workCtr
                                    1-  504     ;   _pwmStop
                                    1-  505     ;   _gotoSleep
                                    1-  506     ;   _initAD
                                    1-  507     ;   __divuint
                                    1-  508     ;   __moduint
                                    1-  509     ;   _refresh
                                    1-  510     ;   _refresh
                                    1-  511     ;   _refresh
                                    1-  512     ;   _checkBatAD
                                    1-  513     ;   _checkPWAAD
                                    1-  514     ;   _chrgCtr
                                    1-  515     ;   _keyCtr
                                    1-  516     ;   _workCtr
                                    1-  517     ;   _pwmStop
                                    1-  518     ;   _gotoSleep
                                    1-  519     ;5 compiler assigned registers:
                                    1-  520     ;   STK02
                                    1-  521     ;   STK01
                                    1-  522     ;   STK00
                                    1-  523     ;   r0x104E
                                    1-  524     ;   r0x104F
                                    1-  525     ;; Starting pCode block
                                    1-  526     .segment "code"; module=main, function=_main
     0000                           1-  528     _main:
                                    1-  529     ; 2 exit points
                                    1-  530     	.line	86, "main.c"; 	PORTB = 0x00;
     0000 02rr                      1-  531     	CLRR	_PORTB
                                    1-  532     	.line	87, "main.c"; 	PORTA = 0x00;
     0001 02rr                      1-  533     	CLRR	_PORTA
                                    1-  534     	.line	88, "main.c"; 	IOSTA = C_PA1_Input | C_PA2_Input | C_PA3_Input | C_PA5_Input;
     0002 212E                      1-  535     	MOVIA	0x2e
     0003 000r                      1-  536     	IOST	_IOSTA
                                    1-  537     	.line	89, "main.c"; 	IOSTB = C_PB0_Input | C_PB1_Input | C_PB4_Input;
     0004 2113                      1-  538     	MOVIA	0x13
     0005 000r                      1-  539     	IOST	_IOSTB
                                    1-  540     	.line	90, "main.c"; 	ABPLCON = 0xDF;		//PB1下拉
     0006 21DF                      1-  541     	MOVIA	0xdf
     0007 00rr                      1-  542     	MOVAR	_ABPLCON
                                    1-  543     	.line	91, "main.c"; 	BPHCON = 0xFE;		//PB0上拉
     0008 21FE                      1-  544     	MOVIA	0xfe
     0009 00rr                      1-  545     	MOVAR	_BPHCON
                                    1-  546     	.line	92, "main.c"; 	APHCON = 0xF7;		//PA3上拉
     000A 21F7                      1-  547     	MOVIA	0xf7
     000B 000r                      1-  548     	IOST	_APHCON
                                    1-  549     	.line	93, "main.c"; 	PORTB = 0x00;
     000C 02rr                      1-  550     	CLRR	_PORTB
                                    1-  551     	.line	94, "main.c"; 	PORTA = 0x00;
     000D 02rr                      1-  552     	CLRR	_PORTA
                                    1-  553     	.line	95, "main.c"; 	PCON = C_WDT_En | C_LVR_En | C_LVD_En;				// Enable WDT & LVR
     000E 21A8                      1-  554     	MOVIA	0xa8
     000F 00rr                      1-  555     	MOVAR	_PCON
                                    1-  556     	.line	96, "main.c"; 	PCON &= 0xEF;		//PA5上拉
     0010 1Err                      1-  557     	BCR	_PCON,4
                                    1-  558     	.line	97, "main.c"; 	PCON1 = C_TMR0_Dis;
     0011 0200                      1-  559     	CLRA	
     0012 000r                      1-  560     	IOST	_PCON1
                                    1-  561     	.line	99, "main.c"; 	TMR0 = 55;
     0013 2137                      1-  562     	MOVIA	0x37
     0014 00rr                      1-  563     	MOVAR	_TMR0
                                    1-  564     	.line	100, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0015 0200                      1-  565     	CLRA	
     0016 0003                      1-  566     	T0MD	
                                    1-  567     	.line	101, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PABKey;
     0017 2103                      1-  568     	MOVIA	0x03
     0018 00rr                      1-  569     	MOVAR	_INTE
                                    1-  570     	.line	102, "main.c"; 	PCON1 = C_TMR0_En;
     0019 2101                      1-  571     	MOVIA	0x01
     001A 000r                      1-  572     	IOST	_PCON1
                                    1-  573     	.line	103, "main.c"; 	ENI();
     001B 0004                      1-  574     	ENI
                                    1-  575     	.line	104, "main.c"; 	initAD();
     001C 2rrr                      1-  576     	LCALL	_initAD
     001D                           1-  577     _00151_DS_:
                                    1-  578     	.line	107, "main.c"; 	CLRWDT();			//Clear WDT, this function is defined in ny8command.h
     001D 0002                      1-  579     	clrwdt
                                    1-  580     	.line	109, "main.c"; 	if(chrgStep)
                                    1-  581     	BANKSEL	_chrgStep
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 01rr                      1-  582     	MOVR	_chrgStep,W
     0020 0D03                      1-  583     	BTRSC	STATUS,2
     0021 3rrr                      1-  584     	LGOTO	_00127_DS_
                                    1-  585     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  586     ;;unsigned compare: left >= lit (0x15=21), size=1
                                    1-  587     	.line	111, "main.c"; 	if(adCheckTime > 20)
     0022 2115                      1-  588     	MOVIA	0x15
                                    1-  589     	BANKSEL	_adCheckTime
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 04rr                      1-  590     	SUBAR	_adCheckTime,W
     0025 0803                      1-  591     	BTRSS	STATUS,0
     0026 3rrr                      1-  592     	LGOTO	_00119_DS_
                                    1-  593     ;;unsigned compare: left < lit (0x64=100), size=2
                                    1-  594     	.line	113, "main.c"; 	if(batValue < 100)
     0027 2100                      1-  595     	MOVIA	0x00
                                    1-  596     	BANKSEL	_batValue
     0028 rrrr                      3-   71 m1      .banksel ram_address
     0029 04rr                      1-  597     	SUBAR	(_batValue + 1),W
     002A 0903                      1-  598     	BTRSS	STATUS,2
     002B 3rrr                      1-  599     	LGOTO	_00204_DS_
     002C 2164                      1-  600     	MOVIA	0x64
     002D 04rr                      1-  601     	SUBAR	_batValue,W
     002E                           1-  602     _00204_DS_:
     002E 0C03                      1-  603     	BTRSC	STATUS,0
     002F 3rrr                      1-  604     	LGOTO	_00116_DS_
                                    1-  605     	.line	115, "main.c"; 	shiwei = batValue/10;
     0030 210A                      1-  606     	MOVIA	0x0a
     0031 00rr                      1-  607     	MOVAR	STK02
     0032 2100                      1-  608     	MOVIA	0x00
     0033 00rr                      1-  609     	MOVAR	STK01
                                    1-  610     	BANKSEL	_batValue
     0034 rrrr                      3-   71 m1      .banksel ram_address
     0035 01rr                      1-  611     	MOVR	_batValue,W
     0036 00rr                      1-  612     	MOVAR	STK00
     0037 01rr                      1-  613     	MOVR	(_batValue + 1),W
     0038 2rrr                      1-  614     	LCALL	__divuint
                                    1-  615     ;;102	MOVAR	r0x104E
     0039 01rr                      1-  616     	MOVR	STK00,W
                                    1-  617     ;;100	MOVAR	r0x104F
                                    1-  618     	BANKSEL	_shiwei
     003A rrrr                      3-   71 m1      .banksel ram_address
     003B 00rr                      1-  619     	MOVAR	_shiwei
                                    1-  620     	.line	116, "main.c"; 	gewei = batValue%10;
     003C 210A                      1-  621     	MOVIA	0x0a
     003D 00rr                      1-  622     	MOVAR	STK02
     003E 2100                      1-  623     	MOVIA	0x00
     003F 00rr                      1-  624     	MOVAR	STK01
                                    1-  625     	BANKSEL	_batValue
     0040 rrrr                      3-   71 m1      .banksel ram_address
     0041 01rr                      1-  626     	MOVR	_batValue,W
     0042 00rr                      1-  627     	MOVAR	STK00
     0043 01rr                      1-  628     	MOVR	(_batValue + 1),W
     0044 2rrr                      1-  629     	LCALL	__moduint
                                    1-  630     ;;101	MOVAR	r0x104E
     0045 01rr                      1-  631     	MOVR	STK00,W
                                    1-  632     ;;99	MOVAR	r0x104F
                                    1-  633     	BANKSEL	_gewei
     0046 rrrr                      3-   71 m1      .banksel ram_address
     0047 00rr                      1-  634     	MOVAR	_gewei
     0048 3rrr                      1-  635     	LGOTO	_00119_DS_
     0049                           1-  636     _00116_DS_:
                                    1-  637     	.line	120, "main.c"; 	shiwei = gewei = 10;
     0049 210A                      1-  638     	MOVIA	0x0a
                                    1-  639     	BANKSEL	_gewei
     004A rrrr                      3-   71 m1      .banksel ram_address
     004B 00rr                      1-  640     	MOVAR	_gewei
                                    1-  641     	BANKSEL	_shiwei
     004C rrrr                      3-   71 m1      .banksel ram_address
     004D 00rr                      1-  642     	MOVAR	_shiwei
     004E                           1-  643     _00119_DS_:
                                    1-  644     	.line	123, "main.c"; 	refresh();
     004E 2rrr                      1-  645     	LCALL	_refresh
     004F 3rrr                      1-  646     	LGOTO	_00128_DS_
     0050                           1-  647     _00127_DS_:
                                    1-  648     	.line	125, "main.c"; 	else if(workStep)
                                    1-  649     	BANKSEL	_workStep
     0050 rrrr                      3-   71 m1      .banksel ram_address
     0051 01rr                      1-  650     	MOVR	_workStep,W
     0052 0D03                      1-  651     	BTRSC	STATUS,2
     0053 3rrr                      1-  652     	LGOTO	_00124_DS_
                                    1-  653     	.line	127, "main.c"; 	shiwei = 0;
                                    1-  654     	BANKSEL	_shiwei
     0054 rrrr                      3-   71 m1      .banksel ram_address
     0055 02rr                      1-  655     	CLRR	_shiwei
                                    1-  656     	.line	128, "main.c"; 	gewei = workStep;
                                    1-  657     	BANKSEL	_workStep
     0056 rrrr                      3-   71 m1      .banksel ram_address
     0057 01rr                      1-  658     	MOVR	_workStep,W
                                    1-  659     	BANKSEL	_gewei
     0058 rrrr                      3-   71 m1      .banksel ram_address
     0059 00rr                      1-  660     	MOVAR	_gewei
                                    1-  661     	.line	129, "main.c"; 	refresh();
     005A 2rrr                      1-  662     	LCALL	_refresh
     005B 3rrr                      1-  663     	LGOTO	_00128_DS_
     005C                           1-  664     _00124_DS_:
                                    1-  665     	.line	133, "main.c"; 	if(firstTime == 0)
                                    1-  666     	BANKSEL	_firstTime
     005C rrrr                      3-   71 m1      .banksel ram_address
     005D 01rr                      1-  667     	MOVR	_firstTime,W
     005E 0903                      1-  668     	BTRSS	STATUS,2
     005F 3rrr                      1-  669     	LGOTO	_00121_DS_
                                    1-  670     	.line	135, "main.c"; 	shiwei = gewei = 8;
     0060 2108                      1-  671     	MOVIA	0x08
                                    1-  672     	BANKSEL	_gewei
     0061 rrrr                      3-   71 m1      .banksel ram_address
     0062 00rr                      1-  673     	MOVAR	_gewei
                                    1-  674     	BANKSEL	_shiwei
     0063 rrrr                      3-   71 m1      .banksel ram_address
     0064 00rr                      1-  675     	MOVAR	_shiwei
                                    1-  676     	.line	136, "main.c"; 	refresh();
     0065 2rrr                      1-  677     	LCALL	_refresh
     0066 3rrr                      1-  678     	LGOTO	_00128_DS_
     0067                           1-  679     _00121_DS_:
                                    1-  680     	.line	140, "main.c"; 	COM1 = 1;
     0067 1Arr                      1-  681     	BSR	_PORTB,5
                                    1-  682     	.line	141, "main.c"; 	COM2 = 1;
     0068 19rr                      1-  683     	BSR	_PORTB,3
     0069                           1-  684     _00128_DS_:
                                    1-  685     	.line	144, "main.c"; 	if(!IntFlag)
                                    1-  686     	BANKSEL	_IntFlag
     0069 rrrr                      3-   71 m1      .banksel ram_address
     006A 01rr                      1-  687     	MOVR	_IntFlag,W
     006B 0D03                      1-  688     	BTRSC	STATUS,2
     006C 3rrr                      1-  689     	LGOTO	_00151_DS_
                                    1-  690     	.line	146, "main.c"; 	if(++adCheckTime >= 40)
                                    1-  691     	BANKSEL	_adCheckTime
     006D rrrr                      3-   71 m1      .banksel ram_address
     006E 05rr                      1-  692     	INCR	_adCheckTime,F
                                    1-  693     ;;unsigned compare: left < lit (0x28=40), size=1
     006F 2128                      1-  694     	MOVIA	0x28
     0070 04rr                      1-  695     	SUBAR	_adCheckTime,W
     0071 0C03                      1-  696     	BTRSC	STATUS,0
                                    1-  697     	.line	147, "main.c"; 	adCheckTime = 0;
     0072 02rr                      1-  698     	CLRR	_adCheckTime
                                    1-  699     	.line	148, "main.c"; 	if(adCheckTime < 20)
     0073 2114                      1-  700     	MOVIA	0x14
     0074 04rr                      1-  701     	SUBAR	_adCheckTime,W
     0075 0C03                      1-  702     	BTRSC	STATUS,0
     0076 3rrr                      1-  703     	LGOTO	_00134_DS_
                                    1-  704     	.line	149, "main.c"; 	checkBatAD();
     0077 2rrr                      1-  705     	LCALL	_checkBatAD
     0078 3rrr                      1-  706     	LGOTO	_00135_DS_
     0079                           1-  707     _00134_DS_:
                                    1-  708     	.line	151, "main.c"; 	checkPWAAD();
     0079 2rrr                      1-  709     	LCALL	_checkPWAAD
     007A                           1-  710     _00135_DS_:
                                    1-  711     	.line	152, "main.c"; 	IntFlag = 0;
                                    1-  712     	BANKSEL	_IntFlag
     007A rrrr                      3-   71 m1      .banksel ram_address
     007B 02rr                      1-  713     	CLRR	_IntFlag
                                    1-  714     	.line	153, "main.c"; 	chrgCtr();
     007C 2rrr                      1-  715     	LCALL	_chrgCtr
                                    1-  716     	.line	154, "main.c"; 	keyCtr();
     007D 2rrr                      1-  717     	LCALL	_keyCtr
                                    1-  718     	.line	155, "main.c"; 	if(workStep)
                                    1-  719     	BANKSEL	_workStep
     007E rrrr                      3-   71 m1      .banksel ram_address
     007F 01rr                      1-  720     	MOVR	_workStep,W
     0080 0D03                      1-  721     	BTRSC	STATUS,2
     0081 3rrr                      1-  722     	LGOTO	_00148_DS_
                                    1-  723     	.line	156, "main.c"; 	workCtr();
     0082 2rrr                      1-  724     	LCALL	_workCtr
     0083 3rrr                      1-  725     	LGOTO	_00151_DS_
     0084                           1-  726     _00148_DS_:
                                    1-  727     	.line	159, "main.c"; 	if(keyCount == 0)
                                    1-  728     	BANKSEL	_keyCount
     0084 rrrr                      3-   71 m1      .banksel ram_address
     0085 01rr                      1-  729     	MOVR	_keyCount,W
     0086 0D03                      1-  730     	BTRSC	STATUS,2
                                    1-  731     	.line	160, "main.c"; 	pwmStop();
     0087 2rrr                      1-  732     	LCALL	_pwmStop
                                    1-  733     	.line	162, "main.c"; 	if(chrgStep == 0 && keyCount == 0 && (++sleepTime >= 100))
                                    1-  734     	BANKSEL	_chrgStep
     0088 rrrr                      3-   71 m1      .banksel ram_address
     0089 01rr                      1-  735     	MOVR	_chrgStep,W
     008A 0903                      1-  736     	BTRSS	STATUS,2
     008B 3rrr                      1-  737     	LGOTO	_00143_DS_
                                    1-  738     	BANKSEL	_keyCount
     008C rrrr                      3-   71 m1      .banksel ram_address
     008D 01rr                      1-  739     	MOVR	_keyCount,W
     008E 0903                      1-  740     	BTRSS	STATUS,2
     008F 3rrr                      1-  741     	LGOTO	_00143_DS_
                                    1-  742     	BANKSEL	_sleepTime
     0090 rrrr                      3-   71 m1      .banksel ram_address
     0091 05rr                      1-  743     	INCR	_sleepTime,F
                                    1-  744     ;;unsigned compare: left < lit (0x64=100), size=1
     0092 2164                      1-  745     	MOVIA	0x64
     0093 04rr                      1-  746     	SUBAR	_sleepTime,W
     0094 0803                      1-  747     	BTRSS	STATUS,0
     0095 3rrr                      1-  748     	LGOTO	_00143_DS_
                                    1-  749     	.line	163, "main.c"; 	gotoSleep();
     0096 2rrr                      1-  750     	LCALL	_gotoSleep
     0097 3rrr                      1-  751     	LGOTO	_00151_DS_
     0098                           1-  752     _00143_DS_:
                                    1-  753     	.line	164, "main.c"; 	else if(chrgStep == 0 && firstTime == 0)
                                    1-  754     	BANKSEL	_chrgStep
     0098 rrrr                      3-   71 m1      .banksel ram_address
     0099 01rr                      1-  755     	MOVR	_chrgStep,W
     009A 0903                      1-  756     	BTRSS	STATUS,2
     009B 3rrr                      1-  757     	LGOTO	_00139_DS_
                                    1-  758     	BANKSEL	_firstTime
     009C rrrr                      3-   71 m1      .banksel ram_address
     009D 01rr                      1-  759     	MOVR	_firstTime,W
     009E 0903                      1-  760     	BTRSS	STATUS,2
     009F 3rrr                      1-  761     	LGOTO	_00139_DS_
                                    1-  762     	.line	166, "main.c"; 	LEDHON();
     00A0 1Arr                      1-  763     	BSR	_PORTA,4
                                    1-  764     	.line	167, "main.c"; 	LEDLON();
     00A1 18rr                      1-  765     	BSR	_PORTA,0
     00A2 3rrr                      1-  766     	LGOTO	_00151_DS_
     00A3                           1-  767     _00139_DS_:
                                    1-  768     	.line	171, "main.c"; 	LEDHOFF();
     00A3 1Err                      1-  769     	BCR	_PORTA,4
                                    1-  770     	.line	172, "main.c"; 	LEDLOFF();
     00A4 1Crr                      1-  771     	BCR	_PORTA,0
     00A5 3rrr                      1-  772     	LGOTO	_00151_DS_
                                    1-  773     	.line	177, "main.c"; 	}
                                    1-  774     	RETURN	
     00A6 0010                      3-   26 m1      ret
                                    1-  775     ; exit point of _main
                                    1-  777     ;***
                                    1-  778     ;  pBlock Stats: dbName = C
                                    1-  779     ;***
                                    1-  780     ;has an exit
                                    1-  781     ;functions called:
                                    1-  782     ;   _pwmInit
                                    1-  783     ;   __mulchar
                                    1-  784     ;   __moduint
                                    1-  785     ;   _pwmInit
                                    1-  786     ;   __mulchar
                                    1-  787     ;   __moduint
                                    1-  788     ;5 compiler assigned registers:
                                    1-  789     ;   STK00
                                    1-  790     ;   r0x1029
                                    1-  791     ;   STK02
                                    1-  792     ;   STK01
                                    1-  793     ;   r0x102A
                                    1-  794     ;; Starting pCode block
                                    1-  795     .segment "code"; module=main, function=_workCtr
     0000                           1-  797     _workCtr:
                                    1-  798     ; 2 exit points
                                    1-  799     	.line	501, "main.c"; 	pwmInit();
     0000 2rrr                      1-  800     	LCALL	_pwmInit
                                    1-  801     ;;unsigned compare: left < lit (0xA=10), size=2
                                    1-  802     	.line	503, "main.c"; 	if(R_AIN2_DATA >= 10)
     0001 2100                      1-  803     	MOVIA	0x00
                                    1-  804     	BANKSEL	_R_AIN2_DATA
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 04rr                      1-  805     	SUBAR	(_R_AIN2_DATA + 1),W
     0004 0903                      1-  806     	BTRSS	STATUS,2
     0005 3rrr                      1-  807     	LGOTO	_00443_DS_
     0006 210A                      1-  808     	MOVIA	0x0a
     0007 04rr                      1-  809     	SUBAR	_R_AIN2_DATA,W
     0008                           1-  810     _00443_DS_:
     0008 0803                      1-  811     	BTRSS	STATUS,0
     0009 3rrr                      1-  812     	LGOTO	_00398_DS_
                                    1-  813     ;;unsigned compare: left < lit (0x9=9), size=1
                                    1-  814     	.line	505, "main.c"; 	if(workStep < 9)
     000A 2109                      1-  815     	MOVIA	0x09
                                    1-  816     	BANKSEL	_workStep
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 04rr                      1-  817     	SUBAR	_workStep,W
     000D 0C03                      1-  818     	BTRSC	STATUS,0
     000E 3rrr                      1-  819     	LGOTO	_00395_DS_
                                    1-  820     	.line	507, "main.c"; 	maxDuty = 70 + workStep*2;
     000F 2102                      1-  821     	MOVIA	0x02
     0010 00rr                      1-  822     	MOVAR	STK00
     0011 01rr                      1-  823     	MOVR	_workStep,W
     0012 2rrr                      1-  824     	LCALL	__mulchar
                                    1-  825     	BANKSEL	r0x1029
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 00rr                      1-  826     	MOVAR	r0x1029
     0015 2146                      1-  827     	MOVIA	0x46
     0016 03rr                      1-  828     	ADDAR	r0x1029,W
                                    1-  829     	BANKSEL	_maxDuty
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1-  830     	MOVAR	_maxDuty
                                    1-  831     	.line	508, "main.c"; 	if(workStep == 1)
                                    1-  832     	BANKSEL	_workStep
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 01rr                      1-  833     	MOVR	_workStep,W
     001B 2401                      1-  834     	XORIA	0x01
     001C 0903                      1-  835     	BTRSS	STATUS,2
     001D 3rrr                      1-  836     	LGOTO	_00378_DS_
                                    1-  837     	.line	509, "main.c"; 	maxDuty = 70;
     001E 2146                      1-  838     	MOVIA	0x46
                                    1-  839     	BANKSEL	_maxDuty
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 00rr                      1-  840     	MOVAR	_maxDuty
     0021 3rrr                      1-  841     	LGOTO	_00379_DS_
     0022                           1-  842     _00378_DS_:
                                    1-  843     	.line	510, "main.c"; 	else if(workStep == 8)
                                    1-  844     	BANKSEL	_workStep
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 01rr                      1-  845     	MOVR	_workStep,W
     0024 2408                      1-  846     	XORIA	0x08
     0025 0903                      1-  847     	BTRSS	STATUS,2
     0026 3rrr                      1-  848     	LGOTO	_00379_DS_
                                    1-  849     	.line	511, "main.c"; 	maxDuty = 87;
     0027 2157                      1-  850     	MOVIA	0x57
                                    1-  851     	BANKSEL	_maxDuty
     0028 rrrr                      3-   71 m1      .banksel ram_address
     0029 00rr                      1-  852     	MOVAR	_maxDuty
     002A                           1-  853     _00379_DS_:
                                    1-  854     	.line	512, "main.c"; 	if(duty < maxDuty)
                                    1-  855     	BANKSEL	_maxDuty
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 01rr                      1-  856     	MOVR	_maxDuty,W
                                    1-  857     	BANKSEL	_duty
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 04rr                      1-  858     	SUBAR	_duty,W
     002E 0C03                      1-  859     	BTRSC	STATUS,0
     002F 3rrr                      1-  860     	LGOTO	_00381_DS_
                                    1-  861     	.line	513, "main.c"; 	duty++;
     0030 05rr                      1-  862     	INCR	_duty,F
     0031 3rrr                      1-  863     	LGOTO	_00399_DS_
     0032                           1-  864     _00381_DS_:
                                    1-  865     	.line	515, "main.c"; 	duty = maxDuty;
                                    1-  866     	BANKSEL	_maxDuty
     0032 rrrr                      3-   71 m1      .banksel ram_address
     0033 01rr                      1-  867     	MOVR	_maxDuty,W
                                    1-  868     	BANKSEL	_duty
     0034 rrrr                      3-   71 m1      .banksel ram_address
     0035 00rr                      1-  869     	MOVAR	_duty
     0036 3rrr                      1-  870     	LGOTO	_00399_DS_
     0037                           1-  871     _00395_DS_:
                                    1-  872     	.line	520, "main.c"; 	if(++count3S >= 300)
                                    1-  873     	BANKSEL	_count3S
     0037 rrrr                      3-   71 m1      .banksel ram_address
     0038 05rr                      1-  874     	INCR	_count3S,F
     0039 0D03                      1-  875     	BTRSC	STATUS,2
     003A 05rr                      1-  876     	INCR	(_count3S + 1),F
                                    1-  877     ;;unsigned compare: left < lit (0x12C=300), size=2
     003B 2101                      1-  878     	MOVIA	0x01
     003C 04rr                      1-  879     	SUBAR	(_count3S + 1),W
     003D 0903                      1-  880     	BTRSS	STATUS,2
     003E 3rrr                      1-  881     	LGOTO	_00446_DS_
     003F 212C                      1-  882     	MOVIA	0x2c
     0040 04rr                      1-  883     	SUBAR	_count3S,W
     0041                           1-  884     _00446_DS_:
     0041 0803                      1-  885     	BTRSS	STATUS,0
     0042 3rrr                      1-  886     	LGOTO	_00384_DS_
                                    1-  887     	.line	522, "main.c"; 	count3S = 0;
                                    1-  888     	BANKSEL	_count3S
     0043 rrrr                      3-   71 m1      .banksel ram_address
     0044 02rr                      1-  889     	CLRR	_count3S
     0045 02rr                      1-  890     	CLRR	(_count3S + 1)
                                    1-  891     	.line	523, "main.c"; 	duty = 70;
     0046 2146                      1-  892     	MOVIA	0x46
                                    1-  893     	BANKSEL	_duty
     0047 rrrr                      3-   71 m1      .banksel ram_address
     0048 00rr                      1-  894     	MOVAR	_duty
     0049                           1-  895     _00384_DS_:
                                    1-  896     	.line	525, "main.c"; 	if(count3S % 9 == 0)
     0049 2109                      1-  897     	MOVIA	0x09
     004A 00rr                      1-  898     	MOVAR	STK02
     004B 2100                      1-  899     	MOVIA	0x00
     004C 00rr                      1-  900     	MOVAR	STK01
                                    1-  901     	BANKSEL	_count3S
     004D rrrr                      3-   71 m1      .banksel ram_address
     004E 01rr                      1-  902     	MOVR	_count3S,W
     004F 00rr                      1-  903     	MOVAR	STK00
     0050 01rr                      1-  904     	MOVR	(_count3S + 1),W
     0051 2rrr                      1-  905     	LCALL	__moduint
                                    1-  906     	BANKSEL	r0x102A
     0052 rrrr                      3-   71 m1      .banksel ram_address
     0053 00rr                      1-  907     	MOVAR	r0x102A
     0054 01rr                      1-  908     	MOVR	STK00,W
                                    1-  909     	BANKSEL	r0x1029
     0055 rrrr                      3-   71 m1      .banksel ram_address
     0056 00rr                      1-  910     	MOVAR	r0x1029
                                    1-  911     	BANKSEL	r0x102A
     0057 rrrr                      3-   71 m1      .banksel ram_address
     0058 11rr                      1-  912     	IORAR	r0x102A,W
     0059 0903                      1-  913     	BTRSS	STATUS,2
     005A 3rrr                      1-  914     	LGOTO	_00399_DS_
                                    1-  915     ;;unsigned compare: left < lit (0x96=150), size=2
                                    1-  916     	.line	527, "main.c"; 	if(count3S < 150)
     005B 2100                      1-  917     	MOVIA	0x00
                                    1-  918     	BANKSEL	_count3S
     005C rrrr                      3-   71 m1      .banksel ram_address
     005D 04rr                      1-  919     	SUBAR	(_count3S + 1),W
     005E 0903                      1-  920     	BTRSS	STATUS,2
     005F 3rrr                      1-  921     	LGOTO	_00447_DS_
     0060 2196                      1-  922     	MOVIA	0x96
     0061 04rr                      1-  923     	SUBAR	_count3S,W
     0062                           1-  924     _00447_DS_:
     0062 0C03                      1-  925     	BTRSC	STATUS,0
     0063 3rrr                      1-  926     	LGOTO	_00390_DS_
                                    1-  927     	.line	529, "main.c"; 	if(++duty > 86)
                                    1-  928     	BANKSEL	_duty
     0064 rrrr                      3-   71 m1      .banksel ram_address
     0065 05rr                      1-  929     	INCR	_duty,F
                                    1-  930     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  931     ;;unsigned compare: left >= lit (0x57=87), size=1
     0066 2157                      1-  932     	MOVIA	0x57
     0067 04rr                      1-  933     	SUBAR	_duty,W
     0068 0803                      1-  934     	BTRSS	STATUS,0
     0069 3rrr                      1-  935     	LGOTO	_00399_DS_
                                    1-  936     	.line	530, "main.c"; 	duty = 87;
     006A 2157                      1-  937     	MOVIA	0x57
     006B 00rr                      1-  938     	MOVAR	_duty
     006C 3rrr                      1-  939     	LGOTO	_00399_DS_
     006D                           1-  940     _00390_DS_:
                                    1-  941     	.line	534, "main.c"; 	if(--duty < 70)
                                    1-  942     	BANKSEL	_duty
     006D rrrr                      3-   71 m1      .banksel ram_address
     006E 06rr                      1-  943     	DECR	_duty,F
                                    1-  944     ;;unsigned compare: left < lit (0x46=70), size=1
     006F 2146                      1-  945     	MOVIA	0x46
     0070 04rr                      1-  946     	SUBAR	_duty,W
     0071 0C03                      1-  947     	BTRSC	STATUS,0
     0072 3rrr                      1-  948     	LGOTO	_00399_DS_
                                    1-  949     	.line	535, "main.c"; 	duty = 70;
     0073 2146                      1-  950     	MOVIA	0x46
     0074 00rr                      1-  951     	MOVAR	_duty
     0075 3rrr                      1-  952     	LGOTO	_00399_DS_
     0076                           1-  953     _00398_DS_:
                                    1-  954     	.line	543, "main.c"; 	duty = 70;
     0076 2146                      1-  955     	MOVIA	0x46
                                    1-  956     	BANKSEL	_duty
     0077 rrrr                      3-   71 m1      .banksel ram_address
     0078 00rr                      1-  957     	MOVAR	_duty
     0079                           1-  958     _00399_DS_:
                                    1-  959     	.line	545, "main.c"; 	TMRH = 0x00;
     0079 02rr                      1-  960     	CLRR	_TMRH
                                    1-  961     	.line	546, "main.c"; 	PWM2DUTY = duty;
                                    1-  962     	BANKSEL	_duty
     007A rrrr                      3-   71 m1      .banksel ram_address
     007B 01rr                      1-  963     	MOVR	_duty,W
     007C 00rr                      1-  964     	SFUN	_PWM2DUTY
                                    1-  965     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  966     ;;unsigned compare: left >= lit (0xC=12), size=2
                                    1-  967     	.line	547, "main.c"; 	if(batValue > 11)
     007D 2100                      1-  968     	MOVIA	0x00
                                    1-  969     	BANKSEL	_batValue
     007E rrrr                      3-   71 m1      .banksel ram_address
     007F 04rr                      1-  970     	SUBAR	(_batValue + 1),W
     0080 0903                      1-  971     	BTRSS	STATUS,2
     0081 3rrr                      1-  972     	LGOTO	_00450_DS_
     0082 210C                      1-  973     	MOVIA	0x0c
     0083 04rr                      1-  974     	SUBAR	_batValue,W
     0084                           1-  975     _00450_DS_:
     0084 0803                      1-  976     	BTRSS	STATUS,0
     0085 3rrr                      1-  977     	LGOTO	_00403_DS_
                                    1-  978     	.line	549, "main.c"; 	LEDHON();
     0086 1Arr                      1-  979     	BSR	_PORTA,4
                                    1-  980     	.line	550, "main.c"; 	LEDLOFF();
     0087 1Crr                      1-  981     	BCR	_PORTA,0
     0088 3rrr                      1-  982     	LGOTO	_00405_DS_
                                    1-  983     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  984     ;;unsigned compare: left >= lit (0xB=11), size=2
     0089                           1-  985     _00403_DS_:
                                    1-  986     	.line	552, "main.c"; 	else if(batValue <= 10)
     0089 2100                      1-  987     	MOVIA	0x00
                                    1-  988     	BANKSEL	_batValue
     008A rrrr                      3-   71 m1      .banksel ram_address
     008B 04rr                      1-  989     	SUBAR	(_batValue + 1),W
     008C 0903                      1-  990     	BTRSS	STATUS,2
     008D 3rrr                      1-  991     	LGOTO	_00451_DS_
     008E 210B                      1-  992     	MOVIA	0x0b
     008F 04rr                      1-  993     	SUBAR	_batValue,W
     0090                           1-  994     _00451_DS_:
     0090 0C03                      1-  995     	BTRSC	STATUS,0
     0091 3rrr                      1-  996     	LGOTO	_00405_DS_
                                    1-  997     	.line	554, "main.c"; 	LEDHOFF();
     0092 1Err                      1-  998     	BCR	_PORTA,4
                                    1-  999     	.line	555, "main.c"; 	LEDLON();
     0093 18rr                      1- 1000     	BSR	_PORTA,0
     0094                           1- 1001     _00405_DS_:
                                    1- 1002     	.line	558, "main.c"; 	}
                                    1- 1003     	RETURN	
     0094 0010                      3-   26 m1      ret
                                    1- 1004     ; exit point of _workCtr
                                    1- 1006     ;***
                                    1- 1007     ;  pBlock Stats: dbName = C
                                    1- 1008     ;***
                                    1- 1009     ;has an exit
                                    1- 1010     ;; Starting pCode block
                                    1- 1011     .segment "code"; module=main, function=_pwmStop
     0000                           1- 1013     _pwmStop:
                                    1- 1014     ; 2 exit points
                                    1- 1015     	.line	496, "main.c"; 	T2CR1 = C_TMR2_Dis;
     0000 0200                      1- 1016     	CLRA	
     0001 00rr                      1- 1017     	SFUN	_T2CR1
                                    1- 1018     	.line	497, "main.c"; 	}
                                    1- 1019     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1- 1020     ; exit point of _pwmStop
                                    1- 1022     ;***
                                    1- 1023     ;  pBlock Stats: dbName = C
                                    1- 1024     ;***
                                    1- 1025     ;has an exit
                                    1- 1026     ;1 compiler assigned register :
                                    1- 1027     ;   r0x1028
                                    1- 1028     ;; Starting pCode block
                                    1- 1029     .segment "code"; module=main, function=_pwmInit
     0000                           1- 1031     _pwmInit:
                                    1- 1032     ; 2 exit points
                                    1- 1033     	.line	484, "main.c"; 	if(0x80&T2CR1)
     0000 00rr                      1- 1034     	SFUNR	_T2CR1
                                    1- 1035     	BANKSEL	r0x1028
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1- 1036     	MOVAR	r0x1028
     0003 0Frr                      1- 1037     	BTRSC	r0x1028,7
                                    1- 1038     	.line	485, "main.c"; 	return;
     0004 3rrr                      1- 1039     	LGOTO	_00366_DS_
                                    1- 1040     	.line	486, "main.c"; 	TMRH = 0x00;
     0005 02rr                      1- 1041     	CLRR	_TMRH
                                    1- 1042     	.line	487, "main.c"; 	TMR2 = 88;							
     0006 2158                      1- 1043     	MOVIA	0x58
     0007 00rr                      1- 1044     	SFUN	_TMR2
                                    1- 1045     	.line	490, "main.c"; 	T2CR2 = C_TMR2_ClkSrc_Inst | C_PS2_Div2;	// Enable Prescaler1, Prescaler1 dividing rate = 1:2, Timer1 clock source is instruction clock 
     0008 0200                      1- 1046     	CLRA	
     0009 00rr                      1- 1047     	SFUN	_T2CR2
                                    1- 1048     	.line	491, "main.c"; 	T2CR1 = C_PWM2_En | C_TMR2_Reload | C_TMR2_En;	// PWM1 output will be present on PB6 , PWM1 output is active high, reloaded from TMR1, non-stop mode
     000A 2183                      1- 1049     	MOVIA	0x83
     000B 00rr                      1- 1050     	SFUN	_T2CR1
     000C                           1- 1051     _00366_DS_:
                                    1- 1052     	.line	492, "main.c"; 	}
                                    1- 1053     	RETURN	
     000C 0010                      3-   26 m1      ret
                                    1- 1054     ; exit point of _pwmInit
                                    1- 1056     ;***
                                    1- 1057     ;  pBlock Stats: dbName = C
                                    1- 1058     ;***
                                    1- 1059     ;has an exit
                                    1- 1060     ;1 compiler assigned register :
                                    1- 1061     ;   r0x102B
                                    1- 1062     ;; Starting pCode block
                                    1- 1063     .segment "code"; module=main, function=_delay_us
     0000                           1- 1065     _delay_us:
                                    1- 1066     ; 2 exit points
                                    1- 1067     	.line	473, "main.c"; 	void delay_us(uint8_t time)
                                    1- 1068     	BANKSEL	r0x102B
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1- 1069     	MOVAR	r0x102B
     0002                           1- 1070     _00356_DS_:
                                    1- 1071     	.line	475, "main.c"; 	while(time)
                                    1- 1072     	BANKSEL	r0x102B
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 01rr                      1- 1073     	MOVR	r0x102B,W
     0004 0D03                      1- 1074     	BTRSC	STATUS,2
     0005 3rrr                      1- 1075     	LGOTO	_00359_DS_
                                    1- 1076     	.line	477, "main.c"; 	--time;
     0006 06rr                      1- 1077     	DECR	r0x102B,F
                                    1- 1078     	.line	478, "main.c"; 	NOP();
     0007 0000                      1- 1079     	nop
     0008 3rrr                      1- 1080     	LGOTO	_00356_DS_
     0009                           1- 1081     _00359_DS_:
                                    1- 1082     	.line	480, "main.c"; 	}
                                    1- 1083     	RETURN	
     0009 0010                      3-   26 m1      ret
                                    1- 1084     ; exit point of _delay_us
                                    1- 1086     ;***
                                    1- 1087     ;  pBlock Stats: dbName = C
                                    1- 1088     ;***
                                    1- 1089     ;has an exit
                                    1- 1090     ;; Starting pCode block
                                    1- 1091     .segment "code"; module=main, function=_Delay10Us
     0000                           1- 1093     _Delay10Us:
                                    1- 1094     ; 2 exit points
                                    1- 1095     	.line	465, "main.c"; 	NOP();
     0000 0000                      1- 1096     	nop
                                    1- 1097     	.line	466, "main.c"; 	NOP();
     0001 0000                      1- 1098     	nop
                                    1- 1099     	.line	467, "main.c"; 	NOP();
     0002 0000                      1- 1100     	nop
                                    1- 1101     	.line	468, "main.c"; 	NOP();
     0003 0000                      1- 1102     	nop
                                    1- 1103     	.line	469, "main.c"; 	NOP();
     0004 0000                      1- 1104     	nop
                                    1- 1105     	.line	470, "main.c"; 	NOP();
     0005 0000                      1- 1106     	nop
                                    1- 1107     	.line	471, "main.c"; 	}
                                    1- 1108     	RETURN	
     0006 0010                      3-   26 m1      ret
                                    1- 1109     ; exit point of _Delay10Us
                                    1- 1111     ;***
                                    1- 1112     ;  pBlock Stats: dbName = C
                                    1- 1113     ;***
                                    1- 1114     ;has an exit
                                    1- 1115     ;; Starting pCode block
                                    1- 1116     .segment "code"; module=main, function=_gotoSleep
     0000                           1- 1118     _gotoSleep:
                                    1- 1119     ; 2 exit points
                                    1- 1120     	.line	435, "main.c"; 	COM1 = 1;
     0000 1Arr                      1- 1121     	BSR	_PORTB,5
                                    1- 1122     	.line	436, "main.c"; 	COM2 = 1;
     0001 19rr                      1- 1123     	BSR	_PORTB,3
                                    1- 1124     	.line	437, "main.c"; 	shiwei = gewei = 8;
     0002 2108                      1- 1125     	MOVIA	0x08
                                    1- 1126     	BANKSEL	_gewei
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1- 1127     	MOVAR	_gewei
                                    1- 1128     	BANKSEL	_shiwei
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 00rr                      1- 1129     	MOVAR	_shiwei
                                    1- 1130     	.line	438, "main.c"; 	workStep = 0;
                                    1- 1131     	BANKSEL	_workStep
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 02rr                      1- 1132     	CLRR	_workStep
                                    1- 1133     	.line	439, "main.c"; 	firstTime = 1;
     0009 2101                      1- 1134     	MOVIA	0x01
                                    1- 1135     	BANKSEL	_firstTime
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 00rr                      1- 1136     	MOVAR	_firstTime
                                    1- 1137     	.line	440, "main.c"; 	AWUCON = 0x20;
     000C 2120                      1- 1138     	MOVIA	0x20
     000D 00rr                      1- 1139     	MOVAR	_AWUCON
                                    1- 1140     	.line	441, "main.c"; 	BWUCON = 0x02;
     000E 2102                      1- 1141     	MOVIA	0x02
     000F 00rr                      1- 1142     	MOVAR	_BWUCON
                                    1- 1143     	.line	442, "main.c"; 	LEDHOFF();
     0010 1Err                      1- 1144     	BCR	_PORTA,4
                                    1- 1145     	.line	443, "main.c"; 	LEDLOFF();
     0011 1Crr                      1- 1146     	BCR	_PORTA,0
                                    1- 1147     	.line	444, "main.c"; 	sleepTime = 0;
                                    1- 1148     	BANKSEL	_sleepTime
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 02rr                      1- 1149     	CLRR	_sleepTime
                                    1- 1150     	.line	445, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PABKey;
     0014 2103                      1- 1151     	MOVIA	0x03
     0015 00rr                      1- 1152     	MOVAR	_INTE
                                    1- 1153     	.line	446, "main.c"; 	PCON =  C_LVR_En;	
     0016 2108                      1- 1154     	MOVIA	0x08
     0017 00rr                      1- 1155     	MOVAR	_PCON
                                    1- 1156     	.line	447, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0018 02rr                      1- 1157     	CLRR	_INTF
                                    1- 1158     	.line	448, "main.c"; 	CLRWDT();
     0019 0002                      1- 1159     	clrwdt
                                    1- 1160     	.line	449, "main.c"; 	ENI();
     001A 0004                      1- 1161     	ENI
                                    1- 1162     	.line	450, "main.c"; 	SLEEP();
     001B 0001                      1- 1163     	sleep
                                    1- 1164     	.line	451, "main.c"; 	AWUCON = 0x00;
     001C 02rr                      1- 1165     	CLRR	_AWUCON
                                    1- 1166     	.line	452, "main.c"; 	BWUCON = 0x00;
     001D 02rr                      1- 1167     	CLRR	_BWUCON
                                    1- 1168     	.line	453, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PABKey;	// Enable Timer0、Timer1、WDT overflow interrupt
     001E 2103                      1- 1169     	MOVIA	0x03
     001F 00rr                      1- 1170     	MOVAR	_INTE
                                    1- 1171     	.line	454, "main.c"; 	INTF = 0;
     0020 02rr                      1- 1172     	CLRR	_INTF
                                    1- 1173     	.line	455, "main.c"; 	PCON &= 0xEF;
     0021 1Err                      1- 1174     	BCR	_PCON,4
                                    1- 1175     	.line	460, "main.c"; 	}
                                    1- 1176     	RETURN	
     0022 0010                      3-   26 m1      ret
                                    1- 1177     ; exit point of _gotoSleep
                                    1- 1179     ;***
                                    1- 1180     ;  pBlock Stats: dbName = C
                                    1- 1181     ;***
                                    1- 1182     ;has an exit
                                    1- 1183     ;; Starting pCode block
                                    1- 1184     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1- 1186     _F_wait_eoc:
                                    1- 1187     ; 2 exit points
     0000                           1- 1188     _00343_DS_:
                                    1- 1189     	.line	426, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1- 1190     	BTRSS	_ADMDbits,5
     0001 3rrr                      1- 1191     	LGOTO	_00343_DS_
                                    1- 1192     	.line	428, "main.c"; 	}
                                    1- 1193     	RETURN	
     0002 0010                      3-   26 m1      ret
                                    1- 1194     ; exit point of _F_wait_eoc
                                    1- 1196     ;***
                                    1- 1197     ;  pBlock Stats: dbName = C
                                    1- 1198     ;***
                                    1- 1199     ;has an exit
                                    1- 1200     ;functions called:
                                    1- 1201     ;   _delay_us
                                    1- 1202     ;   _F_wait_eoc
                                    1- 1203     ;   _delay_us
                                    1- 1204     ;   _F_wait_eoc
                                    1- 1205     ;6 compiler assigned registers:
                                    1- 1206     ;   r0x102C
                                    1- 1207     ;   r0x102D
                                    1- 1208     ;   r0x102E
                                    1- 1209     ;   r0x102F
                                    1- 1210     ;   r0x1030
                                    1- 1211     ;   r0x1031
                                    1- 1212     ;; Starting pCode block
                                    1- 1213     .segment "code"; module=main, function=_F_AIN2_Convert
                                    1- 1215     ;local variable name mapping:
     0000                           1- 1218     _F_AIN2_Convert:
                                    1- 1219     ; 2 exit points
                                    1- 1220     	.line	409, "main.c"; 	void F_AIN2_Convert(char count)
                                    1- 1221     	BANKSEL	r0x102C
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1- 1222     	MOVAR	r0x102C
                                    1- 1223     	.line	411, "main.c"; 	R_AIN2_DATA=R_AIN2_DATA_LB=0x00;   
                                    1- 1224     	BANKSEL	_R_AIN2_DATA_LB
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1225     	CLRR	_R_AIN2_DATA_LB
                                    1- 1226     	BANKSEL	_R_AIN2_DATA
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1- 1227     	CLRR	_R_AIN2_DATA
     0006 02rr                      1- 1228     	CLRR	(_R_AIN2_DATA + 1)
                                    1- 1229     	.line	413, "main.c"; 	ADMD  = 0x90 | C_ADC_PA2;				// Select AIN6(PB1) pad as ADC input
     0007 2192                      1- 1230     	MOVIA	0x92
     0008 00rr                      1- 1231     	MOVAR	_ADMD
                                    1- 1232     	.line	414, "main.c"; 	delay_us(200);	
     0009 21C8                      1- 1233     	MOVIA	0xc8
     000A 2rrr                      1- 1234     	LCALL	_delay_us
                                    1- 1235     	.line	415, "main.c"; 	for(i=1;i<=count;i++)
     000B 2101                      1- 1236     	MOVIA	0x01
                                    1- 1237     	BANKSEL	r0x102D
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 00rr                      1- 1238     	MOVAR	r0x102D
     000E                           1- 1239     _00336_DS_:
                                    1- 1240     	BANKSEL	r0x102D
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 01rr                      1- 1241     	MOVR	r0x102D,W
                                    1- 1242     	BANKSEL	r0x102C
     0010 rrrr                      3-   71 m1      .banksel ram_address
     0011 04rr                      1- 1243     	SUBAR	r0x102C,W
     0012 0803                      1- 1244     	BTRSS	STATUS,0
     0013 3rrr                      1- 1245     	LGOTO	_00338_DS_
                                    1- 1246     	.line	417, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0014 1Brr                      1- 1247     	BSR	_ADMDbits,6
                                    1- 1248     	.line	418, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     0015 2rrr                      1- 1249     	LCALL	_F_wait_eoc
                                    1- 1250     	.line	419, "main.c"; 	R_AIN2_DATA_LB += ( 0x0F & ADR); 
     0016 210F                      1- 1251     	MOVIA	0x0f
     0017 10rr                      1- 1252     	ANDAR	_ADR,W
                                    1- 1253     ;;3	MOVAR	r0x102E
                                    1- 1254     	BANKSEL	_R_AIN2_DATA_LB
     0018 rrrr                      3-   71 m1      .banksel ram_address
     0019 03rr                      1- 1255     	ADDAR	_R_AIN2_DATA_LB,F
                                    1- 1256     	.line	420, "main.c"; 	R_AIN2_DATA    += ADD; 
     001A 01rr                      1- 1257     	MOVR	_ADD,W
                                    1- 1258     	BANKSEL	r0x102E
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 00rr                      1- 1259     	MOVAR	r0x102E
                                    1- 1260     ;;1	CLRR	r0x102F
                                    1- 1261     ;;112	MOVR	r0x102E,W
                                    1- 1262     ;;110	MOVAR	r0x1030
     001D 2100                      1- 1263     	MOVIA	0x00
                                    1- 1264     	BANKSEL	r0x1031
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 00rr                      1- 1265     	MOVAR	r0x1031
                                    1- 1266     ;;111	MOVR	r0x1030,W
                                    1- 1267     	BANKSEL	r0x102E
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 01rr                      1- 1268     	MOVR	r0x102E,W
                                    1- 1269     	BANKSEL	_R_AIN2_DATA
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 03rr                      1- 1270     	ADDAR	_R_AIN2_DATA,F
                                    1- 1271     	BANKSEL	r0x1031
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 01rr                      1- 1272     	MOVR	r0x1031,W
     0026 0C03                      1- 1273     	BTRSC	STATUS,0
     0027 05rr                      1- 1274     	INCR	r0x1031,W
     0028 0D03                      1- 1275     	BTRSC	STATUS,2
     0029 3rrr                      1- 1276     	LGOTO	_00001_DS_
                                    1- 1277     	BANKSEL	_R_AIN2_DATA
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 03rr                      1- 1278     	ADDAR	(_R_AIN2_DATA + 1),F
     002C                           1- 1279     _00001_DS_:
                                    1- 1280     	.line	415, "main.c"; 	for(i=1;i<=count;i++)
                                    1- 1281     	BANKSEL	r0x102D
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 05rr                      1- 1282     	INCR	r0x102D,F
     002E 3rrr                      1- 1283     	LGOTO	_00336_DS_
     002F                           1- 1284     _00338_DS_:
                                    1- 1285     	.line	422, "main.c"; 	}
                                    1- 1286     	RETURN	
     002F 0010                      3-   26 m1      ret
                                    1- 1287     ; exit point of _F_AIN2_Convert
                                    1- 1289     ;***
                                    1- 1290     ;  pBlock Stats: dbName = C
                                    1- 1291     ;***
                                    1- 1292     ;has an exit
                                    1- 1293     ;functions called:
                                    1- 1294     ;   _delay_us
                                    1- 1295     ;   _F_wait_eoc
                                    1- 1296     ;   _delay_us
                                    1- 1297     ;   _F_wait_eoc
                                    1- 1298     ;6 compiler assigned registers:
                                    1- 1299     ;   r0x1032
                                    1- 1300     ;   r0x1033
                                    1- 1301     ;   r0x1034
                                    1- 1302     ;   r0x1035
                                    1- 1303     ;   r0x1036
                                    1- 1304     ;   r0x1037
                                    1- 1305     ;; Starting pCode block
                                    1- 1306     .segment "code"; module=main, function=_F_AIN9_Convert
                                    1- 1308     ;local variable name mapping:
     0000                           1- 1311     _F_AIN9_Convert:
                                    1- 1312     ; 2 exit points
                                    1- 1313     	.line	394, "main.c"; 	void F_AIN9_Convert(char count)
                                    1- 1314     	BANKSEL	r0x1032
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1- 1315     	MOVAR	r0x1032
                                    1- 1316     	.line	396, "main.c"; 	R_AIN9_DATA=R_AIN9_DATA_LB=0x00;   
                                    1- 1317     	BANKSEL	_R_AIN9_DATA_LB
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1318     	CLRR	_R_AIN9_DATA_LB
                                    1- 1319     	BANKSEL	_R_AIN9_DATA
     0004 rrrr                      3-   71 m1      .banksel ram_address
     0005 02rr                      1- 1320     	CLRR	_R_AIN9_DATA
     0006 02rr                      1- 1321     	CLRR	(_R_AIN9_DATA + 1)
                                    1- 1322     	.line	398, "main.c"; 	ADMD  = 0x90 | C_ADC_PB4;				// Select AIN6(PB1) pad as ADC input
     0007 2199                      1- 1323     	MOVIA	0x99
     0008 00rr                      1- 1324     	MOVAR	_ADMD
                                    1- 1325     	.line	399, "main.c"; 	delay_us(200);	
     0009 21C8                      1- 1326     	MOVIA	0xc8
     000A 2rrr                      1- 1327     	LCALL	_delay_us
                                    1- 1328     	.line	400, "main.c"; 	for(i=1;i<=count;i++)
     000B 2101                      1- 1329     	MOVIA	0x01
                                    1- 1330     	BANKSEL	r0x1033
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 00rr                      1- 1331     	MOVAR	r0x1033
     000E                           1- 1332     _00327_DS_:
                                    1- 1333     	BANKSEL	r0x1033
     000E rrrr                      3-   71 m1      .banksel ram_address
     000F 01rr                      1- 1334     	MOVR	r0x1033,W
                                    1- 1335     	BANKSEL	r0x1032
     0010 rrrr                      3-   71 m1      .banksel ram_address
     0011 04rr                      1- 1336     	SUBAR	r0x1032,W
     0012 0803                      1- 1337     	BTRSS	STATUS,0
     0013 3rrr                      1- 1338     	LGOTO	_00329_DS_
                                    1- 1339     	.line	402, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     0014 1Brr                      1- 1340     	BSR	_ADMDbits,6
                                    1- 1341     	.line	403, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
     0015 2rrr                      1- 1342     	LCALL	_F_wait_eoc
                                    1- 1343     	.line	404, "main.c"; 	R_AIN9_DATA_LB += ( 0x0F & ADR); 
     0016 210F                      1- 1344     	MOVIA	0x0f
     0017 10rr                      1- 1345     	ANDAR	_ADR,W
                                    1- 1346     ;;3	MOVAR	r0x1034
                                    1- 1347     	BANKSEL	_R_AIN9_DATA_LB
     0018 rrrr                      3-   71 m1      .banksel ram_address
     0019 03rr                      1- 1348     	ADDAR	_R_AIN9_DATA_LB,F
                                    1- 1349     	.line	405, "main.c"; 	R_AIN9_DATA    += ADD; 
     001A 01rr                      1- 1350     	MOVR	_ADD,W
                                    1- 1351     	BANKSEL	r0x1034
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 00rr                      1- 1352     	MOVAR	r0x1034
                                    1- 1353     ;;1	CLRR	r0x1035
                                    1- 1354     ;;109	MOVR	r0x1034,W
                                    1- 1355     ;;107	MOVAR	r0x1036
     001D 2100                      1- 1356     	MOVIA	0x00
                                    1- 1357     	BANKSEL	r0x1037
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 00rr                      1- 1358     	MOVAR	r0x1037
                                    1- 1359     ;;108	MOVR	r0x1036,W
                                    1- 1360     	BANKSEL	r0x1034
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 01rr                      1- 1361     	MOVR	r0x1034,W
                                    1- 1362     	BANKSEL	_R_AIN9_DATA
     0022 rrrr                      3-   71 m1      .banksel ram_address
     0023 03rr                      1- 1363     	ADDAR	_R_AIN9_DATA,F
                                    1- 1364     	BANKSEL	r0x1037
     0024 rrrr                      3-   71 m1      .banksel ram_address
     0025 01rr                      1- 1365     	MOVR	r0x1037,W
     0026 0C03                      1- 1366     	BTRSC	STATUS,0
     0027 05rr                      1- 1367     	INCR	r0x1037,W
     0028 0D03                      1- 1368     	BTRSC	STATUS,2
     0029 3rrr                      1- 1369     	LGOTO	_00002_DS_
                                    1- 1370     	BANKSEL	_R_AIN9_DATA
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 03rr                      1- 1371     	ADDAR	(_R_AIN9_DATA + 1),F
     002C                           1- 1372     _00002_DS_:
                                    1- 1373     	.line	400, "main.c"; 	for(i=1;i<=count;i++)
                                    1- 1374     	BANKSEL	r0x1033
     002C rrrr                      3-   71 m1      .banksel ram_address
     002D 05rr                      1- 1375     	INCR	r0x1033,F
     002E 3rrr                      1- 1376     	LGOTO	_00327_DS_
     002F                           1- 1377     _00329_DS_:
                                    1- 1378     	.line	407, "main.c"; 	}
                                    1- 1379     	RETURN	
     002F 0010                      3-   26 m1      ret
                                    1- 1380     ; exit point of _F_AIN9_Convert
                                    1- 1382     ;***
                                    1- 1383     ;  pBlock Stats: dbName = C
                                    1- 1384     ;***
                                    1- 1385     ;has an exit
                                    1- 1386     ;functions called:
                                    1- 1387     ;   _F_AIN2_Convert
                                    1- 1388     ;   _F_AIN2_Convert
                                    1- 1389     ;4 compiler assigned registers:
                                    1- 1390     ;   r0x1038
                                    1- 1391     ;   r0x1039
                                    1- 1392     ;   r0x103A
                                    1- 1393     ;   r0x103B
                                    1- 1394     ;; Starting pCode block
                                    1- 1395     .segment "code"; module=main, function=_checkPWAAD
     0000                           1- 1397     _checkPWAAD:
                                    1- 1398     ; 2 exit points
                                    1- 1399     	.line	382, "main.c"; 	R_AIN2_DATA = R_AIN2_DATA_LB = 0x00;
                                    1- 1400     	BANKSEL	_R_AIN2_DATA_LB
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1- 1401     	CLRR	_R_AIN2_DATA_LB
                                    1- 1402     	BANKSEL	_R_AIN2_DATA
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1403     	CLRR	_R_AIN2_DATA
     0004 02rr                      1- 1404     	CLRR	(_R_AIN2_DATA + 1)
                                    1- 1405     	.line	383, "main.c"; 	F_AIN2_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1- 1406     	MOVIA	0x08
     0006 2rrr                      1- 1407     	LCALL	_F_AIN2_Convert
                                    1- 1408     	.line	384, "main.c"; 	R_AIN2_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1- 1409     	BANKSEL	_R_AIN2_DATA
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 15rr                      1- 1410     	SWAPR	(_R_AIN2_DATA + 1),W
     0009 22F0                      1- 1411     	ANDIA	0xf0
     000A 00rr                      1- 1412     	MOVAR	(_R_AIN2_DATA + 1)
     000B 15rr                      1- 1413     	SWAPR	_R_AIN2_DATA,W
     000C 00rr                      1- 1414     	MOVAR	_R_AIN2_DATA
     000D 220F                      1- 1415     	ANDIA	0x0f
     000E 11rr                      1- 1416     	IORAR	(_R_AIN2_DATA + 1),F
     000F 12rr                      1- 1417     	XORAR	_R_AIN2_DATA,F
                                    1- 1418     	.line	385, "main.c"; 	R_AIN2_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1- 1419     	MOVIA	0xf0
                                    1- 1420     	BANKSEL	_R_AIN2_DATA_LB
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 10rr                      1- 1421     	ANDAR	_R_AIN2_DATA_LB,F
                                    1- 1422     	.line	386, "main.c"; 	R_AIN2_DATA += R_AIN2_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1- 1423     	MOVR	_R_AIN2_DATA_LB,W
                                    1- 1424     	BANKSEL	r0x103A
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 00rr                      1- 1425     	MOVAR	r0x103A
                                    1- 1426     ;;1	MOVAR	r0x1038
                                    1- 1427     ;;1	CLRR	r0x1039
                                    1- 1428     ;;106	MOVR	r0x1038,W
     0016 2100                      1- 1429     	MOVIA	0x00
                                    1- 1430     	BANKSEL	r0x103B
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1- 1431     	MOVAR	r0x103B
                                    1- 1432     	BANKSEL	r0x103A
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 01rr                      1- 1433     	MOVR	r0x103A,W
                                    1- 1434     	BANKSEL	_R_AIN2_DATA
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 03rr                      1- 1435     	ADDAR	_R_AIN2_DATA,F
                                    1- 1436     	BANKSEL	r0x103B
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1- 1437     	MOVR	r0x103B,W
     001F 0C03                      1- 1438     	BTRSC	STATUS,0
     0020 05rr                      1- 1439     	INCR	r0x103B,W
     0021 0D03                      1- 1440     	BTRSC	STATUS,2
     0022 3rrr                      1- 1441     	LGOTO	_00003_DS_
                                    1- 1442     	BANKSEL	_R_AIN2_DATA
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 03rr                      1- 1443     	ADDAR	(_R_AIN2_DATA + 1),F
                                    1- 1444     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1- 1445     _00003_DS_:
                                    1- 1446     	.line	387, "main.c"; 	R_AIN2_DATA >>=3;					// R_AIN0_DATA divided 8	
     0025 1C03                      1- 1447     	BCR	STATUS,0
                                    1- 1448     	BANKSEL	_R_AIN2_DATA
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 13rr                      1- 1449     	RRR	(_R_AIN2_DATA + 1),F
     0028 13rr                      1- 1450     	RRR	_R_AIN2_DATA,F
                                    1- 1451     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1- 1452     	BCR	STATUS,0
     002A 13rr                      1- 1453     	RRR	(_R_AIN2_DATA + 1),F
     002B 13rr                      1- 1454     	RRR	_R_AIN2_DATA,F
                                    1- 1455     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1- 1456     	BCR	STATUS,0
     002D 13rr                      1- 1457     	RRR	(_R_AIN2_DATA + 1),F
     002E 13rr                      1- 1458     	RRR	_R_AIN2_DATA,F
                                    1- 1459     	.line	389, "main.c"; 	}
                                    1- 1460     	RETURN	
     002F 0010                      3-   26 m1      ret
                                    1- 1461     ; exit point of _checkPWAAD
                                    1- 1463     ;***
                                    1- 1464     ;  pBlock Stats: dbName = C
                                    1- 1465     ;***
                                    1- 1466     ;has an exit
                                    1- 1467     ;functions called:
                                    1- 1468     ;   _F_AIN9_Convert
                                    1- 1469     ;   __divuint
                                    1- 1470     ;   _F_AIN9_Convert
                                    1- 1471     ;   __divuint
                                    1- 1472     ;7 compiler assigned registers:
                                    1- 1473     ;   r0x103C
                                    1- 1474     ;   r0x103D
                                    1- 1475     ;   r0x103E
                                    1- 1476     ;   r0x103F
                                    1- 1477     ;   STK02
                                    1- 1478     ;   STK01
                                    1- 1479     ;   STK00
                                    1- 1480     ;; Starting pCode block
                                    1- 1481     .segment "code"; module=main, function=_checkBatAD
     0000                           1- 1483     _checkBatAD:
                                    1- 1484     ; 2 exit points
                                    1- 1485     	.line	363, "main.c"; 	R_AIN9_DATA = R_AIN9_DATA_LB = 0x00;
                                    1- 1486     	BANKSEL	_R_AIN9_DATA_LB
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 02rr                      1- 1487     	CLRR	_R_AIN9_DATA_LB
                                    1- 1488     	BANKSEL	_R_AIN9_DATA
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1489     	CLRR	_R_AIN9_DATA
     0004 02rr                      1- 1490     	CLRR	(_R_AIN9_DATA + 1)
                                    1- 1491     	.line	364, "main.c"; 	F_AIN9_Convert(8);					// execute AIN0 ADC converting 8 times
     0005 2108                      1- 1492     	MOVIA	0x08
     0006 2rrr                      1- 1493     	LCALL	_F_AIN9_Convert
                                    1- 1494     	.line	365, "main.c"; 	R_AIN9_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
                                    1- 1495     	BANKSEL	_R_AIN9_DATA
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 15rr                      1- 1496     	SWAPR	(_R_AIN9_DATA + 1),W
     0009 22F0                      1- 1497     	ANDIA	0xf0
     000A 00rr                      1- 1498     	MOVAR	(_R_AIN9_DATA + 1)
     000B 15rr                      1- 1499     	SWAPR	_R_AIN9_DATA,W
     000C 00rr                      1- 1500     	MOVAR	_R_AIN9_DATA
     000D 220F                      1- 1501     	ANDIA	0x0f
     000E 11rr                      1- 1502     	IORAR	(_R_AIN9_DATA + 1),F
     000F 12rr                      1- 1503     	XORAR	_R_AIN9_DATA,F
                                    1- 1504     	.line	366, "main.c"; 	R_AIN9_DATA_LB &= 0xF0;				// Only get Bit7~4
     0010 21F0                      1- 1505     	MOVIA	0xf0
                                    1- 1506     	BANKSEL	_R_AIN9_DATA_LB
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 10rr                      1- 1507     	ANDAR	_R_AIN9_DATA_LB,F
                                    1- 1508     	.line	367, "main.c"; 	R_AIN9_DATA += R_AIN9_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     0013 01rr                      1- 1509     	MOVR	_R_AIN9_DATA_LB,W
                                    1- 1510     	BANKSEL	r0x103E
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 00rr                      1- 1511     	MOVAR	r0x103E
                                    1- 1512     ;;1	MOVAR	r0x103C
                                    1- 1513     ;;1	CLRR	r0x103D
                                    1- 1514     ;;105	MOVR	r0x103C,W
     0016 2100                      1- 1515     	MOVIA	0x00
                                    1- 1516     	BANKSEL	r0x103F
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 00rr                      1- 1517     	MOVAR	r0x103F
                                    1- 1518     	BANKSEL	r0x103E
     0019 rrrr                      3-   71 m1      .banksel ram_address
     001A 01rr                      1- 1519     	MOVR	r0x103E,W
                                    1- 1520     	BANKSEL	_R_AIN9_DATA
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 03rr                      1- 1521     	ADDAR	_R_AIN9_DATA,F
                                    1- 1522     	BANKSEL	r0x103F
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1- 1523     	MOVR	r0x103F,W
     001F 0C03                      1- 1524     	BTRSC	STATUS,0
     0020 05rr                      1- 1525     	INCR	r0x103F,W
     0021 0D03                      1- 1526     	BTRSC	STATUS,2
     0022 3rrr                      1- 1527     	LGOTO	_00004_DS_
                                    1- 1528     	BANKSEL	_R_AIN9_DATA
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 03rr                      1- 1529     	ADDAR	(_R_AIN9_DATA + 1),F
                                    1- 1530     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     0025                           1- 1531     _00004_DS_:
                                    1- 1532     	.line	368, "main.c"; 	R_AIN9_DATA >>=3;					// R_AIN0_DATA divided 8	
     0025 1C03                      1- 1533     	BCR	STATUS,0
                                    1- 1534     	BANKSEL	_R_AIN9_DATA
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 13rr                      1- 1535     	RRR	(_R_AIN9_DATA + 1),F
     0028 13rr                      1- 1536     	RRR	_R_AIN9_DATA,F
                                    1- 1537     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     0029 1C03                      1- 1538     	BCR	STATUS,0
     002A 13rr                      1- 1539     	RRR	(_R_AIN9_DATA + 1),F
     002B 13rr                      1- 1540     	RRR	_R_AIN9_DATA,F
                                    1- 1541     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     002C 1C03                      1- 1542     	BCR	STATUS,0
     002D 13rr                      1- 1543     	RRR	(_R_AIN9_DATA + 1),F
     002E 13rr                      1- 1544     	RRR	_R_AIN9_DATA,F
                                    1- 1545     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1546     ;;unsigned compare: left >= lit (0xAF1=2801), size=2
                                    1- 1547     	.line	371, "main.c"; 	if(R_AIN9_DATA > 2800)
     002F 210A                      1- 1548     	MOVIA	0x0a
     0030 04rr                      1- 1549     	SUBAR	(_R_AIN9_DATA + 1),W
     0031 0903                      1- 1550     	BTRSS	STATUS,2
     0032 3rrr                      1- 1551     	LGOTO	_00315_DS_
     0033 21F1                      1- 1552     	MOVIA	0xf1
     0034 04rr                      1- 1553     	SUBAR	_R_AIN9_DATA,W
     0035                           1- 1554     _00315_DS_:
     0035 0803                      1- 1555     	BTRSS	STATUS,0
     0036 3rrr                      1- 1556     	LGOTO	_00305_DS_
                                    1- 1557     	.line	372, "main.c"; 	R_AIN9_DATA = 2800;
     0037 21F0                      1- 1558     	MOVIA	0xf0
                                    1- 1559     	BANKSEL	_R_AIN9_DATA
     0038 rrrr                      3-   71 m1      .banksel ram_address
     0039 00rr                      1- 1560     	MOVAR	_R_AIN9_DATA
     003A 210A                      1- 1561     	MOVIA	0x0a
     003B 00rr                      1- 1562     	MOVAR	(_R_AIN9_DATA + 1)
     003C 3rrr                      1- 1563     	LGOTO	_00306_DS_
                                    1- 1564     ;;unsigned compare: left < lit (0x898=2200), size=2
     003D                           1- 1565     _00305_DS_:
                                    1- 1566     	.line	373, "main.c"; 	else if(R_AIN9_DATA < 2200)
     003D 2108                      1- 1567     	MOVIA	0x08
                                    1- 1568     	BANKSEL	_R_AIN9_DATA
     003E rrrr                      3-   71 m1      .banksel ram_address
     003F 04rr                      1- 1569     	SUBAR	(_R_AIN9_DATA + 1),W
     0040 0903                      1- 1570     	BTRSS	STATUS,2
     0041 3rrr                      1- 1571     	LGOTO	_00316_DS_
     0042 2198                      1- 1572     	MOVIA	0x98
     0043 04rr                      1- 1573     	SUBAR	_R_AIN9_DATA,W
     0044                           1- 1574     _00316_DS_:
     0044 0C03                      1- 1575     	BTRSC	STATUS,0
     0045 3rrr                      1- 1576     	LGOTO	_00306_DS_
                                    1- 1577     	.line	374, "main.c"; 	R_AIN9_DATA = 2200;
     0046 2198                      1- 1578     	MOVIA	0x98
                                    1- 1579     	BANKSEL	_R_AIN9_DATA
     0047 rrrr                      3-   71 m1      .banksel ram_address
     0048 00rr                      1- 1580     	MOVAR	_R_AIN9_DATA
     0049 2108                      1- 1581     	MOVIA	0x08
     004A 00rr                      1- 1582     	MOVAR	(_R_AIN9_DATA + 1)
     004B                           1- 1583     _00306_DS_:
                                    1- 1584     	.line	375, "main.c"; 	batValue = R_AIN9_DATA - 2200;
     004B 2168                      1- 1585     	MOVIA	0x68
                                    1- 1586     	BANKSEL	_R_AIN9_DATA
     004C rrrr                      3-   71 m1      .banksel ram_address
     004D 03rr                      1- 1587     	ADDAR	_R_AIN9_DATA,W
                                    1- 1588     	BANKSEL	_batValue
     004E rrrr                      3-   71 m1      .banksel ram_address
     004F 00rr                      1- 1589     	MOVAR	_batValue
     0050 21F7                      1- 1590     	MOVIA	0xf7
     0051 00rr                      1- 1591     	MOVAR	(_batValue + 1)
                                    1- 1592     	BANKSEL	_R_AIN9_DATA
     0052 rrrr                      3-   71 m1      .banksel ram_address
     0053 01rr                      1- 1593     	MOVR	(_R_AIN9_DATA + 1),W
     0054 0C03                      1- 1594     	BTRSC	STATUS,0
     0055 05rr                      1- 1595     	INCR	(_R_AIN9_DATA + 1),W
     0056 0D03                      1- 1596     	BTRSC	STATUS,2
     0057 3rrr                      1- 1597     	LGOTO	_00005_DS_
                                    1- 1598     	BANKSEL	_batValue
     0058 rrrr                      3-   71 m1      .banksel ram_address
     0059 03rr                      1- 1599     	ADDAR	(_batValue + 1),F
     005A                           1- 1600     _00005_DS_:
                                    1- 1601     	.line	377, "main.c"; 	batValue= batValue/6;
     005A 2106                      1- 1602     	MOVIA	0x06
     005B 00rr                      1- 1603     	MOVAR	STK02
     005C 2100                      1- 1604     	MOVIA	0x00
     005D 00rr                      1- 1605     	MOVAR	STK01
                                    1- 1606     	BANKSEL	_batValue
     005E rrrr                      3-   71 m1      .banksel ram_address
     005F 01rr                      1- 1607     	MOVR	_batValue,W
     0060 00rr                      1- 1608     	MOVAR	STK00
     0061 01rr                      1- 1609     	MOVR	(_batValue + 1),W
     0062 2rrr                      1- 1610     	LCALL	__divuint
                                    1- 1611     	BANKSEL	_batValue
     0063 rrrr                      3-   71 m1      .banksel ram_address
     0064 00rr                      1- 1612     	MOVAR	(_batValue + 1)
     0065 01rr                      1- 1613     	MOVR	STK00,W
     0066 00rr                      1- 1614     	MOVAR	_batValue
                                    1- 1615     	.line	378, "main.c"; 	}
                                    1- 1616     	RETURN	
     0067 0010                      3-   26 m1      ret
                                    1- 1617     ; exit point of _checkBatAD
                                    1- 1619     ;***
                                    1- 1620     ;  pBlock Stats: dbName = C
                                    1- 1621     ;***
                                    1- 1622     ;has an exit
                                    1- 1623     ;functions called:
                                    1- 1624     ;   _delay_us
                                    1- 1625     ;   _delay_us
                                    1- 1626     ;; Starting pCode block
                                    1- 1627     .segment "code"; module=main, function=_initAD
     0000                           1- 1629     _initAD:
                                    1- 1630     ; 2 exit points
                                    1- 1631     	.line	339, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PA4 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2184                      1- 1632     	MOVIA	0x84
     0001 00rr                      1- 1633     	MOVAR	_ADMD
                                    1- 1634     	.line	344, "main.c"; 	ADVREFH = C_Vrefh_2V;					// ADC reference high voltage is supplied by internal 2V  (Note: ADC clock freq. must be equal or less than 250KHz)
     0002 02rr                      1- 1635     	CLRR	_ADVREFH
                                    1- 1636     	.line	349, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0003 2110                      1- 1637     	MOVIA	0x10
     0004 00rr                      1- 1638     	MOVAR	_ADR
                                    1- 1639     	.line	351, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0005 2103                      1- 1640     	MOVIA	0x03
     0006 00rr                      1- 1641     	MOVAR	_ADCR
                                    1- 1642     	.line	354, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0007 1Arr                      1- 1643     	BSR	_ADMDbits,4
                                    1- 1644     	.line	355, "main.c"; 	delay_us(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     0008 2164                      1- 1645     	MOVIA	0x64
     0009 2rrr                      1- 1646     	LCALL	_delay_us
                                    1- 1647     	.line	356, "main.c"; 	R_AIN2_DATA = R_AIN2_DATA_LB = R_AIN9_DATA = R_AIN9_DATA_LB = 0x00;
                                    1- 1648     	BANKSEL	_R_AIN9_DATA_LB
     000A rrrr                      3-   71 m1      .banksel ram_address
     000B 02rr                      1- 1649     	CLRR	_R_AIN9_DATA_LB
                                    1- 1650     	BANKSEL	_R_AIN9_DATA
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 02rr                      1- 1651     	CLRR	_R_AIN9_DATA
     000E 02rr                      1- 1652     	CLRR	(_R_AIN9_DATA + 1)
                                    1- 1653     	BANKSEL	_R_AIN2_DATA_LB
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 02rr                      1- 1654     	CLRR	_R_AIN2_DATA_LB
                                    1- 1655     	BANKSEL	_R_AIN2_DATA
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 02rr                      1- 1656     	CLRR	_R_AIN2_DATA
     0013 02rr                      1- 1657     	CLRR	(_R_AIN2_DATA + 1)
                                    1- 1658     	.line	358, "main.c"; 	}
                                    1- 1659     	RETURN	
     0014 0010                      3-   26 m1      ret
                                    1- 1660     ; exit point of _initAD
                                    1- 1662     ;***
                                    1- 1663     ;  pBlock Stats: dbName = C
                                    1- 1664     ;***
                                    1- 1665     ;has an exit
                                    1- 1666     ;functions called:
                                    1- 1667     ;   __gptrget1
                                    1- 1668     ;   __gptrput1
                                    1- 1669     ;   __gptrput1
                                    1- 1670     ;   __gptrget1
                                    1- 1671     ;   __gptrput1
                                    1- 1672     ;   __gptrput1
                                    1- 1673     ;   __gptrget1
                                    1- 1674     ;   __gptrput1
                                    1- 1675     ;   __gptrput1
                                    1- 1676     ;   __gptrget1
                                    1- 1677     ;   __gptrput1
                                    1- 1678     ;   __gptrput1
                                    1- 1679     ;7 compiler assigned registers:
                                    1- 1680     ;   r0x1040
                                    1- 1681     ;   STK00
                                    1- 1682     ;   r0x1041
                                    1- 1683     ;   STK01
                                    1- 1684     ;   r0x1042
                                    1- 1685     ;   STK02
                                    1- 1686     ;   r0x1043
                                    1- 1687     ;; Starting pCode block
                                    1- 1688     .segment "code"; module=main, function=_keyRead2
                                    1- 1690     ;local variable name mapping:
     0000                           1- 1695     _keyRead2:
                                    1- 1696     ; 2 exit points
                                    1- 1697     	.line	313, "main.c"; 	char keyRead2(char KeyStatus,uint8_t* keyCount)	
                                    1- 1698     	BANKSEL	r0x1040
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1- 1699     	MOVAR	r0x1040
     0002 01rr                      1- 1700     	MOVR	STK00,W
                                    1- 1701     	BANKSEL	r0x1041
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1- 1702     	MOVAR	r0x1041
     0005 01rr                      1- 1703     	MOVR	STK01,W
                                    1- 1704     	BANKSEL	r0x1042
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 00rr                      1- 1705     	MOVAR	r0x1042
     0008 01rr                      1- 1706     	MOVR	STK02,W
                                    1- 1707     	BANKSEL	r0x1043
     0009 rrrr                      3-   71 m1      .banksel ram_address
     000A 00rr                      1- 1708     	MOVAR	r0x1043
                                    1- 1709     	.line	315, "main.c"; 	if (KeyStatus)
                                    1- 1710     	BANKSEL	r0x1040
     000B rrrr                      3-   71 m1      .banksel ram_address
     000C 01rr                      1- 1711     	MOVR	r0x1040,W
     000D 0D03                      1- 1712     	BTRSC	STATUS,2
     000E 3rrr                      1- 1713     	LGOTO	_00291_DS_
                                    1- 1714     	.line	317, "main.c"; 	(*keyCount)++;
                                    1- 1715     	BANKSEL	r0x1043
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1- 1716     	MOVR	r0x1043,W
     0011 00rr                      1- 1717     	MOVAR	STK01
                                    1- 1718     	BANKSEL	r0x1042
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 01rr                      1- 1719     	MOVR	r0x1042,W
     0014 00rr                      1- 1720     	MOVAR	STK00
                                    1- 1721     	BANKSEL	r0x1041
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 01rr                      1- 1722     	MOVR	r0x1041,W
     0017 2rrr                      1- 1723     	LCALL	__gptrget1
                                    1- 1724     	BANKSEL	r0x1040
     0018 rrrr                      3-   71 m1      .banksel ram_address
     0019 00rr                      1- 1725     	MOVAR	r0x1040
     001A 05rr                      1- 1726     	INCR	r0x1040,F
     001B 01rr                      1- 1727     	MOVR	r0x1040,W
     001C 00rr                      1- 1728     	MOVAR	STK02
                                    1- 1729     	BANKSEL	r0x1043
     001D rrrr                      3-   71 m1      .banksel ram_address
     001E 01rr                      1- 1730     	MOVR	r0x1043,W
     001F 00rr                      1- 1731     	MOVAR	STK01
                                    1- 1732     	BANKSEL	r0x1042
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 01rr                      1- 1733     	MOVR	r0x1042,W
     0022 00rr                      1- 1734     	MOVAR	STK00
                                    1- 1735     	BANKSEL	r0x1041
     0023 rrrr                      3-   71 m1      .banksel ram_address
     0024 01rr                      1- 1736     	MOVR	r0x1041,W
     0025 2rrr                      1- 1737     	LCALL	__gptrput1
                                    1- 1738     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1- 1739     	.line	318, "main.c"; 	if(*keyCount >= 200)
     0026 21C8                      1- 1740     	MOVIA	0xc8
                                    1- 1741     	BANKSEL	r0x1040
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 04rr                      1- 1742     	SUBAR	r0x1040,W
     0029 0803                      1- 1743     	BTRSS	STATUS,0
     002A 3rrr                      1- 1744     	LGOTO	_00292_DS_
                                    1- 1745     	.line	320, "main.c"; 	*keyCount = 200;
     002B 21C8                      1- 1746     	MOVIA	0xc8
     002C 00rr                      1- 1747     	MOVAR	STK02
                                    1- 1748     	BANKSEL	r0x1043
     002D rrrr                      3-   71 m1      .banksel ram_address
     002E 01rr                      1- 1749     	MOVR	r0x1043,W
     002F 00rr                      1- 1750     	MOVAR	STK01
                                    1- 1751     	BANKSEL	r0x1042
     0030 rrrr                      3-   71 m1      .banksel ram_address
     0031 01rr                      1- 1752     	MOVR	r0x1042,W
     0032 00rr                      1- 1753     	MOVAR	STK00
                                    1- 1754     	BANKSEL	r0x1041
     0033 rrrr                      3-   71 m1      .banksel ram_address
     0034 01rr                      1- 1755     	MOVR	r0x1041,W
     0035 2rrr                      1- 1756     	LCALL	__gptrput1
     0036 3rrr                      1- 1757     	LGOTO	_00292_DS_
     0037                           1- 1758     _00291_DS_:
                                    1- 1759     	.line	325, "main.c"; 	if(*keyCount >= 8)
                                    1- 1760     	BANKSEL	r0x1043
     0037 rrrr                      3-   71 m1      .banksel ram_address
     0038 01rr                      1- 1761     	MOVR	r0x1043,W
     0039 00rr                      1- 1762     	MOVAR	STK01
                                    1- 1763     	BANKSEL	r0x1042
     003A rrrr                      3-   71 m1      .banksel ram_address
     003B 01rr                      1- 1764     	MOVR	r0x1042,W
     003C 00rr                      1- 1765     	MOVAR	STK00
                                    1- 1766     	BANKSEL	r0x1041
     003D rrrr                      3-   71 m1      .banksel ram_address
     003E 01rr                      1- 1767     	MOVR	r0x1041,W
     003F 2rrr                      1- 1768     	LCALL	__gptrget1
                                    1- 1769     	BANKSEL	r0x1040
     0040 rrrr                      3-   71 m1      .banksel ram_address
     0041 00rr                      1- 1770     	MOVAR	r0x1040
                                    1- 1771     ;;unsigned compare: left < lit (0x8=8), size=1
     0042 2108                      1- 1772     	MOVIA	0x08
     0043 04rr                      1- 1773     	SUBAR	r0x1040,W
     0044 0803                      1- 1774     	BTRSS	STATUS,0
     0045 3rrr                      1- 1775     	LGOTO	_00289_DS_
                                    1- 1776     	.line	327, "main.c"; 	*keyCount = 0;
     0046 2100                      1- 1777     	MOVIA	0x00
     0047 00rr                      1- 1778     	MOVAR	STK02
                                    1- 1779     	BANKSEL	r0x1043
     0048 rrrr                      3-   71 m1      .banksel ram_address
     0049 01rr                      1- 1780     	MOVR	r0x1043,W
     004A 00rr                      1- 1781     	MOVAR	STK01
                                    1- 1782     	BANKSEL	r0x1042
     004B rrrr                      3-   71 m1      .banksel ram_address
     004C 01rr                      1- 1783     	MOVR	r0x1042,W
     004D 00rr                      1- 1784     	MOVAR	STK00
                                    1- 1785     	BANKSEL	r0x1041
     004E rrrr                      3-   71 m1      .banksel ram_address
     004F 01rr                      1- 1786     	MOVR	r0x1041,W
     0050 2rrr                      1- 1787     	LCALL	__gptrput1
                                    1- 1788     	.line	328, "main.c"; 	return	1;
     0051 2101                      1- 1789     	MOVIA	0x01
     0052 3rrr                      1- 1790     	LGOTO	_00293_DS_
     0053                           1- 1791     _00289_DS_:
                                    1- 1792     	.line	330, "main.c"; 	*keyCount = 0;
     0053 2100                      1- 1793     	MOVIA	0x00
     0054 00rr                      1- 1794     	MOVAR	STK02
                                    1- 1795     	BANKSEL	r0x1043
     0055 rrrr                      3-   71 m1      .banksel ram_address
     0056 01rr                      1- 1796     	MOVR	r0x1043,W
     0057 00rr                      1- 1797     	MOVAR	STK01
                                    1- 1798     	BANKSEL	r0x1042
     0058 rrrr                      3-   71 m1      .banksel ram_address
     0059 01rr                      1- 1799     	MOVR	r0x1042,W
     005A 00rr                      1- 1800     	MOVAR	STK00
                                    1- 1801     	BANKSEL	r0x1041
     005B rrrr                      3-   71 m1      .banksel ram_address
     005C 01rr                      1- 1802     	MOVR	r0x1041,W
     005D 2rrr                      1- 1803     	LCALL	__gptrput1
     005E                           1- 1804     _00292_DS_:
                                    1- 1805     	.line	332, "main.c"; 	return 0;
     005E 2100                      1- 1806     	MOVIA	0x00
     005F                           1- 1807     _00293_DS_:
                                    1- 1808     	.line	333, "main.c"; 	}
                                    1- 1809     	RETURN	
     005F 0010                      3-   26 m1      ret
                                    1- 1810     ; exit point of _keyRead2
                                    1- 1812     ;***
                                    1- 1813     ;  pBlock Stats: dbName = C
                                    1- 1814     ;***
                                    1- 1815     ;has an exit
                                    1- 1816     ;1 compiler assigned register :
                                    1- 1817     ;   r0x1044
                                    1- 1818     ;; Starting pCode block
                                    1- 1819     .segment "code"; module=main, function=_keyRead
                                    1- 1821     ;local variable name mapping:
     0000                           1- 1823     _keyRead:
                                    1- 1824     ; 2 exit points
                                    1- 1825     	.line	280, "main.c"; 	char keyRead(char keyStatus)	
                                    1- 1826     	BANKSEL	r0x1044
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1- 1827     	MOVAR	r0x1044
                                    1- 1828     	.line	282, "main.c"; 	if(keyStatus)
     0002 01rr                      1- 1829     	MOVR	r0x1044,W
     0003 0D03                      1- 1830     	BTRSC	STATUS,2
     0004 3rrr                      1- 1831     	LGOTO	_00279_DS_
                                    1- 1832     	.line	284, "main.c"; 	keyCount++;
                                    1- 1833     	BANKSEL	_keyCount
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 05rr                      1- 1834     	INCR	_keyCount,F
                                    1- 1835     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1- 1836     	.line	285, "main.c"; 	if(keyCount >= 200)
     0007 21C8                      1- 1837     	MOVIA	0xc8
     0008 04rr                      1- 1838     	SUBAR	_keyCount,W
     0009 0803                      1- 1839     	BTRSS	STATUS,0
     000A 3rrr                      1- 1840     	LGOTO	_00280_DS_
                                    1- 1841     	.line	287, "main.c"; 	keyCount = 200;
     000B 21C8                      1- 1842     	MOVIA	0xc8
     000C 00rr                      1- 1843     	MOVAR	_keyCount
                                    1- 1844     	.line	288, "main.c"; 	if(!longPressFlag)
                                    1- 1845     	BANKSEL	_longPressFlag
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 01rr                      1- 1846     	MOVR	_longPressFlag,W
     000F 0903                      1- 1847     	BTRSS	STATUS,2
     0010 3rrr                      1- 1848     	LGOTO	_00280_DS_
                                    1- 1849     	.line	290, "main.c"; 	longPressFlag = 1;
     0011 2101                      1- 1850     	MOVIA	0x01
     0012 00rr                      1- 1851     	MOVAR	_longPressFlag
                                    1- 1852     	.line	291, "main.c"; 	return 2;
     0013 2102                      1- 1853     	MOVIA	0x02
     0014 3rrr                      1- 1854     	LGOTO	_00281_DS_
                                    1- 1855     ;;unsigned compare: left < lit (0xC8=200), size=1
     0015                           1- 1856     _00279_DS_:
                                    1- 1857     	.line	297, "main.c"; 	if(keyCount >= 200)
     0015 21C8                      1- 1858     	MOVIA	0xc8
                                    1- 1859     	BANKSEL	_keyCount
     0016 rrrr                      3-   71 m1      .banksel ram_address
     0017 04rr                      1- 1860     	SUBAR	_keyCount,W
     0018 0803                      1- 1861     	BTRSS	STATUS,0
     0019 3rrr                      1- 1862     	LGOTO	_00276_DS_
                                    1- 1863     	.line	299, "main.c"; 	keyCount = 0;
     001A 02rr                      1- 1864     	CLRR	_keyCount
                                    1- 1865     	.line	300, "main.c"; 	longPressFlag = 0;
                                    1- 1866     	BANKSEL	_longPressFlag
     001B rrrr                      3-   71 m1      .banksel ram_address
     001C 02rr                      1- 1867     	CLRR	_longPressFlag
                                    1- 1868     	.line	301, "main.c"; 	return	0;
     001D 2100                      1- 1869     	MOVIA	0x00
     001E 3rrr                      1- 1870     	LGOTO	_00281_DS_
                                    1- 1871     ;;unsigned compare: left < lit (0x8=8), size=1
     001F                           1- 1872     _00276_DS_:
                                    1- 1873     	.line	303, "main.c"; 	else if(keyCount >= 8)
     001F 2108                      1- 1874     	MOVIA	0x08
                                    1- 1875     	BANKSEL	_keyCount
     0020 rrrr                      3-   71 m1      .banksel ram_address
     0021 04rr                      1- 1876     	SUBAR	_keyCount,W
     0022 0803                      1- 1877     	BTRSS	STATUS,0
     0023 3rrr                      1- 1878     	LGOTO	_00277_DS_
                                    1- 1879     	.line	305, "main.c"; 	keyCount = 0;
     0024 02rr                      1- 1880     	CLRR	_keyCount
                                    1- 1881     	.line	306, "main.c"; 	return	1;
     0025 2101                      1- 1882     	MOVIA	0x01
     0026 3rrr                      1- 1883     	LGOTO	_00281_DS_
     0027                           1- 1884     _00277_DS_:
                                    1- 1885     	.line	308, "main.c"; 	keyCount = 0;
                                    1- 1886     	BANKSEL	_keyCount
     0027 rrrr                      3-   71 m1      .banksel ram_address
     0028 02rr                      1- 1887     	CLRR	_keyCount
     0029                           1- 1888     _00280_DS_:
                                    1- 1889     	.line	310, "main.c"; 	return 0;
     0029 2100                      1- 1890     	MOVIA	0x00
     002A                           1- 1891     _00281_DS_:
                                    1- 1892     	.line	311, "main.c"; 	}
                                    1- 1893     	RETURN	
     002A 0010                      3-   26 m1      ret
                                    1- 1894     ; exit point of _keyRead
                                    1- 1896     ;***
                                    1- 1897     ;  pBlock Stats: dbName = C
                                    1- 1898     ;***
                                    1- 1899     ;has an exit
                                    1- 1900     ;functions called:
                                    1- 1901     ;   _Delay10Us
                                    1- 1902     ;   _Delay10Us
                                    1- 1903     ;   _Delay10Us
                                    1- 1904     ;   _Delay10Us
                                    1- 1905     ;   _Delay10Us
                                    1- 1906     ;   _Delay10Us
                                    1- 1907     ;   _Delay10Us
                                    1- 1908     ;   _Delay10Us
                                    1- 1909     ;2 compiler assigned registers:
                                    1- 1910     ;   r0x1045
                                    1- 1911     ;   r0x1046
                                    1- 1912     ;; Starting pCode block
                                    1- 1913     .segment "code"; module=main, function=_ind_light_disp
                                    1- 1915     ;local variable name mapping:
     0000                           1- 1918     _ind_light_disp:
                                    1- 1919     ; 2 exit points
                                    1- 1920     	.line	255, "main.c"; 	void ind_light_disp( uint8_t udata )
                                    1- 1921     	BANKSEL	r0x1045
     0000 rrrr                      3-   71 m1      .banksel ram_address
     0001 00rr                      1- 1922     	MOVAR	r0x1045
                                    1- 1923     	.line	258, "main.c"; 	for(Count0=0;Count0<=7;Count0++)
                                    1- 1924     	BANKSEL	r0x1046
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 02rr                      1- 1925     	CLRR	r0x1046
     0004                           1- 1926     _00264_DS_:
                                    1- 1927     	.line	260, "main.c"; 	CLK=0;
     0004 1Frr                      1- 1928     	BCR	_PORTA,7
                                    1- 1929     	.line	261, "main.c"; 	Delay10Us();
     0005 2rrr                      1- 1930     	LCALL	_Delay10Us
                                    1- 1931     	.line	262, "main.c"; 	if(udata&0x80)
                                    1- 1932     	BANKSEL	r0x1045
     0006 rrrr                      3-   71 m1      .banksel ram_address
     0007 0Brr                      1- 1933     	BTRSS	r0x1045,7
     0008 3rrr                      1- 1934     	LGOTO	_00261_DS_
                                    1- 1935     	.line	264, "main.c"; 	DAT=1;
     0009 1Brr                      1- 1936     	BSR	_PORTA,6
                                    1- 1937     	.line	265, "main.c"; 	Delay10Us();
     000A 2rrr                      1- 1938     	LCALL	_Delay10Us
     000B 3rrr                      1- 1939     	LGOTO	_00262_DS_
     000C                           1- 1940     _00261_DS_:
                                    1- 1941     	.line	269, "main.c"; 	DAT=0;
     000C 1Frr                      1- 1942     	BCR	_PORTA,6
                                    1- 1943     	.line	270, "main.c"; 	Delay10Us();
     000D 2rrr                      1- 1944     	LCALL	_Delay10Us
     000E                           1- 1945     _00262_DS_:
                                    1- 1946     	.line	272, "main.c"; 	CLK=1;
     000E 1Brr                      1- 1947     	BSR	_PORTA,7
                                    1- 1948     	.line	273, "main.c"; 	Delay10Us();
     000F 2rrr                      1- 1949     	LCALL	_Delay10Us
                                    1- 1950     	.line	274, "main.c"; 	udata<<=1;
     0010 1C03                      1- 1951     	BCR	STATUS,0
                                    1- 1952     	BANKSEL	r0x1045
     0011 rrrr                      3-   71 m1      .banksel ram_address
     0012 14rr                      1- 1953     	RLR	r0x1045,F
                                    1- 1954     	.line	258, "main.c"; 	for(Count0=0;Count0<=7;Count0++)
                                    1- 1955     	BANKSEL	r0x1046
     0013 rrrr                      3-   71 m1      .banksel ram_address
     0014 05rr                      1- 1956     	INCR	r0x1046,F
                                    1- 1957     ;;swapping arguments (AOP_TYPEs 1/2)
                                    1- 1958     ;;unsigned compare: left >= lit (0x8=8), size=1
     0015 2108                      1- 1959     	MOVIA	0x08
     0016 04rr                      1- 1960     	SUBAR	r0x1046,W
     0017 0803                      1- 1961     	BTRSS	STATUS,0
     0018 3rrr                      1- 1962     	LGOTO	_00264_DS_
                                    1- 1963     	.line	276, "main.c"; 	CLK=0;
     0019 1Frr                      1- 1964     	BCR	_PORTA,7
                                    1- 1965     	.line	277, "main.c"; 	DAT=0;
     001A 1Frr                      1- 1966     	BCR	_PORTA,6
                                    1- 1967     	.line	278, "main.c"; 	}
                                    1- 1968     	RETURN	
     001B 0010                      3-   26 m1      ret
                                    1- 1969     ; exit point of _ind_light_disp
                                    1- 1971     ;***
                                    1- 1972     ;  pBlock Stats: dbName = C
                                    1- 1973     ;***
                                    1- 1974     ;has an exit
                                    1- 1975     ;functions called:
                                    1- 1976     ;   __gptrget1
                                    1- 1977     ;   _ind_light_disp
                                    1- 1978     ;   _delay_us
                                    1- 1979     ;   __gptrget1
                                    1- 1980     ;   _ind_light_disp
                                    1- 1981     ;   _delay_us
                                    1- 1982     ;   __gptrget1
                                    1- 1983     ;   _ind_light_disp
                                    1- 1984     ;   _delay_us
                                    1- 1985     ;   __gptrget1
                                    1- 1986     ;   _ind_light_disp
                                    1- 1987     ;   _delay_us
                                    1- 1988     ;5 compiler assigned registers:
                                    1- 1989     ;   r0x1047
                                    1- 1990     ;   r0x1048
                                    1- 1991     ;   STK01
                                    1- 1992     ;   STK00
                                    1- 1993     ;   r0x1049
                                    1- 1994     ;; Starting pCode block
                                    1- 1995     .segment "code"; module=main, function=_refresh
     0000                           1- 1997     _refresh:
                                    1- 1998     ; 2 exit points
                                    1- 1999     	.line	236, "main.c"; 	COM1 = 1;
     0000 1Arr                      1- 2000     	BSR	_PORTB,5
                                    1- 2001     	.line	237, "main.c"; 	COM2 = 1;
     0001 19rr                      1- 2002     	BSR	_PORTB,3
                                    1- 2003     	.line	238, "main.c"; 	if(shiwei > 0)
                                    1- 2004     	BANKSEL	_shiwei
     0002 rrrr                      3-   71 m1      .banksel ram_address
     0003 01rr                      1- 2005     	MOVR	_shiwei,W
     0004 0D03                      1- 2006     	BTRSC	STATUS,2
     0005 3rrr                      1- 2007     	LGOTO	_00255_DS_
                                    1- 2008     	.line	240, "main.c"; 	ind_light_disp(table[shiwei]);
     0006 01rr                      1- 2009     	MOVR	_shiwei,W
     0007 25rr                      1- 2010     	ADDIA	(_table + 0)
                                    1- 2011     	BANKSEL	r0x1047
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 00rr                      1- 2012     	MOVAR	r0x1047
     000A 21rr                      1- 2013     	MOVIA	((_table + 0) >> 8) & 0xff
     000B 0C03                      1- 2014     	BTRSC	STATUS,0
     000C 2501                      1- 2015     	ADDIA	0x01
                                    1- 2016     	BANKSEL	r0x1048
     000D rrrr                      3-   71 m1      .banksel ram_address
     000E 00rr                      1- 2017     	MOVAR	r0x1048
                                    1- 2018     	BANKSEL	r0x1047
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1- 2019     	MOVR	r0x1047,W
     0011 00rr                      1- 2020     	MOVAR	STK01
                                    1- 2021     	BANKSEL	r0x1048
     0012 rrrr                      3-   71 m1      .banksel ram_address
     0013 01rr                      1- 2022     	MOVR	r0x1048,W
     0014 00rr                      1- 2023     	MOVAR	STK00
     0015 2100                      1- 2024     	MOVIA	0x00
     0016 2rrr                      1- 2025     	LCALL	__gptrget1
                                    1- 2026     ;;104	MOVAR	r0x1049
     0017 2rrr                      1- 2027     	LCALL	_ind_light_disp
                                    1- 2028     	.line	241, "main.c"; 	COM1 = 1;
     0018 1Arr                      1- 2029     	BSR	_PORTB,5
                                    1- 2030     	.line	242, "main.c"; 	COM2 = 0;
     0019 1Drr                      1- 2031     	BCR	_PORTB,3
                                    1- 2032     	.line	243, "main.c"; 	delay_us(100);
     001A 2164                      1- 2033     	MOVIA	0x64
     001B 2rrr                      1- 2034     	LCALL	_delay_us
                                    1- 2035     	.line	244, "main.c"; 	COM1 = 1;
     001C 1Arr                      1- 2036     	BSR	_PORTB,5
                                    1- 2037     	.line	245, "main.c"; 	COM2 = 1;
     001D 19rr                      1- 2038     	BSR	_PORTB,3
     001E                           1- 2039     _00255_DS_:
                                    1- 2040     	.line	247, "main.c"; 	ind_light_disp(table[gewei]);
                                    1- 2041     	BANKSEL	_gewei
     001E rrrr                      3-   71 m1      .banksel ram_address
     001F 01rr                      1- 2042     	MOVR	_gewei,W
     0020 25rr                      1- 2043     	ADDIA	(_table + 0)
                                    1- 2044     	BANKSEL	r0x1047
     0021 rrrr                      3-   71 m1      .banksel ram_address
     0022 00rr                      1- 2045     	MOVAR	r0x1047
     0023 21rr                      1- 2046     	MOVIA	((_table + 0) >> 8) & 0xff
     0024 0C03                      1- 2047     	BTRSC	STATUS,0
     0025 2501                      1- 2048     	ADDIA	0x01
                                    1- 2049     	BANKSEL	r0x1048
     0026 rrrr                      3-   71 m1      .banksel ram_address
     0027 00rr                      1- 2050     	MOVAR	r0x1048
                                    1- 2051     	BANKSEL	r0x1047
     0028 rrrr                      3-   71 m1      .banksel ram_address
     0029 01rr                      1- 2052     	MOVR	r0x1047,W
     002A 00rr                      1- 2053     	MOVAR	STK01
                                    1- 2054     	BANKSEL	r0x1048
     002B rrrr                      3-   71 m1      .banksel ram_address
     002C 01rr                      1- 2055     	MOVR	r0x1048,W
     002D 00rr                      1- 2056     	MOVAR	STK00
     002E 2100                      1- 2057     	MOVIA	0x00
     002F 2rrr                      1- 2058     	LCALL	__gptrget1
                                    1- 2059     ;;103	MOVAR	r0x1049
     0030 2rrr                      1- 2060     	LCALL	_ind_light_disp
                                    1- 2061     	.line	248, "main.c"; 	COM1 = 0;
     0031 1Err                      1- 2062     	BCR	_PORTB,5
                                    1- 2063     	.line	249, "main.c"; 	COM2 = 1;
     0032 19rr                      1- 2064     	BSR	_PORTB,3
                                    1- 2065     	.line	250, "main.c"; 	delay_us(100);
     0033 2164                      1- 2066     	MOVIA	0x64
     0034 2rrr                      1- 2067     	LCALL	_delay_us
                                    1- 2068     	.line	251, "main.c"; 	COM1 = 1;
     0035 1Arr                      1- 2069     	BSR	_PORTB,5
                                    1- 2070     	.line	252, "main.c"; 	COM2 = 1;
     0036 19rr                      1- 2071     	BSR	_PORTB,3
                                    1- 2072     	.line	253, "main.c"; 	}
                                    1- 2073     	RETURN	
     0037 0010                      3-   26 m1      ret
                                    1- 2074     ; exit point of _refresh
                                    1- 2076     ;***
                                    1- 2077     ;  pBlock Stats: dbName = C
                                    1- 2078     ;***
                                    1- 2079     ;has an exit
                                    1- 2080     ;functions called:
                                    1- 2081     ;   _keyRead
                                    1- 2082     ;   _keyRead2
                                    1- 2083     ;   _keyRead2
                                    1- 2084     ;   _keyRead
                                    1- 2085     ;   _keyRead2
                                    1- 2086     ;   _keyRead2
                                    1- 2087     ;7 compiler assigned registers:
                                    1- 2088     ;   r0x104A
                                    1- 2089     ;   r0x104B
                                    1- 2090     ;   r0x104C
                                    1- 2091     ;   r0x104D
                                    1- 2092     ;   STK02
                                    1- 2093     ;   STK01
                                    1- 2094     ;   STK00
                                    1- 2095     ;; Starting pCode block
                                    1- 2096     .segment "code"; module=main, function=_keyCtr
                                    1- 2098     ;local variable name mapping:
     0000                           1- 2100     _keyCtr:
                                    1- 2101     ; 2 exit points
                                    1- 2102     	.line	205, "main.c"; 	uint8_t kclick = keyRead(0x20 & ~PORTA);
     0000 07rr                      1- 2103     	COMR	_PORTA,W
                                    1- 2104     	BANKSEL	r0x104A
     0001 rrrr                      3-   71 m1      .banksel ram_address
     0002 00rr                      1- 2105     	MOVAR	r0x104A
     0003 2120                      1- 2106     	MOVIA	0x20
     0004 10rr                      1- 2107     	ANDAR	r0x104A,F
     0005 01rr                      1- 2108     	MOVR	r0x104A,W
     0006 2rrr                      1- 2109     	LCALL	_keyRead
                                    1- 2110     	BANKSEL	r0x104A
     0007 rrrr                      3-   71 m1      .banksel ram_address
     0008 00rr                      1- 2111     	MOVAR	r0x104A
                                    1- 2112     	.line	206, "main.c"; 	if(kclick == 1)
     0009 2401                      1- 2113     	XORIA	0x01
     000A 0903                      1- 2114     	BTRSS	STATUS,2
     000B 3rrr                      1- 2115     	LGOTO	_00237_DS_
                                    1- 2116     	.line	209, "main.c"; 	workStep = 0;
                                    1- 2117     	BANKSEL	_workStep
     000C rrrr                      3-   71 m1      .banksel ram_address
     000D 02rr                      1- 2118     	CLRR	_workStep
     000E 3rrr                      1- 2119     	LGOTO	_00238_DS_
     000F                           1- 2120     _00237_DS_:
                                    1- 2121     	.line	211, "main.c"; 	else if(kclick == 2)
                                    1- 2122     	BANKSEL	r0x104A
     000F rrrr                      3-   71 m1      .banksel ram_address
     0010 01rr                      1- 2123     	MOVR	r0x104A,W
     0011 2402                      1- 2124     	XORIA	0x02
     0012 0903                      1- 2125     	BTRSS	STATUS,2
     0013 3rrr                      1- 2126     	LGOTO	_00238_DS_
                                    1- 2127     	.line	213, "main.c"; 	workStep = 1;
     0014 2101                      1- 2128     	MOVIA	0x01
                                    1- 2129     	BANKSEL	_workStep
     0015 rrrr                      3-   71 m1      .banksel ram_address
     0016 00rr                      1- 2130     	MOVAR	_workStep
     0017                           1- 2131     _00238_DS_:
                                    1- 2132     	.line	215, "main.c"; 	if(workStep)
                                    1- 2133     	BANKSEL	_workStep
     0017 rrrr                      3-   71 m1      .banksel ram_address
     0018 01rr                      1- 2134     	MOVR	_workStep,W
     0019 0D03                      1- 2135     	BTRSC	STATUS,2
     001A 3rrr                      1- 2136     	LGOTO	_00249_DS_
                                    1- 2137     	.line	217, "main.c"; 	if(keyRead2((0x08 & ~PORTA),&keyCount2))
     001B 07rr                      1- 2138     	COMR	_PORTA,W
                                    1- 2139     	BANKSEL	r0x104A
     001C rrrr                      3-   71 m1      .banksel ram_address
     001D 00rr                      1- 2140     	MOVAR	r0x104A
     001E 2108                      1- 2141     	MOVIA	0x08
     001F 10rr                      1- 2142     	ANDAR	r0x104A,F
     0020 21rr                      1- 2143     	MOVIA	((_keyCount2 + 0) >> 8) & 0xff
                                    1- 2144     	BANKSEL	r0x104B
     0021 rrrr                      3-   71 m1      .banksel ram_address
     0022 00rr                      1- 2145     	MOVAR	r0x104B
     0023 21rr                      1- 2146     	MOVIA	(_keyCount2 + 0)
                                    1- 2147     ;;116	BANKSEL	r0x104C
                                    1- 2148     ;;115	MOVAR	r0x104C
     0024 00rr                      1- 2149     	MOVAR	STK02
                                    1- 2150     	BANKSEL	r0x104B
     0025 rrrr                      3-   71 m1      .banksel ram_address
     0026 01rr                      1- 2151     	MOVR	r0x104B,W
     0027 00rr                      1- 2152     	MOVAR	STK01
     0028 2100                      1- 2153     	MOVIA	0x00
     0029 00rr                      1- 2154     	MOVAR	STK00
                                    1- 2155     	BANKSEL	r0x104A
     002A rrrr                      3-   71 m1      .banksel ram_address
     002B 01rr                      1- 2156     	MOVR	r0x104A,W
     002C 2rrr                      1- 2157     	LCALL	_keyRead2
                                    1- 2158     	BANKSEL	r0x104A
     002D rrrr                      3-   71 m1      .banksel ram_address
     002E 00rr                      1- 2159     	MOVAR	r0x104A
     002F 01rr                      1- 2160     	MOVR	r0x104A,W
     0030 0D03                      1- 2161     	BTRSC	STATUS,2
     0031 3rrr                      1- 2162     	LGOTO	_00242_DS_
                                    1- 2163     	.line	220, "main.c"; 	if(++workStep >= 9)
                                    1- 2164     	BANKSEL	_workStep
     0032 rrrr                      3-   71 m1      .banksel ram_address
     0033 05rr                      1- 2165     	INCR	_workStep,F
                                    1- 2166     ;;unsigned compare: left < lit (0x9=9), size=1
     0034 2109                      1- 2167     	MOVIA	0x09
     0035 04rr                      1- 2168     	SUBAR	_workStep,W
     0036 0803                      1- 2169     	BTRSS	STATUS,0
     0037 3rrr                      1- 2170     	LGOTO	_00242_DS_
                                    1- 2171     	.line	221, "main.c"; 	workStep = 9;
     0038 2109                      1- 2172     	MOVIA	0x09
     0039 00rr                      1- 2173     	MOVAR	_workStep
     003A                           1- 2174     _00242_DS_:
                                    1- 2175     	.line	224, "main.c"; 	if(keyRead2((0x01 & ~PORTB),&keyCount3))
     003A 07rr                      1- 2176     	COMR	_PORTB,W
                                    1- 2177     	BANKSEL	r0x104A
     003B rrrr                      3-   71 m1      .banksel ram_address
     003C 00rr                      1- 2178     	MOVAR	r0x104A
     003D 2101                      1- 2179     	MOVIA	0x01
     003E 10rr                      1- 2180     	ANDAR	r0x104A,F
     003F 21rr                      1- 2181     	MOVIA	((_keyCount3 + 0) >> 8) & 0xff
                                    1- 2182     	BANKSEL	r0x104B
     0040 rrrr                      3-   71 m1      .banksel ram_address
     0041 00rr                      1- 2183     	MOVAR	r0x104B
     0042 21rr                      1- 2184     	MOVIA	(_keyCount3 + 0)
                                    1- 2185     ;;2	BANKSEL	r0x104C
                                    1- 2186     ;;2	MOVAR	r0x104C
     0043 00rr                      1- 2187     	MOVAR	STK02
                                    1- 2188     	BANKSEL	r0x104B
     0044 rrrr                      3-   71 m1      .banksel ram_address
     0045 01rr                      1- 2189     	MOVR	r0x104B,W
     0046 00rr                      1- 2190     	MOVAR	STK01
     0047 2100                      1- 2191     	MOVIA	0x00
     0048 00rr                      1- 2192     	MOVAR	STK00
                                    1- 2193     	BANKSEL	r0x104A
     0049 rrrr                      3-   71 m1      .banksel ram_address
     004A 01rr                      1- 2194     	MOVR	r0x104A,W
     004B 2rrr                      1- 2195     	LCALL	_keyRead2
                                    1- 2196     	BANKSEL	r0x104A
     004C rrrr                      3-   71 m1      .banksel ram_address
     004D 00rr                      1- 2197     	MOVAR	r0x104A
     004E 01rr                      1- 2198     	MOVR	r0x104A,W
     004F 0D03                      1- 2199     	BTRSC	STATUS,2
     0050 3rrr                      1- 2200     	LGOTO	_00249_DS_
                                    1- 2201     	.line	227, "main.c"; 	if(--workStep <= 1)
                                    1- 2202     	BANKSEL	_workStep
     0051 rrrr                      3-   71 m1      .banksel ram_address
     0052 06rr                      1- 2203     	DECR	_workStep,F
                                    1- 2204     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 2205     ;;unsigned compare: left >= lit (0x2=2), size=1
     0053 2102                      1- 2206     	MOVIA	0x02
     0054 04rr                      1- 2207     	SUBAR	_workStep,W
     0055 0C03                      1- 2208     	BTRSC	STATUS,0
     0056 3rrr                      1- 2209     	LGOTO	_00249_DS_
                                    1- 2210     	.line	228, "main.c"; 	workStep = 1;
     0057 2101                      1- 2211     	MOVIA	0x01
     0058 00rr                      1- 2212     	MOVAR	_workStep
     0059                           1- 2213     _00249_DS_:
                                    1- 2214     	.line	231, "main.c"; 	}
                                    1- 2215     	RETURN	
     0059 0010                      3-   26 m1      ret
                                    1- 2216     ; exit point of _keyCtr
                                    1- 2218     ;***
                                    1- 2219     ;  pBlock Stats: dbName = C
                                    1- 2220     ;***
                                    1- 2221     ;has an exit
                                    1- 2222     ;; Starting pCode block
                                    1- 2223     .segment "code"; module=main, function=_chrgCtr
     0000                           1- 2225     _chrgCtr:
                                    1- 2226     ; 2 exit points
                                    1- 2227     	.line	181, "main.c"; 	if(PORTB & 0x02)
     0000 08rr                      1- 2228     	BTRSS	_PORTB,1
     0001 3rrr                      1- 2229     	LGOTO	_00215_DS_
                                    1- 2230     	.line	184, "main.c"; 	chrgStep = 1;
     0002 2101                      1- 2231     	MOVIA	0x01
                                    1- 2232     	BANKSEL	_chrgStep
     0003 rrrr                      3-   71 m1      .banksel ram_address
     0004 00rr                      1- 2233     	MOVAR	_chrgStep
                                    1- 2234     	.line	185, "main.c"; 	workStep = 0;
                                    1- 2235     	BANKSEL	_workStep
     0005 rrrr                      3-   71 m1      .banksel ram_address
     0006 02rr                      1- 2236     	CLRR	_workStep
                                    1- 2237     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 2238     ;;unsigned compare: left >= lit (0x33=51), size=2
                                    1- 2239     	.line	186, "main.c"; 	if(batValue > 50)
     0007 2100                      1- 2240     	MOVIA	0x00
                                    1- 2241     	BANKSEL	_batValue
     0008 rrrr                      3-   71 m1      .banksel ram_address
     0009 04rr                      1- 2242     	SUBAR	(_batValue + 1),W
     000A 0903                      1- 2243     	BTRSS	STATUS,2
     000B 3rrr                      1- 2244     	LGOTO	_00228_DS_
     000C 2133                      1- 2245     	MOVIA	0x33
     000D 04rr                      1- 2246     	SUBAR	_batValue,W
     000E                           1- 2247     _00228_DS_:
     000E 0803                      1- 2248     	BTRSS	STATUS,0
     000F 3rrr                      1- 2249     	LGOTO	_00212_DS_
                                    1- 2250     	.line	188, "main.c"; 	LEDHON();
     0010 1Arr                      1- 2251     	BSR	_PORTA,4
                                    1- 2252     	.line	189, "main.c"; 	LEDLOFF();
     0011 1Crr                      1- 2253     	BCR	_PORTA,0
     0012 3rrr                      1- 2254     	LGOTO	_00217_DS_
                                    1- 2255     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 2256     ;;unsigned compare: left >= lit (0x33=51), size=2
     0013                           1- 2257     _00212_DS_:
                                    1- 2258     	.line	191, "main.c"; 	else if(batValue <= 50)
     0013 2100                      1- 2259     	MOVIA	0x00
                                    1- 2260     	BANKSEL	_batValue
     0014 rrrr                      3-   71 m1      .banksel ram_address
     0015 04rr                      1- 2261     	SUBAR	(_batValue + 1),W
     0016 0903                      1- 2262     	BTRSS	STATUS,2
     0017 3rrr                      1- 2263     	LGOTO	_00229_DS_
     0018 2133                      1- 2264     	MOVIA	0x33
     0019 04rr                      1- 2265     	SUBAR	_batValue,W
     001A                           1- 2266     _00229_DS_:
     001A 0C03                      1- 2267     	BTRSC	STATUS,0
     001B 3rrr                      1- 2268     	LGOTO	_00217_DS_
                                    1- 2269     	.line	193, "main.c"; 	LEDHOFF();
     001C 1Err                      1- 2270     	BCR	_PORTA,4
                                    1- 2271     	.line	194, "main.c"; 	LEDLON();
     001D 18rr                      1- 2272     	BSR	_PORTA,0
     001E 3rrr                      1- 2273     	LGOTO	_00217_DS_
     001F                           1- 2274     _00215_DS_:
                                    1- 2275     	.line	199, "main.c"; 	chrgStep = 0;
                                    1- 2276     	BANKSEL	_chrgStep
     001F rrrr                      3-   71 m1      .banksel ram_address
     0020 02rr                      1- 2277     	CLRR	_chrgStep
     0021                           1- 2278     _00217_DS_:
                                    1- 2279     	.line	201, "main.c"; 	}
                                    1- 2280     	RETURN	
     0021 0010                      3-   26 m1      ret
                                    1- 2281     ; exit point of _chrgCtr
                                    1- 2284     ;	code size estimation:
                                    1- 2285     ;	  841+  202 =  1043 instructions ( 2490 byte)
                                    1- 2287     	end

SYMBOL TABLE            TYPE     VALUE
___sdcc_saved_fsr       Label    00000000
___sdcc_saved_stk00     Label    00000000
___sdcc_saved_stk01     Label    00000000
__CHECKSUM_ADDR__       Label    00000000
__divuint               Label    00000000
__gptrget1              Label    00000000
__gptrput1              Label    00000000
__moduint               Label    00000000
__mulchar               Label    00000000
__nyc_ny8_startup       Label    00000000
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810623
__sdcc_interrupt        Label    00000000
_00001_DS_              Label    0000002C
_00002_DS_              Label    0000002C
_00003_DS_              Label    00000025
_00004_DS_              Label    00000025
_00005_DS_              Label    0000005A
_00108_DS_              Label    0000001E
_00110_DS_              Label    00000022
_00116_DS_              Label    00000049
_00119_DS_              Label    0000004E
_00121_DS_              Label    00000067
_00124_DS_              Label    0000005C
_00127_DS_              Label    00000050
_00128_DS_              Label    00000069
_00134_DS_              Label    00000079
_00135_DS_              Label    0000007A
_00139_DS_              Label    000000A3
_00143_DS_              Label    00000098
_00148_DS_              Label    00000084
_00151_DS_              Label    0000001D
_00204_DS_              Label    0000002E
_00212_DS_              Label    00000013
_00215_DS_              Label    0000001F
_00217_DS_              Label    00000021
_00228_DS_              Label    0000000E
_00229_DS_              Label    0000001A
_00237_DS_              Label    0000000F
_00238_DS_              Label    00000017
_00242_DS_              Label    0000003A
_00249_DS_              Label    00000059
_00255_DS_              Label    0000001E
_00261_DS_              Label    0000000C
_00262_DS_              Label    0000000E
_00264_DS_              Label    00000004
_00276_DS_              Label    0000001F
_00277_DS_              Label    00000027
_00279_DS_              Label    00000015
_00280_DS_              Label    00000029
_00281_DS_              Label    0000002A
_00289_DS_              Label    00000053
_00291_DS_              Label    00000037
_00292_DS_              Label    0000005E
_00293_DS_              Label    0000005F
_00305_DS_              Label    0000003D
_00306_DS_              Label    0000004B
_00315_DS_              Label    00000035
_00316_DS_              Label    00000044
_00327_DS_              Label    0000000E
_00329_DS_              Label    0000002F
_00336_DS_              Label    0000000E
_00338_DS_              Label    0000002F
_00343_DS_              Label    00000000
_00356_DS_              Label    00000002
_00359_DS_              Label    00000009
_00366_DS_              Label    0000000C
_00378_DS_              Label    00000022
_00379_DS_              Label    0000002A
_00381_DS_              Label    00000032
_00384_DS_              Label    00000049
_00390_DS_              Label    0000006D
_00395_DS_              Label    00000037
_00398_DS_              Label    00000076
_00399_DS_              Label    00000079
_00403_DS_              Label    00000089
_00405_DS_              Label    00000094
_00443_DS_              Label    00000008
_00446_DS_              Label    00000041
_00447_DS_              Label    00000062
_00450_DS_              Label    00000084
_00451_DS_              Label    00000090
_ABPLCON                Label    00000000
_ABPLCONbits            Label    00000000
_adCheckTime            Label    00000000
_ADCR                   Label    00000000
_ADCRbits               Label    00000000
_ADD                    Label    00000000
_ADMD                   Label    00000000
_ADMDbits               Label    00000000
_ADR                    Label    00000000
_ADRbits                Label    00000000
_ADVREFH                Label    00000000
_ADVREFHbits            Label    00000000
_ANAEN                  Label    00000000
_ANAENbits              Label    00000000
_APHCON                 Label    00000000
_AWUCON                 Label    00000000
_AWUCONbits             Label    00000000
_batValue               Label    00000000
_BODCON                 Label    00000000
_BPHCON                 Label    00000000
_BPHCONbits             Label    00000000
_BWUCON                 Label    00000000
_BWUCONbits             Label    00000000
_BZ1CR                  Label    00000000
_BZ2CR                  Label    00000000
_BZ3CR                  Label    00000000
_checkBatAD             Label    00000000
_checkPWAAD             Label    00000000
_chrgCtr                Label    00000000
_chrgStep               Label    00000000
_CMPCR                  Label    00000000
_count3S                Label    00000000
_delay_us               Label    00000000
_Delay10Us              Label    00000000
_duty                   Label    00000000
_F_AIN2_Convert         Label    00000000
_F_AIN9_Convert         Label    00000000
_F_wait_eoc             Label    00000000
_firstTime              Label    00000000
_FSR                    Label    00000000
_gewei                  Label    00000000
_gotoSleep              Label    00000000
_ind_light_disp         Label    00000000
_INDF                   Label    00000000
_initAD                 Label    00000000
_intCount               Label    00000000
_INTE                   Label    00000000
_INTE2                  Label    00000000
_INTE2bits              Label    00000000
_INTEbits               Label    00000000
_INTEDG                 Label    00000000
_INTEDGbits             Label    00000000
_INTF                   Label    00000000
_INTFbits               Label    00000000
_IntFlag                Label    00000000
_IOSTA                  Label    00000000
_IOSTB                  Label    00000000
_IRCR                   Label    00000000
_isr                    Label    00000000
_keyCount               Label    00000000
_keyCount2              Label    00000000
_keyCount3              Label    00000000
_keyCtr                 Label    00000000
_keyRead                Label    00000000
_keyRead2               Label    00000000
_longPressFlag          Label    00000000
_main                   Label    00000000
_maxDuty                Label    00000000
_OSCCR                  Label    00000000
_PACON                  Label    00000000
_PACONbits              Label    00000000
_PCHBUF                 Label    00000000
_PCL                    Label    00000000
_PCON                   Label    00000000
_PCON1                  Label    00000000
_PCONbits               Label    00000000
_PORTA                  Label    00000000
_PORTAbits              Label    00000000
_PORTB                  Label    00000000
_PORTBbits              Label    00000000
_PS0CV                  Label    00000000
_PS1CV                  Label    00000000
_PS2CV                  Label    00000000
_PS3CV                  Label    00000000
_PWM1DUTY               Label    00000000
_PWM2DUTY               Label    00000000
_PWM3DUTY               Label    00000000
_pwmInit                Label    00000000
_pwmStop                Label    00000000
_R_AIN2_DATA            Label    00000000
_R_AIN2_DATA_LB         Label    00000000
_R_AIN9_DATA            Label    00000000
_R_AIN9_DATA_LB         Label    00000000
_refresh                Label    00000000
_RFC                    Label    00000000
_RFCbits                Label    00000000
_shiwei                 Label    00000000
_sleepTime              Label    00000000
_STATUS                 Label    00000000
_T0MD                   Label    00000000
_T1CR1                  Label    00000000
_T1CR2                  Label    00000000
_T2CR1                  Label    00000000
_T2CR2                  Label    00000000
_T3CR1                  Label    00000000
_T3CR2                  Label    00000000
_table                  Label    00000000
_TBHD                   Label    00000000
_TBHP                   Label    00000000
_TM3RH                  Label    00000000
_TMR0                   Label    00000000
_TMR1                   Label    00000000
_TMR2                   Label    00000000
_TMR3                   Label    00000000
_TMRH                   Label    00000000
_workCtr                Label    00000000
_workStep               Label    00000000
ENABLE_RAM_BANK         Constant 00000001
END_OF_INTERRUPT        Label    00000033
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
PSAVE                   Label    00000000
r0x1028                 Label    00000000
r0x1029                 Label    00000000
r0x102A                 Label    00000000
r0x102B                 Label    00000000
r0x102C                 Label    00000000
r0x102D                 Label    00000000
r0x102E                 Label    00000000
r0x1031                 Label    00000000
r0x1032                 Label    00000000
r0x1033                 Label    00000000
r0x1034                 Label    00000000
r0x1037                 Label    00000000
r0x103A                 Label    00000000
r0x103B                 Label    00000000
r0x103E                 Label    00000000
r0x103F                 Label    00000000
r0x1040                 Label    00000000
r0x1041                 Label    00000000
r0x1042                 Label    00000000
r0x1043                 Label    00000000
r0x1044                 Label    00000000
r0x1045                 Label    00000000
r0x1046                 Label    00000000
r0x1047                 Label    00000000
r0x1048                 Label    00000000
r0x104A                 Label    00000000
r0x104B                 Label    00000000
SSAVE                   Label    00000001
STATUS                  Constant 00000003
STK00                   Label    00000005
STK01                   Label    00000004
STK02                   Label    00000003
W                       Constant 00000000
WSAVE                   Label    00000002


SOURCE FILE TABLE
001 main.s
002 ny8b062d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B062D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
