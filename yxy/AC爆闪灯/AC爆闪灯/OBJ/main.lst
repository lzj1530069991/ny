
                    Nyquest Technology Co., Ltd.

NYASM 2.28

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8B061D,c=on
                                    1-    9     	#include "ny8b061d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	__divuint
                                    1-   15     	extern	_PORTAbits
                                    1-   16     	extern	_PORTBbits
                                    1-   17     	extern	_PCONbits
                                    1-   18     	extern	_BWUCONbits
                                    1-   19     	extern	_ABPLCONbits
                                    1-   20     	extern	_BPHCONbits
                                    1-   21     	extern	_INTEbits
                                    1-   22     	extern	_INTFbits
                                    1-   23     	extern	_ADMDbits
                                    1-   24     	extern	_ADRbits
                                    1-   25     	extern	_ADVREFHbits
                                    1-   26     	extern	_ADCRbits
                                    1-   27     	extern	_AWUCONbits
                                    1-   28     	extern	_PACONbits
                                    1-   29     	extern	_INTEDGbits
                                    1-   30     	extern	_RFCbits
                                    1-   31     	extern	_INTE2bits
                                    1-   32     	extern	_INDF
                                    1-   33     	extern	_TMR0
                                    1-   34     	extern	_PCL
                                    1-   35     	extern	_STATUS
                                    1-   36     	extern	_FSR
                                    1-   37     	extern	_PORTA
                                    1-   38     	extern	_PORTB
                                    1-   39     	extern	_PCON
                                    1-   40     	extern	_BWUCON
                                    1-   41     	extern	_PCHBUF
                                    1-   42     	extern	_ABPLCON
                                    1-   43     	extern	_BPHCON
                                    1-   44     	extern	_INTE
                                    1-   45     	extern	_INTF
                                    1-   46     	extern	_ADMD
                                    1-   47     	extern	_ADR
                                    1-   48     	extern	_ADD
                                    1-   49     	extern	_ADVREFH
                                    1-   50     	extern	_ADCR
                                    1-   51     	extern	_AWUCON
                                    1-   52     	extern	_PACON
                                    1-   53     	extern	_INTEDG
                                    1-   54     	extern	_TMRH
                                    1-   55     	extern	_RFC
                                    1-   56     	extern	_TM3RH
                                    1-   57     	extern	_INTE2
                                    1-   58     	extern	_TMR1
                                    1-   59     	extern	_T1CR1
                                    1-   60     	extern	_T1CR2
                                    1-   61     	extern	_PWM1DUTY
                                    1-   62     	extern	_PS1CV
                                    1-   63     	extern	_BZ1CR
                                    1-   64     	extern	_IRCR
                                    1-   65     	extern	_TBHP
                                    1-   66     	extern	_TBHD
                                    1-   67     	extern	_TMR2
                                    1-   68     	extern	_T2CR1
                                    1-   69     	extern	_T2CR2
                                    1-   70     	extern	_PWM2DUTY
                                    1-   71     	extern	_PS2CV
                                    1-   72     	extern	_BZ2CR
                                    1-   73     	extern	_OSCCR
                                    1-   74     	extern	_TMR3
                                    1-   75     	extern	_T3CR1
                                    1-   76     	extern	_T3CR2
                                    1-   77     	extern	_PWM3DUTY
                                    1-   78     	extern	_PS3CV
                                    1-   79     	extern	_BZ3CR
                                    1-   80     	extern	_IOSTA
                                    1-   81     	extern	_IOSTB
                                    1-   82     	extern	_APHCON
                                    1-   83     	extern	_PS0CV
                                    1-   84     	extern	_BODCON
                                    1-   85     	extern	_PCON1
                                    1-   86     	extern	_T0MD
                                    1-   87     	extern	___sdcc_saved_fsr
                                    1-   88     	extern	___sdcc_saved_stk00
                                    1-   89     	extern	___sdcc_saved_stk01
                                    1-   90     	extern	__nyc_ny8_startup
                                    1-   91     ;--------------------------------------------------------
                                    1-   92     ; global declarations
                                    1-   93     ;--------------------------------------------------------
                                    1-   94     	extern	_keyCon
                                    1-   95     	extern	_delay
                                    1-   96     	extern	_F_wait_eoc
                                    1-   97     	extern	_F_AIN8_Convert
                                    1-   98     	extern	_checkAD
                                    1-   99     	extern	_initAD
                                    1-  100     	extern	_initSys
                                    1-  101     	extern	_showRGB
                                    1-  102     	extern	_workCtr
                                    1-  103     	extern	_isr
                                    1-  104     	extern	_main
                                    1-  105     	extern	_ledCount
                                    1-  106     	extern	_IntFlag
                                    1-  107     	extern	_intCount
                                    1-  108     	extern	_ledFlag
                                    1-  109     	extern	_blue
                                    1-  110     	extern	_red
                                    1-  111     	extern	_green
                                    1-  112     	extern	_workStep
                                    1-  113     	extern	_key2Count
                                    1-  114     	extern	_longFlag
                                    1-  115     	extern	_timeCount
                                    1-  116     	extern	_workCount
                                    1-  117     	extern	_delayCount
                                    1-  118     	extern	_SKFlag
                                    1-  119     	extern	_R_AIN8_DATA
                                    1-  120     	extern	_R_AIN8_DATA_LB
                                    1-  121     	extern	_debug
                                    1-  123     	extern PSAVE
                                    1-  124     	extern SSAVE
                                    1-  125     	extern WSAVE
                                    1-  126     	extern STK02
                                    1-  127     	extern STK01
                                    1-  128     	extern STK00
                                    1-  130     .segment "uninit", 0x20000020
 20000020                           1-  131     PSAVE:
                                    1-  132     	.res 1
 20000021                           1-  133     SSAVE:
                                    1-  134     	.res 1
 20000022                           1-  135     WSAVE:
                                    1-  136     	.res 1
 20000023                           1-  137     STK02:
                                    1-  138     	.res 1
 20000024                           1-  139     STK01:
                                    1-  140     	.res 1
 20000025                           1-  141     STK00:
                                    1-  142     	.res 1
                                    1-  144     ;--------------------------------------------------------
                                    1-  145     ; global definitions
                                    1-  146     ;--------------------------------------------------------
                                    1-  147     .segment "uninit"
     0000                           1-  148     _R_AIN8_DATA_LB:
                                    1-  149     	.res	1
                                    1-  152     ;--------------------------------------------------------
                                    1-  153     ; absolute symbol definitions
                                    1-  154     ;--------------------------------------------------------
                                    1-  155     ;--------------------------------------------------------
                                    1-  156     ; compiler-defined variables
                                    1-  157     ;--------------------------------------------------------
                                    1-  158     .segment "uninit"
     0000                           1-  159     r0x102A:
                                    1-  160     	.res	1
                                    1-  161     .segment "uninit"
     0000                           1-  162     r0x102B:
                                    1-  163     	.res	1
                                    1-  164     .segment "uninit"
     0000                           1-  165     r0x1026:
                                    1-  166     	.res	1
                                    1-  167     .segment "uninit"
     0000                           1-  168     r0x1027:
                                    1-  169     	.res	1
                                    1-  170     .segment "uninit"
     0000                           1-  171     r0x1028:
                                    1-  172     	.res	1
                                    1-  173     .segment "uninit"
     0000                           1-  174     r0x1029:
                                    1-  175     	.res	1
                                    1-  176     .segment "uninit"
     0000                           1-  177     r0x1024:
                                    1-  178     	.res	1
                                    1-  179     .segment "uninit"
     0000                           1-  180     r0x1025:
                                    1-  181     	.res	1
                                    1-  182     .segment "uninit"
     0000                           1-  183     r0x101C:
                                    1-  184     	.res	1
                                    1-  185     .segment "uninit"
     0000                           1-  186     r0x101D:
                                    1-  187     	.res	1
                                    1-  188     .segment "uninit"
     0000                           1-  189     r0x101E:
                                    1-  190     	.res	1
                                    1-  191     .segment "uninit"
     0000                           1-  192     r0x1021:
                                    1-  193     	.res	1
                                    1-  194     .segment "uninit"
     0000                           1-  195     r0x101A:
                                    1-  196     	.res	1
                                    1-  197     .segment "uninit"
     0000                           1-  198     r0x101B:
                                    1-  199     	.res	1
                                    1-  200     ;--------------------------------------------------------
                                    1-  201     ; initialized data
                                    1-  202     ;--------------------------------------------------------
                                    1-  204     .segment "idata"
     0000                           1-  205     _ledCount:
     0000 0000 0000                 1-  206     	dw	0x00, 0x00
                                    1-  210     .segment "idata"
     0000                           1-  211     _IntFlag:
     0000 0000                      1-  212     	dw	0x00
                                    1-  216     .segment "idata"
     0000                           1-  217     _intCount:
     0000 0000                      1-  218     	dw	0x00
                                    1-  222     .segment "idata"
     0000                           1-  223     _ledFlag:
     0000 0000                      1-  224     	dw	0x00
                                    1-  228     .segment "idata"
     0000                           1-  229     _blue:
     0000 0000 0000                 1-  230     	dw	0x00, 0x00
                                    1-  234     .segment "idata"
     0000                           1-  235     _red:
     0000 0000 0000                 1-  236     	dw	0x00, 0x00
                                    1-  240     .segment "idata"
     0000                           1-  241     _green:
     0000 0000 0000                 1-  242     	dw	0x00, 0x00
                                    1-  246     .segment "idata"
     0000                           1-  247     _workStep:
     0000 0000                      1-  248     	dw	0x00
                                    1-  252     .segment "idata"
     0000                           1-  253     _key2Count:
     0000 0000 0000                 1-  254     	dw	0x00, 0x00
                                    1-  258     .segment "idata"
     0000                           1-  259     _longFlag:
     0000 0000                      1-  260     	dw	0x00
                                    1-  264     .segment "idata"
     0000                           1-  265     _timeCount:
     0000 0000                      1-  266     	dw	0x00
                                    1-  270     .segment "idata"
     0000                           1-  271     _workCount:
     0000 0000                      1-  272     	dw	0x00
                                    1-  276     .segment "idata"
     0000                           1-  277     _delayCount:
     0000 0000                      1-  278     	dw	0x00
                                    1-  282     .segment "idata"
     0000                           1-  283     _SKFlag:
     0000 0000                      1-  284     	dw	0x00
                                    1-  288     .segment "idata"
     0000                           1-  289     _R_AIN8_DATA:
     0000 0000 0000                 1-  290     	dw	0x00, 0x00
                                    1-  294     .segment "idata"
     0000                           1-  295     _debug:
     0000 0000                      1-  296     	dw	0x00
                                    1-  299     ;--------------------------------------------------------
                                    1-  300     ; overlayable items in internal ram 
                                    1-  301     ;--------------------------------------------------------
                                    1-  302     ;	udata_ovr
                                    1-  303     ;--------------------------------------------------------
                                    1-  304     ; reset vector 
                                    1-  305     ;--------------------------------------------------------
                                    1-  306     ORG	0x0000
     0000 3rrr                      1-  307     	LGOTO	__nyc_ny8_startup
                                    1-  308     ;--------------------------------------------------------
                                    1-  309     ; interrupt and initialization code
                                    1-  310     ;--------------------------------------------------------
                                    1-  311     ORG 0x0008
                                    1-  312     	MGOTO	__sdcc_interrupt
     0008 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  314     .segment "code"
     0000                           1-  315     __sdcc_interrupt:
                                    1-  316     ;***
                                    1-  317     ;  pBlock Stats: dbName = I
                                    1-  318     ;***
                                    1-  319     ;2 compiler assigned registers:
                                    1-  320     ;   STK00
                                    1-  321     ;   STK01
                                    1-  322     ;; Starting pCode block
     0000                           1-  323     _isr:
                                    1-  324     ; 0 exit points
                                    1-  325     	.line	44, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  326     	MOVAR	WSAVE
     0001 1503                      1-  327     	SWAPR	STATUS,W
     0002 0283                      1-  328     	CLRR	STATUS
     0003 00rr                      1-  329     	MOVAR	SSAVE
     0004 010A                      1-  330     	MOVR	PCHBUF,W
     0005 028A                      1-  331     	CLRR	PCHBUF
     0006 00rr                      1-  332     	MOVAR	PSAVE
     0007 0104                      1-  333     	MOVR	FSR,W
     0008 00rr                      1-  334     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  335     	MOVR	STK00,W
     000A 00rr                      1-  336     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  337     	MOVR	STK01,W
     000C 00rr                      1-  338     	MOVAR	___sdcc_saved_stk01
                                    1-  339     	.line	46, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  340     	BTRSS	_INTFbits,0
                                    1-  341     	MGOTO	_00108_DS_
     000E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  342     	.line	48, "main.c"; 	TMR0 += 55;
     000F 2137                      1-  343     	MOVIA	0x37
     0010 03rr                      1-  344     	ADDAR	_TMR0,F
                                    1-  345     	.line	50, "main.c"; 	if(++intCount >= 100)
     0011 05rr                      1-  346     	INCR	_intCount,F
                                    1-  347     ;;unsigned compare: left < lit (0x64=100), size=1
     0012 2164                      1-  348     	MOVIA	0x64
     0013 04rr                      1-  349     	SUBAR	_intCount,W
     0014 0803                      1-  350     	BTRSS	STATUS,0
                                    1-  351     	MGOTO	_00108_DS_
     0015 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  352     	.line	52, "main.c"; 	IntFlag = 1;
     0016 2101                      1-  353     	MOVIA	0x01
     0017 00rr                      1-  354     	MOVAR	_IntFlag
                                    1-  355     	.line	53, "main.c"; 	intCount = 0;
     0018 02rr                      1-  356     	CLRR	_intCount
     0019                           1-  357     _00108_DS_:
                                    1-  358     	.line	60, "main.c"; 	if(INTFbits.PABIF)
     0019 08rr                      1-  359     	BTRSS	_INTFbits,1
                                    1-  360     	MGOTO	_00110_DS_
     001A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  361     	.line	62, "main.c"; 	INTF= (unsigned char)~(C_INT_PABKey);	// Clear PABIF(PortB input change interrupt flag bit)
     001B 21FD                      1-  362     	MOVIA	0xfd
     001C 00rr                      1-  363     	MOVAR	_INTF
     001D                           1-  364     _00110_DS_:
                                    1-  365     	.line	65, "main.c"; 	INTF = 0;
     001D 02rr                      1-  366     	CLRR	_INTF
                                    1-  367     	.line	67, "main.c"; 	}
     001E 01rr                      1-  368     	MOVR	___sdcc_saved_stk01,W
     001F 00rr                      1-  369     	MOVAR	STK01
     0020 01rr                      1-  370     	MOVR	___sdcc_saved_stk00,W
     0021 00rr                      1-  371     	MOVAR	STK00
     0022 01rr                      1-  372     	MOVR	___sdcc_saved_fsr,W
     0023 0084                      1-  373     	MOVAR	FSR
     0024 01rr                      1-  374     	MOVR	PSAVE,W
     0025 008A                      1-  375     	MOVAR	PCHBUF
     0026 0283                      1-  376     	CLRR	STATUS
     0027 15rr                      1-  377     	SWAPR	SSAVE,W
     0028 0083                      1-  378     	MOVAR	STATUS
     0029 15rr                      1-  379     	SWAPR	WSAVE,F
     002A 15rr                      1-  380     	SWAPR	WSAVE,W
     002B                           1-  381     END_OF_INTERRUPT:
     002B 0011                      1-  382     	RETIE	
                                    1-  384     ;--------------------------------------------------------
                                    1-  385     ; code
                                    1-  386     ;--------------------------------------------------------
                                    1-  387     ;***
                                    1-  388     ;  pBlock Stats: dbName = M
                                    1-  389     ;***
                                    1-  390     ;has an exit
                                    1-  391     ;functions called:
                                    1-  392     ;   _initSys
                                    1-  393     ;   _initAD
                                    1-  394     ;   _showRGB
                                    1-  395     ;   _keyCon
                                    1-  396     ;   _workCtr
                                    1-  397     ;   _checkAD
                                    1-  398     ;   _initSys
                                    1-  399     ;   _initAD
                                    1-  400     ;   _showRGB
                                    1-  401     ;   _keyCon
                                    1-  402     ;   _workCtr
                                    1-  403     ;   _checkAD
                                    1-  404     ;2 compiler assigned registers:
                                    1-  405     ;   r0x102A
                                    1-  406     ;   r0x102B
                                    1-  407     ;; Starting pCode block
                                    1-  408     .segment "code"; module=main, function=_main
     0000                           1-  410     _main:
                                    1-  411     ; 2 exit points
                                    1-  412     	.line	71, "main.c"; 	initSys();
                                    1-  413     	MCALL	_initSys
     0000 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  414     	.line	72, "main.c"; 	initAD();
                                    1-  415     	MCALL	_initAD
     0001 2rrr                      3-   66 m1      LCALL rom_address
     0002                           1-  416     _00120_DS_:
                                    1-  417     	.line	75, "main.c"; 	showRGB();
                                    1-  418     	MCALL	_showRGB
     0002 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  419     	.line	76, "main.c"; 	if(0x80&~PORTA)
     0003 01rr                      1-  420     	MOVR	_PORTA,W
     0004 00rr                      1-  421     	MOVAR	r0x102A
     0005 02rr                      1-  422     	CLRR	r0x102B
     0006 07rr                      1-  423     	COMR	r0x102A,W
     0007 00rr                      1-  424     	MOVAR	r0x102A
     0008 07rr                      1-  425     	COMR	r0x102B,W
     0009 00rr                      1-  426     	MOVAR	r0x102B
     000A 0Brr                      1-  427     	BTRSS	r0x102A,7
                                    1-  428     	MGOTO	_00116_DS_
     000B 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  429     	.line	77, "main.c"; 	key2Count++;
     000C 05rr                      1-  430     	INCR	_key2Count,F
     000D 0D03                      1-  431     	BTRSC	STATUS,2
     000E 05rr                      1-  432     	INCR	(_key2Count + 1),F
     000F                           1-  433     _00116_DS_:
                                    1-  434     	.line	78, "main.c"; 	CLRWDT();
     000F 0002                      1-  435     	clrwdt
                                    1-  436     	.line	79, "main.c"; 	if(!IntFlag)
     0010 01rr                      1-  437     	MOVR	_IntFlag,W
     0011 0D03                      1-  438     	BTRSC	STATUS,2
                                    1-  439     	MGOTO	_00120_DS_
     0012 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  440     	.line	81, "main.c"; 	IntFlag = 0;
     0013 02rr                      1-  441     	CLRR	_IntFlag
                                    1-  442     	.line	82, "main.c"; 	keyCon();
                                    1-  443     	MCALL	_keyCon
     0014 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  444     	.line	83, "main.c"; 	workCtr();
                                    1-  445     	MCALL	_workCtr
     0015 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  446     	.line	84, "main.c"; 	checkAD();
                                    1-  447     	MCALL	_checkAD
     0016 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  448     	MGOTO	_00120_DS_
     0017 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  449     	.line	86, "main.c"; 	}
                                    1-  450     	RETURN	
     0018 0010                      3-   40 m1      ret
                                    1-  451     ; exit point of _main
                                    1-  453     ;***
                                    1-  454     ;  pBlock Stats: dbName = C
                                    1-  455     ;***
                                    1-  456     ;has an exit
                                    1-  457     ;; Starting pCode block
                                    1-  458     .segment "code"; module=main, function=_keyCon
     0000                           1-  460     _keyCon:
                                    1-  461     ; 2 exit points
                                    1-  462     	.line	327, "main.c"; 	if(0x80&PORTA)
     0000 0Brr                      1-  463     	BTRSS	_PORTA,7
                                    1-  464     	MGOTO	_00318_DS_
     0001 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  465     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  466     ;;unsigned compare: left >= lit (0x6=6), size=2
                                    1-  467     	.line	329, "main.c"; 	if(key2Count > 5)
     0002 2100                      1-  468     	MOVIA	0x00
     0003 04rr                      1-  469     	SUBAR	(_key2Count + 1),W
     0004 0903                      1-  470     	BTRSS	STATUS,2
                                    1-  471     	MGOTO	_00334_DS_
     0005 3rrr                      3-   63 m1      LGOTO rom_address
     0006 2106                      1-  472     	MOVIA	0x06
     0007 04rr                      1-  473     	SUBAR	_key2Count,W
     0008                           1-  474     _00334_DS_:
     0008 0803                      1-  475     	BTRSS	STATUS,0
                                    1-  476     	MGOTO	_00312_DS_
     0009 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  477     	.line	330, "main.c"; 	SKFlag = 1;
     000A 2101                      1-  478     	MOVIA	0x01
     000B 00rr                      1-  479     	MOVAR	_SKFlag
     000C                           1-  480     _00312_DS_:
                                    1-  481     	.line	331, "main.c"; 	key2Count = 0;
     000C 02rr                      1-  482     	CLRR	_key2Count
     000D 02rr                      1-  483     	CLRR	(_key2Count + 1)
                                    1-  484     	.line	332, "main.c"; 	longFlag = 0;
     000E 02rr                      1-  485     	CLRR	_longFlag
                                    1-  486     	MGOTO	_00320_DS_
     000F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  487     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  488     ;;unsigned compare: left >= lit (0x7D1=2001), size=2
     0010                           1-  489     _00318_DS_:
                                    1-  490     	.line	336, "main.c"; 	if(key2Count > 2000)
     0010 2107                      1-  491     	MOVIA	0x07
     0011 04rr                      1-  492     	SUBAR	(_key2Count + 1),W
     0012 0903                      1-  493     	BTRSS	STATUS,2
                                    1-  494     	MGOTO	_00335_DS_
     0013 3rrr                      3-   63 m1      LGOTO rom_address
     0014 21D1                      1-  495     	MOVIA	0xd1
     0015 04rr                      1-  496     	SUBAR	_key2Count,W
     0016                           1-  497     _00335_DS_:
     0016 0803                      1-  498     	BTRSS	STATUS,0
                                    1-  499     	MGOTO	_00320_DS_
     0017 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  500     	.line	338, "main.c"; 	key2Count = 2000;
     0018 21D0                      1-  501     	MOVIA	0xd0
     0019 00rr                      1-  502     	MOVAR	_key2Count
     001A 2107                      1-  503     	MOVIA	0x07
     001B 00rr                      1-  504     	MOVAR	(_key2Count + 1)
                                    1-  505     	.line	339, "main.c"; 	if(!longFlag)
     001C 01rr                      1-  506     	MOVR	_longFlag,W
     001D 0903                      1-  507     	BTRSS	STATUS,2
                                    1-  508     	MGOTO	_00320_DS_
     001E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  509     	.line	341, "main.c"; 	SKFlag = 1;
     001F 2101                      1-  510     	MOVIA	0x01
     0020 00rr                      1-  511     	MOVAR	_SKFlag
                                    1-  512     	.line	342, "main.c"; 	longFlag = 1;
     0021 00rr                      1-  513     	MOVAR	_longFlag
     0022                           1-  514     _00320_DS_:
                                    1-  515     	.line	347, "main.c"; 	}
                                    1-  516     	RETURN	
     0022 0010                      3-   40 m1      ret
                                    1-  517     ; exit point of _keyCon
                                    1-  519     ;***
                                    1-  520     ;  pBlock Stats: dbName = C
                                    1-  521     ;***
                                    1-  522     ;has an exit
                                    1-  523     ;2 compiler assigned registers:
                                    1-  524     ;   r0x101A
                                    1-  525     ;   r0x101B
                                    1-  526     ;; Starting pCode block
                                    1-  527     .segment "code"; module=main, function=_delay
                                    1-  529     ;local variable name mapping:
     0000                           1-  532     _delay:
                                    1-  533     ; 2 exit points
                                    1-  534     	.line	316, "main.c"; 	void delay(u8t time)
     0000 00rr                      1-  535     	MOVAR	r0x101A
                                    1-  536     	.line	318, "main.c"; 	for(u8t i=0;i<time;i++)
     0001 02rr                      1-  537     	CLRR	r0x101B
     0002                           1-  538     _00304_DS_:
     0002 01rr                      1-  539     	MOVR	r0x101A,W
     0003 04rr                      1-  540     	SUBAR	r0x101B,W
     0004 0C03                      1-  541     	BTRSC	STATUS,0
                                    1-  542     	MGOTO	_00306_DS_
     0005 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  543     	.line	319, "main.c"; 	NOP();
     0006 0000                      1-  544     	nop
                                    1-  545     	.line	318, "main.c"; 	for(u8t i=0;i<time;i++)
     0007 05rr                      1-  546     	INCR	r0x101B,F
                                    1-  547     	MGOTO	_00304_DS_
     0008 3rrr                      3-   63 m1      LGOTO rom_address
     0009                           1-  548     _00306_DS_:
                                    1-  549     	.line	320, "main.c"; 	}
                                    1-  550     	RETURN	
     0009 0010                      3-   40 m1      ret
                                    1-  551     ; exit point of _delay
                                    1-  553     ;***
                                    1-  554     ;  pBlock Stats: dbName = C
                                    1-  555     ;***
                                    1-  556     ;has an exit
                                    1-  557     ;; Starting pCode block
                                    1-  558     .segment "code"; module=main, function=_F_wait_eoc
     0000                           1-  560     _F_wait_eoc:
                                    1-  561     ; 2 exit points
     0000                           1-  562     _00297_DS_:
                                    1-  563     	.line	312, "main.c"; 	while(ADMDbits.EOC==0)
     0000 0Arr                      1-  564     	BTRSS	_ADMDbits,5
                                    1-  565     	MGOTO	_00297_DS_
     0001 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  566     	.line	314, "main.c"; 	}
                                    1-  567     	RETURN	
     0002 0010                      3-   40 m1      ret
                                    1-  568     ; exit point of _F_wait_eoc
                                    1-  570     ;***
                                    1-  571     ;  pBlock Stats: dbName = C
                                    1-  572     ;***
                                    1-  573     ;has an exit
                                    1-  574     ;functions called:
                                    1-  575     ;   _delay
                                    1-  576     ;   _F_wait_eoc
                                    1-  577     ;   _delay
                                    1-  578     ;   _F_wait_eoc
                                    1-  579     ;6 compiler assigned registers:
                                    1-  580     ;   r0x101C
                                    1-  581     ;   r0x101D
                                    1-  582     ;   r0x101E
                                    1-  583     ;   r0x101F
                                    1-  584     ;   r0x1020
                                    1-  585     ;   r0x1021
                                    1-  586     ;; Starting pCode block
                                    1-  587     .segment "code"; module=main, function=_F_AIN8_Convert
                                    1-  589     ;local variable name mapping:
     0000                           1-  592     _F_AIN8_Convert:
                                    1-  593     ; 2 exit points
                                    1-  594     	.line	294, "main.c"; 	void F_AIN8_Convert(char count)
     0000 00rr                      1-  595     	MOVAR	r0x101C
                                    1-  596     	.line	296, "main.c"; 	R_AIN8_DATA=R_AIN8_DATA_LB=0x00;   
     0001 02rr                      1-  597     	CLRR	_R_AIN8_DATA_LB
     0002 02rr                      1-  598     	CLRR	_R_AIN8_DATA
     0003 02rr                      1-  599     	CLRR	(_R_AIN8_DATA + 1)
                                    1-  600     	.line	298, "main.c"; 	ADMD  = 0x90 | C_ADC_PB3;				// Select AIN6(PB1) pad as ADC input
     0004 2198                      1-  601     	MOVIA	0x98
     0005 00rr                      1-  602     	MOVAR	_ADMD
                                    1-  603     	.line	299, "main.c"; 	delay(200);	
     0006 21C8                      1-  604     	MOVIA	0xc8
                                    1-  605     	MCALL	_delay
     0007 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  606     	.line	300, "main.c"; 	for(i=1;i<=count;i++)
     0008 2101                      1-  607     	MOVIA	0x01
     0009 00rr                      1-  608     	MOVAR	r0x101D
     000A                           1-  609     _00290_DS_:
     000A 01rr                      1-  610     	MOVR	r0x101D,W
     000B 04rr                      1-  611     	SUBAR	r0x101C,W
     000C 0803                      1-  612     	BTRSS	STATUS,0
                                    1-  613     	MGOTO	_00292_DS_
     000D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  614     	.line	302, "main.c"; 	ADMDbits.START = 1;					// Start a ADC conversion session
     000E 1Brr                      1-  615     	BSR	_ADMDbits,6
                                    1-  616     	.line	303, "main.c"; 	F_wait_eoc();							// Wait for ADC conversion complete
                                    1-  617     	MCALL	_F_wait_eoc
     000F 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  618     	.line	304, "main.c"; 	R_AIN8_DATA_LB += ( 0x0F & ADR); 
     0010 210F                      1-  619     	MOVIA	0x0f
     0011 10rr                      1-  620     	ANDAR	_ADR,W
                                    1-  621     ;;3	MOVAR	r0x101E
     0012 03rr                      1-  622     	ADDAR	_R_AIN8_DATA_LB,F
                                    1-  623     	.line	305, "main.c"; 	R_AIN8_DATA    += ADD; 
     0013 01rr                      1-  624     	MOVR	_ADD,W
     0014 00rr                      1-  625     	MOVAR	r0x101E
                                    1-  626     ;;1	CLRR	r0x101F
                                    1-  627     ;;102	MOVR	r0x101E,W
                                    1-  628     ;;100	MOVAR	r0x1020
     0015 2100                      1-  629     	MOVIA	0x00
     0016 00rr                      1-  630     	MOVAR	r0x1021
                                    1-  631     ;;101	MOVR	r0x1020,W
     0017 01rr                      1-  632     	MOVR	r0x101E,W
     0018 03rr                      1-  633     	ADDAR	_R_AIN8_DATA,F
     0019 01rr                      1-  634     	MOVR	r0x1021,W
     001A 0C03                      1-  635     	BTRSC	STATUS,0
     001B 16rr                      1-  636     	INCRSZ	r0x1021,W
     001C 03rr                      1-  637     	ADDAR	(_R_AIN8_DATA + 1),F
                                    1-  638     	.line	300, "main.c"; 	for(i=1;i<=count;i++)
     001D 05rr                      1-  639     	INCR	r0x101D,F
                                    1-  640     	MGOTO	_00290_DS_
     001E 3rrr                      3-   63 m1      LGOTO rom_address
     001F                           1-  641     _00292_DS_:
                                    1-  642     	.line	307, "main.c"; 	}
                                    1-  643     	RETURN	
     001F 0010                      3-   40 m1      ret
                                    1-  644     ; exit point of _F_AIN8_Convert
                                    1-  646     ;***
                                    1-  647     ;  pBlock Stats: dbName = C
                                    1-  648     ;***
                                    1-  649     ;has an exit
                                    1-  650     ;functions called:
                                    1-  651     ;   _F_AIN8_Convert
                                    1-  652     ;   _F_AIN8_Convert
                                    1-  653     ;4 compiler assigned registers:
                                    1-  654     ;   r0x1022
                                    1-  655     ;   r0x1023
                                    1-  656     ;   r0x1024
                                    1-  657     ;   r0x1025
                                    1-  658     ;; Starting pCode block
                                    1-  659     .segment "code"; module=main, function=_checkAD
     0000                           1-  661     _checkAD:
                                    1-  662     ; 2 exit points
                                    1-  663     	.line	280, "main.c"; 	R_AIN8_DATA = R_AIN8_DATA_LB = 0x00;
     0000 02rr                      1-  664     	CLRR	_R_AIN8_DATA_LB
     0001 02rr                      1-  665     	CLRR	_R_AIN8_DATA
     0002 02rr                      1-  666     	CLRR	(_R_AIN8_DATA + 1)
                                    1-  667     	.line	281, "main.c"; 	F_AIN8_Convert(8);					// execute AIN0 ADC converting 8 times
     0003 2108                      1-  668     	MOVIA	0x08
                                    1-  669     	MCALL	_F_AIN8_Convert
     0004 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  670     	.line	282, "main.c"; 	R_AIN8_DATA <<= 4;					// R_AIN0_DATA shift left 4 bit
     0005 15rr                      1-  671     	SWAPR	(_R_AIN8_DATA + 1),W
     0006 22F0                      1-  672     	ANDIA	0xf0
     0007 00rr                      1-  673     	MOVAR	(_R_AIN8_DATA + 1)
     0008 15rr                      1-  674     	SWAPR	_R_AIN8_DATA,W
     0009 00rr                      1-  675     	MOVAR	_R_AIN8_DATA
     000A 220F                      1-  676     	ANDIA	0x0f
     000B 11rr                      1-  677     	IORAR	(_R_AIN8_DATA + 1),F
     000C 12rr                      1-  678     	XORAR	_R_AIN8_DATA,F
                                    1-  679     	.line	283, "main.c"; 	R_AIN8_DATA_LB &= 0xF0;				// Only get Bit7~4
     000D 21F0                      1-  680     	MOVIA	0xf0
     000E 10rr                      1-  681     	ANDAR	_R_AIN8_DATA_LB,F
                                    1-  682     	.line	284, "main.c"; 	R_AIN8_DATA += R_AIN8_DATA_LB;		// R_AIN0_DATA + R_AIN0_DATA_LB
     000F 01rr                      1-  683     	MOVR	_R_AIN8_DATA_LB,W
     0010 00rr                      1-  684     	MOVAR	r0x1024
                                    1-  685     ;;1	MOVAR	r0x1022
                                    1-  686     ;;1	CLRR	r0x1023
                                    1-  687     ;;99	MOVR	r0x1022,W
     0011 2100                      1-  688     	MOVIA	0x00
     0012 00rr                      1-  689     	MOVAR	r0x1025
     0013 01rr                      1-  690     	MOVR	r0x1024,W
     0014 03rr                      1-  691     	ADDAR	_R_AIN8_DATA,F
     0015 01rr                      1-  692     	MOVR	r0x1025,W
     0016 0C03                      1-  693     	BTRSC	STATUS,0
     0017 16rr                      1-  694     	INCRSZ	r0x1025,W
     0018 03rr                      1-  695     	ADDAR	(_R_AIN8_DATA + 1),F
                                    1-  696     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
                                    1-  697     	.line	285, "main.c"; 	R_AIN8_DATA >>=3;					// R_AIN0_DATA divided 8
     0019 1C03                      1-  698     	BCR	STATUS,0
     001A 13rr                      1-  699     	RRR	(_R_AIN8_DATA + 1),F
     001B 13rr                      1-  700     	RRR	_R_AIN8_DATA,F
                                    1-  701     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     001C 1C03                      1-  702     	BCR	STATUS,0
     001D 13rr                      1-  703     	RRR	(_R_AIN8_DATA + 1),F
     001E 13rr                      1-  704     	RRR	_R_AIN8_DATA,F
                                    1-  705     ;;shiftRight_Left2ResultLit:5590: shCount=1, size=2, sign=0, same=1, offr=0
     001F 1C03                      1-  706     	BCR	STATUS,0
     0020 13rr                      1-  707     	RRR	(_R_AIN8_DATA + 1),F
     0021 13rr                      1-  708     	RRR	_R_AIN8_DATA,F
                                    1-  709     	.line	286, "main.c"; 	if(debug)
     0022 01rr                      1-  710     	MOVR	_debug,W
     0023 0D03                      1-  711     	BTRSC	STATUS,2
                                    1-  712     	MGOTO	_00283_DS_
     0024 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  713     	.line	287, "main.c"; 	R_AIN8_DATA = OUTA;
     0025 21A0                      1-  714     	MOVIA	0xa0
     0026 00rr                      1-  715     	MOVAR	_R_AIN8_DATA
     0027 210F                      1-  716     	MOVIA	0x0f
     0028 00rr                      1-  717     	MOVAR	(_R_AIN8_DATA + 1)
     0029                           1-  718     _00283_DS_:
                                    1-  719     	.line	291, "main.c"; 	}
                                    1-  720     	RETURN	
     0029 0010                      3-   40 m1      ret
                                    1-  721     ; exit point of _checkAD
                                    1-  723     ;***
                                    1-  724     ;  pBlock Stats: dbName = C
                                    1-  725     ;***
                                    1-  726     ;has an exit
                                    1-  727     ;functions called:
                                    1-  728     ;   _delay
                                    1-  729     ;   _delay
                                    1-  730     ;; Starting pCode block
                                    1-  731     .segment "code"; module=main, function=_initAD
     0000                           1-  733     _initAD:
                                    1-  734     ; 2 exit points
                                    1-  735     	.line	256, "main.c"; 	ADMD  = C_ADC_En | C_ADC_CH_Dis | C_ADC_PB3 ;	// Enable ADC power, Disable global ADC input channel, Select PA0 pad as ADC input (SFR "ADMD")
     0000 2188                      1-  736     	MOVIA	0x88
     0001 00rr                      1-  737     	MOVAR	_ADMD
                                    1-  738     	.line	260, "main.c"; 	ADVREFH = C_Vrefh_3V;					// ADC reference high voltage is supplied by internal 3V  (Note: ADC clock freq. must be equal or less than 500KHz)
     0002 2101                      1-  739     	MOVIA	0x01
     0003 00rr                      1-  740     	MOVAR	_ADVREFH
                                    1-  741     	.line	266, "main.c"; 	ADR	  = C_Ckl_Div8;						// ADC clock=Fcpu/8, Clear ADIF, disable ADC interrupt	
     0004 2110                      1-  742     	MOVIA	0x10
     0005 00rr                      1-  743     	MOVAR	_ADR
                                    1-  744     	.line	268, "main.c"; 	ADCR  = C_Sample_1clk | C_12BIT;
     0006 2103                      1-  745     	MOVIA	0x03
     0007 00rr                      1-  746     	MOVAR	_ADCR
                                    1-  747     	.line	271, "main.c"; 	ADMDbits.GCHS = 1;						// Enable global ADC channel	(SFR "ADMD")
     0008 1Arr                      1-  748     	BSR	_ADMDbits,4
                                    1-  749     	.line	272, "main.c"; 	delay(100);								// Delay 0.56ms(Instruction clock=4MHz/2T) for waiting ADC stable 
     0009 2164                      1-  750     	MOVIA	0x64
                                    1-  751     	MCALL	_delay
     000A 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  752     	.line	275, "main.c"; 	}
                                    1-  753     	RETURN	
     000B 0010                      3-   40 m1      ret
                                    1-  754     ; exit point of _initAD
                                    1-  756     ;***
                                    1-  757     ;  pBlock Stats: dbName = C
                                    1-  758     ;***
                                    1-  759     ;has an exit
                                    1-  760     ;; Starting pCode block
                                    1-  761     .segment "code"; module=main, function=_initSys
     0000                           1-  763     _initSys:
                                    1-  764     ; 2 exit points
                                    1-  765     	.line	224, "main.c"; 	DISI();
     0000 0013                      1-  766     	DISI
                                    1-  767     	.line	225, "main.c"; 	IOSTA = C_PA7_Input | C_PA5_Input ;
     0001 21A0                      1-  768     	MOVIA	0xa0
     0002 000r                      1-  769     	IOST	_IOSTA
                                    1-  770     	.line	226, "main.c"; 	IOSTB = C_PB3_Input;
     0003 2108                      1-  771     	MOVIA	0x08
     0004 000r                      1-  772     	IOST	_IOSTB
                                    1-  773     	.line	227, "main.c"; 	PORTB = 0x00;
     0005 02rr                      1-  774     	CLRR	_PORTB
                                    1-  775     	.line	228, "main.c"; 	PORTA = 0x00;
     0006 02rr                      1-  776     	CLRR	_PORTA
                                    1-  777     	.line	229, "main.c"; 	APHCON = 0x5F;
     0007 215F                      1-  778     	MOVIA	0x5f
     0008 000r                      1-  779     	IOST	_APHCON
                                    1-  780     	.line	230, "main.c"; 	BPHCON = 0xFF;
     0009 21FF                      1-  781     	MOVIA	0xff
     000A 00rr                      1-  782     	MOVAR	_BPHCON
                                    1-  783     	.line	231, "main.c"; 	ABPLCON = 0xFF;
     000B 00rr                      1-  784     	MOVAR	_ABPLCON
                                    1-  785     	.line	233, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     000C 2101                      1-  786     	MOVIA	0x01
     000D 00rr                      1-  787     	MOVAR	_INTE
                                    1-  788     	.line	235, "main.c"; 	PCON1 = C_TMR0_Dis;
     000E 0200                      1-  789     	CLRA	
     000F 000r                      1-  790     	IOST	_PCON1
                                    1-  791     	.line	237, "main.c"; 	TMR0 = 55;
     0010 2137                      1-  792     	MOVIA	0x37
     0011 00rr                      1-  793     	MOVAR	_TMR0
                                    1-  794     	.line	238, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     0012 0200                      1-  795     	CLRA	
     0013 0003                      1-  796     	T0MD	
                                    1-  797     	.line	240, "main.c"; 	PCON1 = C_TMR0_En;
     0014 2101                      1-  798     	MOVIA	0x01
     0015 000r                      1-  799     	IOST	_PCON1
                                    1-  800     	.line	243, "main.c"; 	PCON = C_WDT_En | C_LVR_En | 0x10;				// Enable WDT ,  Enable LVR
     0016 2198                      1-  801     	MOVIA	0x98
     0017 00rr                      1-  802     	MOVAR	_PCON
                                    1-  803     	.line	246, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0018 2101                      1-  804     	MOVIA	0x01
     0019 000r                      1-  805     	IOST	_PCON1
                                    1-  806     	.line	247, "main.c"; 	ENI();
     001A 0004                      1-  807     	ENI
                                    1-  808     	.line	248, "main.c"; 	}
                                    1-  809     	RETURN	
     001B 0010                      3-   40 m1      ret
                                    1-  810     ; exit point of _initSys
                                    1-  812     ;***
                                    1-  813     ;  pBlock Stats: dbName = C
                                    1-  814     ;***
                                    1-  815     ;has an exit
                                    1-  816     ;; Starting pCode block
                                    1-  817     .segment "code"; module=main, function=_showRGB
     0000                           1-  819     _showRGB:
                                    1-  820     ; 2 exit points
                                    1-  821     	.line	184, "main.c"; 	if(ledFlag == 0)
     0000 01rr                      1-  822     	MOVR	_ledFlag,W
     0001 0903                      1-  823     	BTRSS	STATUS,2
                                    1-  824     	MGOTO	_00236_DS_
     0002 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  825     	.line	186, "main.c"; 	PORTA &= 0xE0;
     0003 21E0                      1-  826     	MOVIA	0xe0
     0004 10rr                      1-  827     	ANDAR	_PORTA,F
                                    1-  828     	.line	187, "main.c"; 	return;
                                    1-  829     	MGOTO	_00248_DS_
     0005 3rrr                      3-   63 m1      LGOTO rom_address
     0006                           1-  830     _00236_DS_:
                                    1-  831     	.line	190, "main.c"; 	if(red > ledCount)
     0006 01rr                      1-  832     	MOVR	(_red + 1),W
     0007 04rr                      1-  833     	SUBAR	(_ledCount + 1),W
     0008 0903                      1-  834     	BTRSS	STATUS,2
                                    1-  835     	MGOTO	_00265_DS_
     0009 3rrr                      3-   63 m1      LGOTO rom_address
     000A 01rr                      1-  836     	MOVR	_red,W
     000B 04rr                      1-  837     	SUBAR	_ledCount,W
     000C                           1-  838     _00265_DS_:
     000C 0C03                      1-  839     	BTRSC	STATUS,0
                                    1-  840     	MGOTO	_00238_DS_
     000D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  841     	.line	192, "main.c"; 	PORTA |= 0x10;
     000E 1Arr                      1-  842     	BSR	_PORTA,4
                                    1-  843     	MGOTO	_00239_DS_
     000F 3rrr                      3-   63 m1      LGOTO rom_address
     0010                           1-  844     _00238_DS_:
                                    1-  845     	.line	196, "main.c"; 	PORTA &= 0xEF;
     0010 1Err                      1-  846     	BCR	_PORTA,4
     0011                           1-  847     _00239_DS_:
                                    1-  848     	.line	199, "main.c"; 	if(green > ledCount)
     0011 01rr                      1-  849     	MOVR	(_green + 1),W
     0012 04rr                      1-  850     	SUBAR	(_ledCount + 1),W
     0013 0903                      1-  851     	BTRSS	STATUS,2
                                    1-  852     	MGOTO	_00266_DS_
     0014 3rrr                      3-   63 m1      LGOTO rom_address
     0015 01rr                      1-  853     	MOVR	_green,W
     0016 04rr                      1-  854     	SUBAR	_ledCount,W
     0017                           1-  855     _00266_DS_:
     0017 0C03                      1-  856     	BTRSC	STATUS,0
                                    1-  857     	MGOTO	_00241_DS_
     0018 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  858     	.line	201, "main.c"; 	PORTA |= 0x04;
     0019 19rr                      1-  859     	BSR	_PORTA,2
                                    1-  860     	MGOTO	_00242_DS_
     001A 3rrr                      3-   63 m1      LGOTO rom_address
     001B                           1-  861     _00241_DS_:
                                    1-  862     	.line	205, "main.c"; 	PORTA &= 0xFB;
     001B 1Drr                      1-  863     	BCR	_PORTA,2
     001C                           1-  864     _00242_DS_:
                                    1-  865     	.line	208, "main.c"; 	if(blue > ledCount)
     001C 01rr                      1-  866     	MOVR	(_blue + 1),W
     001D 04rr                      1-  867     	SUBAR	(_ledCount + 1),W
     001E 0903                      1-  868     	BTRSS	STATUS,2
                                    1-  869     	MGOTO	_00267_DS_
     001F 3rrr                      3-   63 m1      LGOTO rom_address
     0020 01rr                      1-  870     	MOVR	_blue,W
     0021 04rr                      1-  871     	SUBAR	_ledCount,W
     0022                           1-  872     _00267_DS_:
     0022 0C03                      1-  873     	BTRSC	STATUS,0
                                    1-  874     	MGOTO	_00244_DS_
     0023 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  875     	.line	210, "main.c"; 	PORTA |= 0x01;
     0024 18rr                      1-  876     	BSR	_PORTA,0
                                    1-  877     	MGOTO	_00245_DS_
     0025 3rrr                      3-   63 m1      LGOTO rom_address
     0026                           1-  878     _00244_DS_:
                                    1-  879     	.line	214, "main.c"; 	PORTA &= 0xFE;
     0026 1Crr                      1-  880     	BCR	_PORTA,0
     0027                           1-  881     _00245_DS_:
                                    1-  882     	.line	216, "main.c"; 	if(++ledCount > 430)
     0027 05rr                      1-  883     	INCR	_ledCount,F
     0028 0D03                      1-  884     	BTRSC	STATUS,2
     0029 05rr                      1-  885     	INCR	(_ledCount + 1),F
                                    1-  886     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  887     ;;unsigned compare: left >= lit (0x1AF=431), size=2
     002A 2101                      1-  888     	MOVIA	0x01
     002B 04rr                      1-  889     	SUBAR	(_ledCount + 1),W
     002C 0903                      1-  890     	BTRSS	STATUS,2
                                    1-  891     	MGOTO	_00268_DS_
     002D 3rrr                      3-   63 m1      LGOTO rom_address
     002E 21AF                      1-  892     	MOVIA	0xaf
     002F 04rr                      1-  893     	SUBAR	_ledCount,W
     0030                           1-  894     _00268_DS_:
     0030 0803                      1-  895     	BTRSS	STATUS,0
                                    1-  896     	MGOTO	_00248_DS_
     0031 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  897     	.line	217, "main.c"; 	ledCount = 0;
     0032 02rr                      1-  898     	CLRR	_ledCount
     0033 02rr                      1-  899     	CLRR	(_ledCount + 1)
     0034                           1-  900     _00248_DS_:
                                    1-  901     	.line	218, "main.c"; 	}
                                    1-  902     	RETURN	
     0034 0010                      3-   40 m1      ret
                                    1-  903     ; exit point of _showRGB
                                    1-  905     ;***
                                    1-  906     ;  pBlock Stats: dbName = C
                                    1-  907     ;***
                                    1-  908     ;has an exit
                                    1-  909     ;functions called:
                                    1-  910     ;   __divuint
                                    1-  911     ;   __divuint
                                    1-  912     ;7 compiler assigned registers:
                                    1-  913     ;   r0x1026
                                    1-  914     ;   r0x1027
                                    1-  915     ;   r0x1028
                                    1-  916     ;   r0x1029
                                    1-  917     ;   STK02
                                    1-  918     ;   STK01
                                    1-  919     ;   STK00
                                    1-  920     ;; Starting pCode block
                                    1-  921     .segment "code"; module=main, function=_workCtr
     0000                           1-  923     _workCtr:
                                    1-  924     ; 2 exit points
                                    1-  925     	.line	90, "main.c"; 	if(workStep > 0)
     0000 01rr                      1-  926     	MOVR	_workStep,W
     0001 0D03                      1-  927     	BTRSC	STATUS,2
                                    1-  928     	MGOTO	_00146_DS_
     0002 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  929     	.line	92, "main.c"; 	if(workStep == 1)
     0003 01rr                      1-  930     	MOVR	_workStep,W
     0004 2401                      1-  931     	XORIA	0x01
     0005 0903                      1-  932     	BTRSS	STATUS,2
                                    1-  933     	MGOTO	_00143_DS_
     0006 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  934     	.line	94, "main.c"; 	red = 350;
     0007 215E                      1-  935     	MOVIA	0x5e
     0008 00rr                      1-  936     	MOVAR	_red
     0009 2101                      1-  937     	MOVIA	0x01
     000A 00rr                      1-  938     	MOVAR	(_red + 1)
                                    1-  939     	.line	95, "main.c"; 	green = 0;
     000B 02rr                      1-  940     	CLRR	_green
     000C 02rr                      1-  941     	CLRR	(_green + 1)
                                    1-  942     	.line	96, "main.c"; 	blue = 0;
     000D 02rr                      1-  943     	CLRR	_blue
     000E 02rr                      1-  944     	CLRR	(_blue + 1)
                                    1-  945     	MGOTO	_00146_DS_
     000F 3rrr                      3-   63 m1      LGOTO rom_address
     0010                           1-  946     _00143_DS_:
                                    1-  947     	.line	98, "main.c"; 	else if(workStep == 2)
     0010 01rr                      1-  948     	MOVR	_workStep,W
     0011 2402                      1-  949     	XORIA	0x02
     0012 0903                      1-  950     	BTRSS	STATUS,2
                                    1-  951     	MGOTO	_00140_DS_
     0013 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  952     	.line	100, "main.c"; 	red = 0;
     0014 02rr                      1-  953     	CLRR	_red
     0015 02rr                      1-  954     	CLRR	(_red + 1)
                                    1-  955     	.line	101, "main.c"; 	green = 350;
     0016 215E                      1-  956     	MOVIA	0x5e
     0017 00rr                      1-  957     	MOVAR	_green
     0018 2101                      1-  958     	MOVIA	0x01
     0019 00rr                      1-  959     	MOVAR	(_green + 1)
                                    1-  960     	.line	102, "main.c"; 	blue = 0;
     001A 02rr                      1-  961     	CLRR	_blue
     001B 02rr                      1-  962     	CLRR	(_blue + 1)
                                    1-  963     	MGOTO	_00146_DS_
     001C 3rrr                      3-   63 m1      LGOTO rom_address
     001D                           1-  964     _00140_DS_:
                                    1-  965     	.line	104, "main.c"; 	else if(workStep == 3)
     001D 01rr                      1-  966     	MOVR	_workStep,W
     001E 2403                      1-  967     	XORIA	0x03
     001F 0903                      1-  968     	BTRSS	STATUS,2
                                    1-  969     	MGOTO	_00137_DS_
     0020 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  970     	.line	106, "main.c"; 	red = 0;
     0021 02rr                      1-  971     	CLRR	_red
     0022 02rr                      1-  972     	CLRR	(_red + 1)
                                    1-  973     	.line	107, "main.c"; 	green = 0;
     0023 02rr                      1-  974     	CLRR	_green
     0024 02rr                      1-  975     	CLRR	(_green + 1)
                                    1-  976     	.line	108, "main.c"; 	blue = 431;
     0025 21AF                      1-  977     	MOVIA	0xaf
     0026 00rr                      1-  978     	MOVAR	_blue
     0027 2101                      1-  979     	MOVIA	0x01
     0028 00rr                      1-  980     	MOVAR	(_blue + 1)
                                    1-  981     	MGOTO	_00146_DS_
     0029 3rrr                      3-   63 m1      LGOTO rom_address
     002A                           1-  982     _00137_DS_:
                                    1-  983     	.line	110, "main.c"; 	else if(workStep == 4)
     002A 01rr                      1-  984     	MOVR	_workStep,W
     002B 2404                      1-  985     	XORIA	0x04
     002C 0903                      1-  986     	BTRSS	STATUS,2
                                    1-  987     	MGOTO	_00134_DS_
     002D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  988     	.line	112, "main.c"; 	red = 66;
     002E 2142                      1-  989     	MOVIA	0x42
     002F 00rr                      1-  990     	MOVAR	_red
     0030 02rr                      1-  991     	CLRR	(_red + 1)
                                    1-  992     	.line	113, "main.c"; 	green = 350;
     0031 215E                      1-  993     	MOVIA	0x5e
     0032 00rr                      1-  994     	MOVAR	_green
     0033 2101                      1-  995     	MOVIA	0x01
     0034 00rr                      1-  996     	MOVAR	(_green + 1)
                                    1-  997     	.line	114, "main.c"; 	blue = 0;
     0035 02rr                      1-  998     	CLRR	_blue
     0036 02rr                      1-  999     	CLRR	(_blue + 1)
                                    1- 1000     	MGOTO	_00146_DS_
     0037 3rrr                      3-   63 m1      LGOTO rom_address
     0038                           1- 1001     _00134_DS_:
                                    1- 1002     	.line	116, "main.c"; 	else if(workStep == 5)
     0038 01rr                      1- 1003     	MOVR	_workStep,W
     0039 2405                      1- 1004     	XORIA	0x05
     003A 0903                      1- 1005     	BTRSS	STATUS,2
                                    1- 1006     	MGOTO	_00131_DS_
     003B 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1007     	.line	118, "main.c"; 	red = 0;
     003C 02rr                      1- 1008     	CLRR	_red
     003D 02rr                      1- 1009     	CLRR	(_red + 1)
                                    1- 1010     	.line	119, "main.c"; 	green = 244;
     003E 21F4                      1- 1011     	MOVIA	0xf4
     003F 00rr                      1- 1012     	MOVAR	_green
     0040 02rr                      1- 1013     	CLRR	(_green + 1)
                                    1- 1014     	.line	120, "main.c"; 	blue = 431;
     0041 21AF                      1- 1015     	MOVIA	0xaf
     0042 00rr                      1- 1016     	MOVAR	_blue
     0043 2101                      1- 1017     	MOVIA	0x01
     0044 00rr                      1- 1018     	MOVAR	(_blue + 1)
                                    1- 1019     	MGOTO	_00146_DS_
     0045 3rrr                      3-   63 m1      LGOTO rom_address
     0046                           1- 1020     _00131_DS_:
                                    1- 1021     	.line	122, "main.c"; 	else if(workStep == 6)
     0046 01rr                      1- 1022     	MOVR	_workStep,W
     0047 2406                      1- 1023     	XORIA	0x06
     0048 0903                      1- 1024     	BTRSS	STATUS,2
                                    1- 1025     	MGOTO	_00128_DS_
     0049 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1026     	.line	124, "main.c"; 	red = 86;
     004A 2156                      1- 1027     	MOVIA	0x56
     004B 00rr                      1- 1028     	MOVAR	_red
     004C 02rr                      1- 1029     	CLRR	(_red + 1)
                                    1- 1030     	.line	125, "main.c"; 	green = 0;
     004D 02rr                      1- 1031     	CLRR	_green
     004E 02rr                      1- 1032     	CLRR	(_green + 1)
                                    1- 1033     	.line	126, "main.c"; 	blue = 431;
     004F 21AF                      1- 1034     	MOVIA	0xaf
     0050 00rr                      1- 1035     	MOVAR	_blue
     0051 2101                      1- 1036     	MOVIA	0x01
     0052 00rr                      1- 1037     	MOVAR	(_blue + 1)
                                    1- 1038     	MGOTO	_00146_DS_
     0053 3rrr                      3-   63 m1      LGOTO rom_address
     0054                           1- 1039     _00128_DS_:
                                    1- 1040     	.line	128, "main.c"; 	else if(workStep == 7)
     0054 01rr                      1- 1041     	MOVR	_workStep,W
     0055 2407                      1- 1042     	XORIA	0x07
     0056 0903                      1- 1043     	BTRSS	STATUS,2
                                    1- 1044     	MGOTO	_00146_DS_
     0057 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1045     	.line	130, "main.c"; 	red = 46;
     0058 212E                      1- 1046     	MOVIA	0x2e
     0059 00rr                      1- 1047     	MOVAR	_red
     005A 02rr                      1- 1048     	CLRR	(_red + 1)
                                    1- 1049     	.line	131, "main.c"; 	green = 290;
     005B 2122                      1- 1050     	MOVIA	0x22
     005C 00rr                      1- 1051     	MOVAR	_green
     005D 2101                      1- 1052     	MOVIA	0x01
     005E 00rr                      1- 1053     	MOVAR	(_green + 1)
                                    1- 1054     	.line	132, "main.c"; 	blue = 431;
     005F 21AF                      1- 1055     	MOVIA	0xaf
     0060 00rr                      1- 1056     	MOVAR	_blue
     0061 2101                      1- 1057     	MOVIA	0x01
     0062 00rr                      1- 1058     	MOVAR	(_blue + 1)
     0063                           1- 1059     _00146_DS_:
                                    1- 1060     	.line	136, "main.c"; 	if(workCount > 0 || timeCount > 0)
     0063 01rr                      1- 1061     	MOVR	_workCount,W
     0064 0903                      1- 1062     	BTRSS	STATUS,2
                                    1- 1063     	MGOTO	_00158_DS_
     0065 3rrr                      3-   63 m1      LGOTO rom_address
     0066 01rr                      1- 1064     	MOVR	_timeCount,W
     0067 0D03                      1- 1065     	BTRSC	STATUS,2
                                    1- 1066     	MGOTO	_00159_DS_
     0068 3rrr                      3-   63 m1      LGOTO rom_address
     0069                           1- 1067     _00158_DS_:
                                    1- 1068     	.line	138, "main.c"; 	--timeCount;
     0069 06rr                      1- 1069     	DECR	_timeCount,F
                                    1- 1070     	.line	139, "main.c"; 	SKFlag = 0;
     006A 02rr                      1- 1071     	CLRR	_SKFlag
                                    1- 1072     	.line	140, "main.c"; 	if(timeCount - delayCount > 0)
     006B 01rr                      1- 1073     	MOVR	_timeCount,W
     006C 00rr                      1- 1074     	MOVAR	r0x1026
     006D 02rr                      1- 1075     	CLRR	r0x1027
     006E 01rr                      1- 1076     	MOVR	_delayCount,W
     006F 00rr                      1- 1077     	MOVAR	r0x1028
     0070 02rr                      1- 1078     	CLRR	r0x1029
     0071 01rr                      1- 1079     	MOVR	r0x1028,W
     0072 04rr                      1- 1080     	SUBAR	r0x1026,F
     0073 2100                      1- 1081     	MOVIA	0x00
     0074 0803                      1- 1082     	BTRSS	STATUS,0
     0075 16rr                      1- 1083     	INCRSZ	r0x1029,W
     0076 04rr                      1- 1084     	SUBAR	r0x1027,F
                                    1- 1085     ;;swapping arguments (AOP_TYPEs 1/2)
                                    1- 1086     ;;signed compare: left >= lit (0x1=1), size=2, mask=ffff
     0077 01rr                      1- 1087     	MOVR	r0x1027,W
     0078 2580                      1- 1088     	ADDIA	0x80
     0079 2580                      1- 1089     	ADDIA	0x80
     007A 0903                      1- 1090     	BTRSS	STATUS,2
                                    1- 1091     	MGOTO	_00230_DS_
     007B 3rrr                      3-   63 m1      LGOTO rom_address
     007C 2101                      1- 1092     	MOVIA	0x01
     007D 04rr                      1- 1093     	SUBAR	r0x1026,W
     007E                           1- 1094     _00230_DS_:
     007E 0803                      1- 1095     	BTRSS	STATUS,0
                                    1- 1096     	MGOTO	_00148_DS_
     007F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1097     	.line	142, "main.c"; 	ledFlag = 1;
     0080 2101                      1- 1098     	MOVIA	0x01
     0081 00rr                      1- 1099     	MOVAR	_ledFlag
                                    1- 1100     	MGOTO	_00149_DS_
     0082 3rrr                      3-   63 m1      LGOTO rom_address
     0083                           1- 1101     _00148_DS_:
                                    1- 1102     	.line	146, "main.c"; 	ledFlag = 0;
     0083 02rr                      1- 1103     	CLRR	_ledFlag
     0084                           1- 1104     _00149_DS_:
                                    1- 1105     	.line	148, "main.c"; 	if(timeCount == 0)
     0084 01rr                      1- 1106     	MOVR	_timeCount,W
     0085 0903                      1- 1107     	BTRSS	STATUS,2
                                    1- 1108     	MGOTO	_00159_DS_
     0086 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1109     	.line	150, "main.c"; 	if(workCount > 0)
     0087 01rr                      1- 1110     	MOVR	_workCount,W
     0088 0D03                      1- 1111     	BTRSC	STATUS,2
                                    1- 1112     	MGOTO	_00159_DS_
     0089 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1113     	.line	152, "main.c"; 	--workCount;
     008A 06rr                      1- 1114     	DECR	_workCount,F
                                    1- 1115     	.line	153, "main.c"; 	timeCount = 4+delayCount;
     008B 2104                      1- 1116     	MOVIA	0x04
     008C 03rr                      1- 1117     	ADDAR	_delayCount,W
     008D 00rr                      1- 1118     	MOVAR	_timeCount
                                    1- 1119     	.line	154, "main.c"; 	if(workCount == 0)
     008E 01rr                      1- 1120     	MOVR	_workCount,W
     008F 0903                      1- 1121     	BTRSS	STATUS,2
                                    1- 1122     	MGOTO	_00159_DS_
     0090 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1123     	.line	156, "main.c"; 	if(++workStep > 7)
     0091 05rr                      1- 1124     	INCR	_workStep,F
                                    1- 1125     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1126     ;;unsigned compare: left >= lit (0x8=8), size=1
     0092 2108                      1- 1127     	MOVIA	0x08
     0093 04rr                      1- 1128     	SUBAR	_workStep,W
     0094 0803                      1- 1129     	BTRSS	STATUS,0
                                    1- 1130     	MGOTO	_00159_DS_
     0095 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1131     	.line	157, "main.c"; 	workStep = 1;
     0096 2101                      1- 1132     	MOVIA	0x01
     0097 00rr                      1- 1133     	MOVAR	_workStep
     0098                           1- 1134     _00159_DS_:
                                    1- 1135     	.line	163, "main.c"; 	if(timeCount == 0 && workCount == 0)
     0098 01rr                      1- 1136     	MOVR	_timeCount,W
     0099 0903                      1- 1137     	BTRSS	STATUS,2
                                    1- 1138     	MGOTO	_00171_DS_
     009A 3rrr                      3-   63 m1      LGOTO rom_address
     009B 01rr                      1- 1139     	MOVR	_workCount,W
     009C 0903                      1- 1140     	BTRSS	STATUS,2
                                    1- 1141     	MGOTO	_00171_DS_
     009D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1142     	.line	165, "main.c"; 	if(0x20 & PORTA || SKFlag == 1)
     009E 0Err                      1- 1143     	BTRSC	_PORTA,5
                                    1- 1144     	MGOTO	_00165_DS_
     009F 3rrr                      3-   63 m1      LGOTO rom_address
     00A0 01rr                      1- 1145     	MOVR	_SKFlag,W
     00A1 2401                      1- 1146     	XORIA	0x01
     00A2 0903                      1- 1147     	BTRSS	STATUS,2
                                    1- 1148     	MGOTO	_00171_DS_
     00A3 3rrr                      3-   63 m1      LGOTO rom_address
     00A4                           1- 1149     _00165_DS_:
                                    1- 1150     	.line	167, "main.c"; 	timeCount = 4+delayCount;
     00A4 2104                      1- 1151     	MOVIA	0x04
     00A5 03rr                      1- 1152     	ADDAR	_delayCount,W
     00A6 00rr                      1- 1153     	MOVAR	_timeCount
                                    1- 1154     	.line	168, "main.c"; 	workCount = 2;
     00A7 2102                      1- 1155     	MOVIA	0x02
     00A8 00rr                      1- 1156     	MOVAR	_workCount
                                    1- 1157     	.line	169, "main.c"; 	SKFlag = 0;
     00A9 02rr                      1- 1158     	CLRR	_SKFlag
                                    1- 1159     	.line	170, "main.c"; 	delayCount = R_AIN8_DATA /56;
     00AA 2138                      1- 1160     	MOVIA	0x38
     00AB 00rr                      1- 1161     	MOVAR	STK02
     00AC 2100                      1- 1162     	MOVIA	0x00
     00AD 00rr                      1- 1163     	MOVAR	STK01
     00AE 01rr                      1- 1164     	MOVR	_R_AIN8_DATA,W
     00AF 00rr                      1- 1165     	MOVAR	STK00
     00B0 01rr                      1- 1166     	MOVR	(_R_AIN8_DATA + 1),W
                                    1- 1167     	MCALL	__divuint
     00B1 2rrr                      3-   66 m1      LCALL rom_address
     00B2 00rr                      1- 1168     	MOVAR	r0x1027
     00B3 01rr                      1- 1169     	MOVR	STK00,W
     00B4 00rr                      1- 1170     	MOVAR	r0x1026
     00B5 00rr                      1- 1171     	MOVAR	_delayCount
                                    1- 1172     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1- 1173     ;;unsigned compare: left >= lit (0x47=71), size=1
                                    1- 1174     	.line	171, "main.c"; 	if(delayCount > 70)
     00B6 2147                      1- 1175     	MOVIA	0x47
     00B7 04rr                      1- 1176     	SUBAR	_delayCount,W
     00B8 0803                      1- 1177     	BTRSS	STATUS,0
                                    1- 1178     	MGOTO	_00162_DS_
     00B9 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1179     	.line	172, "main.c"; 	delayCount = 70;
     00BA 2146                      1- 1180     	MOVIA	0x46
     00BB 00rr                      1- 1181     	MOVAR	_delayCount
                                    1- 1182     ;;unsigned compare: left < lit (0x2=2), size=1
     00BC                           1- 1183     _00162_DS_:
                                    1- 1184     	.line	173, "main.c"; 	if(delayCount < 2)
     00BC 2102                      1- 1185     	MOVIA	0x02
     00BD 04rr                      1- 1186     	SUBAR	_delayCount,W
     00BE 0C03                      1- 1187     	BTRSC	STATUS,0
                                    1- 1188     	MGOTO	_00171_DS_
     00BF 3rrr                      3-   63 m1      LGOTO rom_address
                                    1- 1189     	.line	174, "main.c"; 	delayCount = 2;
     00C0 2102                      1- 1190     	MOVIA	0x02
     00C1 00rr                      1- 1191     	MOVAR	_delayCount
     00C2                           1- 1192     _00171_DS_:
                                    1- 1193     	.line	177, "main.c"; 	}
                                    1- 1194     	RETURN	
     00C2 0010                      3-   40 m1      ret
                                    1- 1195     ; exit point of _workCtr
                                    1- 1198     ;	code size estimation:
                                    1- 1199     ;	  475+    0 =   475 instructions (  950 byte)
                                    1- 1201     	end

SYMBOL TABLE            TYPE     VALUE
__PIN_COUNT__           Constant 0000000E
__PROCESSOR__           Constant 00810613
C                       Constant 00000000
DC                      Constant 00000001
ENABLE_RAM_BANK         Constant 00000000
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
STATUS                  Constant 00000003
USEFGOTO                Constant 00000000
W                       Constant 00000000
Z                       Constant 00000002


SOURCE FILE TABLE
001 OBJ/main.s
002 ny8b061d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8B061D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000005FF
DATA ROM     = 0x00000000 - 0x000005FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
