
                    Nyquest Technology Co., Ltd.

NYASM 2.28

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A050D,c=on
                                    1-    9     	#include "ny8a050d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTBbits
                                    1-   15     	extern	_PCONbits
                                    1-   16     	extern	_BWUCONbits
                                    1-   17     	extern	_BPLCONbits
                                    1-   18     	extern	_BPHCONbits
                                    1-   19     	extern	_INTEbits
                                    1-   20     	extern	_INTFbits
                                    1-   21     	extern	_INDF
                                    1-   22     	extern	_TMR0
                                    1-   23     	extern	_PCL
                                    1-   24     	extern	_STATUS
                                    1-   25     	extern	_FSR
                                    1-   26     	extern	_PORTB
                                    1-   27     	extern	_PCON
                                    1-   28     	extern	_BWUCON
                                    1-   29     	extern	_PCHBUF
                                    1-   30     	extern	_BPLCON
                                    1-   31     	extern	_BPHCON
                                    1-   32     	extern	_INTE
                                    1-   33     	extern	_INTF
                                    1-   34     	extern	_TBHP
                                    1-   35     	extern	_TBHD
                                    1-   36     	extern	_OSCCR
                                    1-   37     	extern	_IOSTB
                                    1-   38     	extern	_PS0CV
                                    1-   39     	extern	_BODCON
                                    1-   40     	extern	_PCON1
                                    1-   41     	extern	_T0MD
                                    1-   42     	extern	___sdcc_saved_fsr
                                    1-   43     	extern	___sdcc_saved_stk00
                                    1-   44     	extern	___sdcc_saved_stk01
                                    1-   45     	extern	__nyc_ny8_startup
                                    1-   46     ;--------------------------------------------------------
                                    1-   47     ; global declarations
                                    1-   48     ;--------------------------------------------------------
                                    1-   49     	extern	_gotoSleep
                                    1-   50     	extern	_setLedduty
                                    1-   51     	extern	_keyCtr
                                    1-   52     	extern	_keyRead
                                    1-   53     	extern	_workCtr
                                    1-   54     	extern	_isr
                                    1-   55     	extern	_main
                                    1-   56     	extern	_workTime
                                    1-   57     	extern	_IntFlag
                                    1-   58     	extern	_intCount
                                    1-   59     	extern	_duty0
                                    1-   60     	extern	_duty1
                                    1-   61     	extern	_powerFlag
                                    1-   62     	extern	_keyCount
                                    1-   63     	extern	_ledCount
                                    1-   64     	extern	_sleepTime
                                    1-   65     	extern	_stopTime
                                    1-   66     	extern	_count1s
                                    1-   68     	extern PSAVE
                                    1-   69     	extern SSAVE
                                    1-   70     	extern WSAVE
                                    1-   71     	extern STK04
                                    1-   72     	extern STK03
                                    1-   73     	extern STK02
                                    1-   74     	extern STK01
                                    1-   75     	extern STK00
                                    1-   77     .segment "uninit", 0x20000010
 20000010                           1-   78     PSAVE:
                                    1-   79     	.res 1
 20000011                           1-   80     SSAVE:
                                    1-   81     	.res 1
 20000012                           1-   82     WSAVE:
                                    1-   83     	.res 1
 20000013                           1-   84     STK04:
                                    1-   85     	.res 1
 20000014                           1-   86     STK03:
                                    1-   87     	.res 1
 20000015                           1-   88     STK02:
                                    1-   89     	.res 1
 20000016                           1-   90     STK01:
                                    1-   91     	.res 1
 20000017                           1-   92     STK00:
                                    1-   93     	.res 1
                                    1-   95     ;--------------------------------------------------------
                                    1-   96     ; global definitions
                                    1-   97     ;--------------------------------------------------------
                                    1-   98     ;--------------------------------------------------------
                                    1-   99     ; absolute symbol definitions
                                    1-  100     ;--------------------------------------------------------
                                    1-  101     ;--------------------------------------------------------
                                    1-  102     ; compiler-defined variables
                                    1-  103     ;--------------------------------------------------------
                                    1-  104     .segment "uninit"
     0000                           1-  105     r0x1010:
                                    1-  106     	.res	1
                                    1-  107     .segment "uninit"
     0000                           1-  108     r0x1011:
                                    1-  109     	.res	1
                                    1-  110     ;--------------------------------------------------------
                                    1-  111     ; initialized data
                                    1-  112     ;--------------------------------------------------------
                                    1-  114     .segment "idata"
     0000                           1-  115     _workTime:
     0000 0000 0000                 1-  116     	dw	0x00, 0x00
                                    1-  120     .segment "idata"
     0000                           1-  121     _IntFlag:
     0000 0000                      1-  122     	dw	0x00
                                    1-  126     .segment "idata"
     0000                           1-  127     _intCount:
     0000 0000                      1-  128     	dw	0x00
                                    1-  132     .segment "idata"
     0000                           1-  133     _duty0:
     0000 0000                      1-  134     	dw	0x00
                                    1-  138     .segment "idata"
     0000                           1-  139     _duty1:
     0000 0000                      1-  140     	dw	0x00
                                    1-  144     .segment "idata"
     0000                           1-  145     _powerFlag:
     0000 0000                      1-  146     	dw	0x00
                                    1-  150     .segment "idata"
     0000                           1-  151     _keyCount:
     0000 0000                      1-  152     	dw	0x00
                                    1-  156     .segment "idata"
     0000                           1-  157     _ledCount:
     0000 0000                      1-  158     	dw	0x00
                                    1-  162     .segment "idata"
     0000                           1-  163     _sleepTime:
     0000 0000                      1-  164     	dw	0x00
                                    1-  168     .segment "idata"
     0000                           1-  169     _stopTime:
     0000 0000 0000                 1-  170     	dw	0x00, 0x00
                                    1-  174     .segment "idata"
     0000                           1-  175     _count1s:
     0000 0000                      1-  176     	dw	0x00
                                    1-  179     ;--------------------------------------------------------
                                    1-  180     ; overlayable items in internal ram 
                                    1-  181     ;--------------------------------------------------------
                                    1-  182     ;	udata_ovr
                                    1-  183     ;--------------------------------------------------------
                                    1-  184     ; reset vector 
                                    1-  185     ;--------------------------------------------------------
                                    1-  186     ORG	0x0000
     0000 3rrr                      1-  187     	LGOTO	__nyc_ny8_startup
                                    1-  188     ;--------------------------------------------------------
                                    1-  189     ; interrupt and initialization code
                                    1-  190     ;--------------------------------------------------------
                                    1-  191     ORG 0x0008
                                    1-  192     	MGOTO	__sdcc_interrupt
     0008 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  194     .segment "code"
     0000                           1-  195     __sdcc_interrupt:
                                    1-  196     ;***
                                    1-  197     ;  pBlock Stats: dbName = I
                                    1-  198     ;***
                                    1-  199     ;2 compiler assigned registers:
                                    1-  200     ;   STK00
                                    1-  201     ;   STK01
                                    1-  202     ;; Starting pCode block
     0000                           1-  203     _isr:
                                    1-  204     ; 0 exit points
                                    1-  205     	.line	28, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  206     	MOVAR	WSAVE
     0001 1503                      1-  207     	SWAPR	STATUS,W
     0002 0283                      1-  208     	CLRR	STATUS
     0003 00rr                      1-  209     	MOVAR	SSAVE
     0004 010A                      1-  210     	MOVR	PCHBUF,W
     0005 028A                      1-  211     	CLRR	PCHBUF
     0006 00rr                      1-  212     	MOVAR	PSAVE
     0007 0104                      1-  213     	MOVR	FSR,W
     0008 00rr                      1-  214     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  215     	MOVR	STK00,W
     000A 00rr                      1-  216     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  217     	MOVR	STK01,W
     000C 00rr                      1-  218     	MOVAR	___sdcc_saved_stk01
                                    1-  219     	.line	30, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  220     	BTRSS	_INTFbits,0
                                    1-  221     	MGOTO	_00108_DS_
     000E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  222     	.line	32, "main.c"; 	TMR0 += 56;
     000F 2138                      1-  223     	MOVIA	0x38
     0010 03rr                      1-  224     	ADDAR	_TMR0,F
                                    1-  225     	.line	33, "main.c"; 	if(++intCount >= 100)
     0011 05rr                      1-  226     	INCR	_intCount,F
                                    1-  227     ;;unsigned compare: left < lit (0x64=100), size=1
     0012 2164                      1-  228     	MOVIA	0x64
     0013 04rr                      1-  229     	SUBAR	_intCount,W
     0014 0803                      1-  230     	BTRSS	STATUS,0
                                    1-  231     	MGOTO	_00108_DS_
     0015 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  232     	.line	35, "main.c"; 	intCount = 0;
     0016 02rr                      1-  233     	CLRR	_intCount
                                    1-  234     	.line	36, "main.c"; 	IntFlag = 1;
     0017 2101                      1-  235     	MOVIA	0x01
     0018 00rr                      1-  236     	MOVAR	_IntFlag
     0019                           1-  237     _00108_DS_:
                                    1-  238     	.line	39, "main.c"; 	if(INTFbits.PBIF)
     0019 08rr                      1-  239     	BTRSS	_INTFbits,1
                                    1-  240     	MGOTO	_00110_DS_
     001A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  241     	.line	41, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     001B 21FD                      1-  242     	MOVIA	0xfd
     001C 00rr                      1-  243     	MOVAR	_INTF
     001D                           1-  244     _00110_DS_:
                                    1-  245     	.line	44, "main.c"; 	INTF = 0;
     001D 02rr                      1-  246     	CLRR	_INTF
                                    1-  247     	.line	46, "main.c"; 	}
     001E 01rr                      1-  248     	MOVR	___sdcc_saved_stk01,W
     001F 00rr                      1-  249     	MOVAR	STK01
     0020 01rr                      1-  250     	MOVR	___sdcc_saved_stk00,W
     0021 00rr                      1-  251     	MOVAR	STK00
     0022 01rr                      1-  252     	MOVR	___sdcc_saved_fsr,W
     0023 0084                      1-  253     	MOVAR	FSR
     0024 01rr                      1-  254     	MOVR	PSAVE,W
     0025 008A                      1-  255     	MOVAR	PCHBUF
     0026 0283                      1-  256     	CLRR	STATUS
     0027 15rr                      1-  257     	SWAPR	SSAVE,W
     0028 0083                      1-  258     	MOVAR	STATUS
     0029 15rr                      1-  259     	SWAPR	WSAVE,F
     002A 15rr                      1-  260     	SWAPR	WSAVE,W
     002B                           1-  261     END_OF_INTERRUPT:
     002B 0011                      1-  262     	RETIE	
                                    1-  264     ;--------------------------------------------------------
                                    1-  265     ; code
                                    1-  266     ;--------------------------------------------------------
                                    1-  267     ;***
                                    1-  268     ;  pBlock Stats: dbName = M
                                    1-  269     ;***
                                    1-  270     ;has an exit
                                    1-  271     ;functions called:
                                    1-  272     ;   _gotoSleep
                                    1-  273     ;   _setLedduty
                                    1-  274     ;   _keyCtr
                                    1-  275     ;   _workCtr
                                    1-  276     ;   _gotoSleep
                                    1-  277     ;   _gotoSleep
                                    1-  278     ;   _setLedduty
                                    1-  279     ;   _keyCtr
                                    1-  280     ;   _workCtr
                                    1-  281     ;   _gotoSleep
                                    1-  282     ;; Starting pCode block
                                    1-  283     .segment "code"; module=main, function=_main
     0000                           1-  285     _main:
                                    1-  286     ; 2 exit points
                                    1-  287     	.line	51, "main.c"; 	DISI();
     0000 0013                      1-  288     	DISI
                                    1-  289     	.line	52, "main.c"; 	BPHCON = (unsigned char)~C_PB3_PHB;				// Enable PB4 Pull-High Resistor,others disable
     0001 21F7                      1-  290     	MOVIA	0xf7
     0002 00rr                      1-  291     	MOVAR	_BPHCON
                                    1-  292     	.line	53, "main.c"; 	IOSTB =  0x08;	// Set PB4 & PB1 to input mode,others set to output mode
     0003 2108                      1-  293     	MOVIA	0x08
     0004 000r                      1-  294     	IOST	_IOSTB
                                    1-  295     	.line	54, "main.c"; 	PORTB = 0x08;                       // PB2 & PB0 output high
     0005 00rr                      1-  296     	MOVAR	_PORTB
                                    1-  297     	.line	55, "main.c"; 	duty0 = duty1 = 0;
     0006 02rr                      1-  298     	CLRR	_duty1
     0007 02rr                      1-  299     	CLRR	_duty0
                                    1-  300     	.line	56, "main.c"; 	INTE =  C_INT_TMR0;
     0008 2101                      1-  301     	MOVIA	0x01
     0009 00rr                      1-  302     	MOVAR	_INTE
                                    1-  303     	.line	57, "main.c"; 	TMR0 = 55;
     000A 2137                      1-  304     	MOVIA	0x37
     000B 00rr                      1-  305     	MOVAR	_TMR0
                                    1-  306     	.line	58, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     000C 0200                      1-  307     	CLRA	
     000D 0003                      1-  308     	T0MD	
                                    1-  309     	.line	61, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     000E 2188                      1-  310     	MOVIA	0x88
     000F 00rr                      1-  311     	MOVAR	_PCON
                                    1-  312     	.line	64, "main.c"; 	PCON1 = C_TMR0_En;						// Enable Timer0
     0010 2101                      1-  313     	MOVIA	0x01
     0011 000r                      1-  314     	IOST	_PCON1
                                    1-  315     	.line	65, "main.c"; 	ENI();
     0012 0004                      1-  316     	ENI
                                    1-  317     	.line	66, "main.c"; 	gotoSleep();
                                    1-  318     	MCALL	_gotoSleep
     0013 2rrr                      3-   66 m1      LCALL rom_address
     0014                           1-  319     _00128_DS_:
                                    1-  320     	.line	69, "main.c"; 	CLRWDT();
     0014 0002                      1-  321     	clrwdt
                                    1-  322     	.line	70, "main.c"; 	if(powerFlag)
     0015 01rr                      1-  323     	MOVR	_powerFlag,W
     0016 0D03                      1-  324     	BTRSC	STATUS,2
                                    1-  325     	MGOTO	_00116_DS_
     0017 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  326     	.line	71, "main.c"; 	setLedduty();
                                    1-  327     	MCALL	_setLedduty
     0018 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  328     	MGOTO	_00117_DS_
     0019 3rrr                      3-   63 m1      LGOTO rom_address
     001A                           1-  329     _00116_DS_:
                                    1-  330     	.line	74, "main.c"; 	PORTB = 0x08;
     001A 2108                      1-  331     	MOVIA	0x08
     001B 00rr                      1-  332     	MOVAR	_PORTB
     001C                           1-  333     _00117_DS_:
                                    1-  334     	.line	76, "main.c"; 	if(!IntFlag)
     001C 01rr                      1-  335     	MOVR	_IntFlag,W
     001D 0D03                      1-  336     	BTRSC	STATUS,2
                                    1-  337     	MGOTO	_00128_DS_
     001E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  338     	.line	78, "main.c"; 	IntFlag = 0;   
     001F 02rr                      1-  339     	CLRR	_IntFlag
                                    1-  340     	.line	79, "main.c"; 	keyCtr();
                                    1-  341     	MCALL	_keyCtr
     0020 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  342     	.line	80, "main.c"; 	if(powerFlag)
     0021 01rr                      1-  343     	MOVR	_powerFlag,W
     0022 0D03                      1-  344     	BTRSC	STATUS,2
                                    1-  345     	MGOTO	_00124_DS_
     0023 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  346     	.line	81, "main.c"; 	workCtr();
                                    1-  347     	MCALL	_workCtr
     0024 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  348     	MGOTO	_00128_DS_
     0025 3rrr                      3-   63 m1      LGOTO rom_address
     0026                           1-  349     _00124_DS_:
                                    1-  350     	.line	84, "main.c"; 	if(keyCount == 0 && ++sleepTime > 200)
     0026 01rr                      1-  351     	MOVR	_keyCount,W
     0027 0903                      1-  352     	BTRSS	STATUS,2
                                    1-  353     	MGOTO	_00128_DS_
     0028 3rrr                      3-   63 m1      LGOTO rom_address
     0029 05rr                      1-  354     	INCR	_sleepTime,F
                                    1-  355     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  356     ;;unsigned compare: left >= lit (0xC9=201), size=1
     002A 21C9                      1-  357     	MOVIA	0xc9
     002B 04rr                      1-  358     	SUBAR	_sleepTime,W
     002C 0803                      1-  359     	BTRSS	STATUS,0
                                    1-  360     	MGOTO	_00128_DS_
     002D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  361     	.line	85, "main.c"; 	gotoSleep();
                                    1-  362     	MCALL	_gotoSleep
     002E 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  363     	MGOTO	_00128_DS_
     002F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  364     	.line	91, "main.c"; 	}
                                    1-  365     	RETURN	
     0030 0010                      3-   40 m1      ret
                                    1-  366     ; exit point of _main
                                    1-  368     ;***
                                    1-  369     ;  pBlock Stats: dbName = C
                                    1-  370     ;***
                                    1-  371     ;has an exit
                                    1-  372     ;; Starting pCode block
                                    1-  373     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  375     _gotoSleep:
                                    1-  376     ; 2 exit points
                                    1-  377     	.line	218, "main.c"; 	stopTime = 0;
     0000 02rr                      1-  378     	CLRR	_stopTime
     0001 02rr                      1-  379     	CLRR	(_stopTime + 1)
                                    1-  380     	.line	219, "main.c"; 	sleepTime = 0;
     0002 02rr                      1-  381     	CLRR	_sleepTime
                                    1-  382     	.line	220, "main.c"; 	IOSTB = 0x08;
     0003 2108                      1-  383     	MOVIA	0x08
     0004 000r                      1-  384     	IOST	_IOSTB
                                    1-  385     	.line	221, "main.c"; 	PORTB = 0x00;
     0005 02rr                      1-  386     	CLRR	_PORTB
                                    1-  387     	.line	222, "main.c"; 	BWUCON = 0x08;
     0006 2108                      1-  388     	MOVIA	0x08
     0007 00rr                      1-  389     	MOVAR	_BWUCON
                                    1-  390     	.line	223, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PBKey;
     0008 2103                      1-  391     	MOVIA	0x03
     0009 00rr                      1-  392     	MOVAR	_INTE
                                    1-  393     	.line	224, "main.c"; 	PCON =  C_LVR_En;	
     000A 2108                      1-  394     	MOVIA	0x08
     000B 00rr                      1-  395     	MOVAR	_PCON
                                    1-  396     	.line	225, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     000C 02rr                      1-  397     	CLRR	_INTF
                                    1-  398     	.line	226, "main.c"; 	CLRWDT();
     000D 0002                      1-  399     	clrwdt
                                    1-  400     	.line	227, "main.c"; 	ENI();
     000E 0004                      1-  401     	ENI
                                    1-  402     	.line	228, "main.c"; 	SLEEP();
     000F 0001                      1-  403     	sleep
                                    1-  404     	.line	229, "main.c"; 	BWUCON = 0x00;
     0010 02rr                      1-  405     	CLRR	_BWUCON
                                    1-  406     	.line	230, "main.c"; 	INTE =  C_INT_TMR0 ;	// Enable Timer0、Timer1、WDT overflow interrupt
     0011 2101                      1-  407     	MOVIA	0x01
     0012 00rr                      1-  408     	MOVAR	_INTE
                                    1-  409     	.line	231, "main.c"; 	INTF = 0;
     0013 02rr                      1-  410     	CLRR	_INTF
                                    1-  411     	.line	233, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT ,  Enable LVR
     0014 2188                      1-  412     	MOVIA	0x88
     0015 00rr                      1-  413     	MOVAR	_PCON
                                    1-  414     	.line	235, "main.c"; 	}
                                    1-  415     	RETURN	
     0016 0010                      3-   40 m1      ret
                                    1-  416     ; exit point of _gotoSleep
                                    1-  418     ;***
                                    1-  419     ;  pBlock Stats: dbName = C
                                    1-  420     ;***
                                    1-  421     ;; Starting pCode block
                                    1-  422     .segment "code"; module=main, function=_setLedduty
     0000                           1-  424     _setLedduty:
                                    1-  425     ; 0 exit points
                                    1-  426     	.line	190, "main.c"; 	if(ledCount < duty0)
     0000 01rr                      1-  427     	MOVR	_duty0,W
     0001 04rr                      1-  428     	SUBAR	_ledCount,W
     0002 0C03                      1-  429     	BTRSC	STATUS,0
                                    1-  430     	MGOTO	_00229_DS_
     0003 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  431     	.line	193, "main.c"; 	PORTB |= 0x10;
     0004 1Arr                      1-  432     	BSR	_PORTB,4
                                    1-  433     	MGOTO	_00230_DS_
     0005 3rrr                      3-   63 m1      LGOTO rom_address
     0006                           1-  434     _00229_DS_:
                                    1-  435     	.line	198, "main.c"; 	PORTB &= 0xEF;
     0006 1Err                      1-  436     	BCR	_PORTB,4
     0007                           1-  437     _00230_DS_:
                                    1-  438     	.line	200, "main.c"; 	if(ledCount < duty1)
     0007 01rr                      1-  439     	MOVR	_duty1,W
     0008 04rr                      1-  440     	SUBAR	_ledCount,W
     0009 0C03                      1-  441     	BTRSC	STATUS,0
                                    1-  442     	MGOTO	_00232_DS_
     000A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  443     	.line	203, "main.c"; 	PORTB |= 0x20;
     000B 1Arr                      1-  444     	BSR	_PORTB,5
                                    1-  445     	MGOTO	_00233_DS_
     000C 3rrr                      3-   63 m1      LGOTO rom_address
     000D                           1-  446     _00232_DS_:
                                    1-  447     	.line	208, "main.c"; 	PORTB &= 0xDF;
     000D 1Err                      1-  448     	BCR	_PORTB,5
     000E                           1-  449     _00233_DS_:
                                    1-  450     	.line	211, "main.c"; 	if(++ledCount >= 150)
     000E 05rr                      1-  451     	INCR	_ledCount,F
                                    1-  452     ;;unsigned compare: left < lit (0x96=150), size=1
     000F 2196                      1-  453     	MOVIA	0x96
     0010 04rr                      1-  454     	SUBAR	_ledCount,W
     0011 0C03                      1-  455     	BTRSC	STATUS,0
                                    1-  456     	.line	212, "main.c"; 	ledCount = 0;
     0012 02rr                      1-  457     	CLRR	_ledCount
                                    1-  458     	.line	213, "main.c"; 	}
                                    1-  459     	RETURN	
     0013 0010                      3-   40 m1      ret
                                    1-  461     ;***
                                    1-  462     ;  pBlock Stats: dbName = C
                                    1-  463     ;***
                                    1-  464     ;has an exit
                                    1-  465     ;functions called:
                                    1-  466     ;   _keyRead
                                    1-  467     ;   _keyRead
                                    1-  468     ;1 compiler assigned register :
                                    1-  469     ;   r0x1011
                                    1-  470     ;; Starting pCode block
                                    1-  471     .segment "code"; module=main, function=_keyCtr
     0000                           1-  473     _keyCtr:
                                    1-  474     ; 2 exit points
                                    1-  475     	.line	169, "main.c"; 	if(keyRead(0x08 & ~PORTB))
     0000 07rr                      1-  476     	COMR	_PORTB,W
     0001 00rr                      1-  477     	MOVAR	r0x1011
     0002 2108                      1-  478     	MOVIA	0x08
     0003 10rr                      1-  479     	ANDAR	r0x1011,F
     0004 01rr                      1-  480     	MOVR	r0x1011,W
                                    1-  481     	MCALL	_keyRead
     0005 2rrr                      3-   66 m1      LCALL rom_address
     0006 00rr                      1-  482     	MOVAR	r0x1011
     0007 01rr                      1-  483     	MOVR	r0x1011,W
     0008 0D03                      1-  484     	BTRSC	STATUS,2
                                    1-  485     	MGOTO	_00223_DS_
     0009 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  486     	.line	171, "main.c"; 	stopTime = 0;
     000A 02rr                      1-  487     	CLRR	_stopTime
     000B 02rr                      1-  488     	CLRR	(_stopTime + 1)
                                    1-  489     	.line	172, "main.c"; 	workTime = 0;
     000C 02rr                      1-  490     	CLRR	_workTime
     000D 02rr                      1-  491     	CLRR	(_workTime + 1)
                                    1-  492     	.line	173, "main.c"; 	duty0 = duty1 = 0;
     000E 02rr                      1-  493     	CLRR	_duty1
     000F 02rr                      1-  494     	CLRR	_duty0
                                    1-  495     	.line	174, "main.c"; 	ledCount = 0;
     0010 02rr                      1-  496     	CLRR	_ledCount
                                    1-  497     	.line	175, "main.c"; 	if(powerFlag)
     0011 01rr                      1-  498     	MOVR	_powerFlag,W
     0012 0D03                      1-  499     	BTRSC	STATUS,2
                                    1-  500     	MGOTO	_00219_DS_
     0013 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  501     	.line	177, "main.c"; 	powerFlag = 0;
     0014 02rr                      1-  502     	CLRR	_powerFlag
                                    1-  503     	MGOTO	_00223_DS_
     0015 3rrr                      3-   63 m1      LGOTO rom_address
     0016                           1-  504     _00219_DS_:
                                    1-  505     	.line	181, "main.c"; 	powerFlag = 1;
     0016 2101                      1-  506     	MOVIA	0x01
     0017 00rr                      1-  507     	MOVAR	_powerFlag
     0018                           1-  508     _00223_DS_:
                                    1-  509     	.line	184, "main.c"; 	}
                                    1-  510     	RETURN	
     0018 0010                      3-   40 m1      ret
                                    1-  511     ; exit point of _keyCtr
                                    1-  513     ;***
                                    1-  514     ;  pBlock Stats: dbName = C
                                    1-  515     ;***
                                    1-  516     ;has an exit
                                    1-  517     ;1 compiler assigned register :
                                    1-  518     ;   r0x1010
                                    1-  519     ;; Starting pCode block
                                    1-  520     .segment "code"; module=main, function=_keyRead
                                    1-  522     ;local variable name mapping:
     0000                           1-  524     _keyRead:
                                    1-  525     ; 2 exit points
                                    1-  526     	.line	142, "main.c"; 	char keyRead(char keyStatus)	
     0000 00rr                      1-  527     	MOVAR	r0x1010
                                    1-  528     	.line	144, "main.c"; 	if(keyStatus)
     0001 01rr                      1-  529     	MOVR	r0x1010,W
     0002 0D03                      1-  530     	BTRSC	STATUS,2
                                    1-  531     	MGOTO	_00211_DS_
     0003 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  532     	.line	146, "main.c"; 	sleepTime = 0;
     0004 02rr                      1-  533     	CLRR	_sleepTime
                                    1-  534     	.line	147, "main.c"; 	keyCount++;
     0005 05rr                      1-  535     	INCR	_keyCount,F
                                    1-  536     ;;unsigned compare: left < lit (0xC8=200), size=1
                                    1-  537     	.line	148, "main.c"; 	if(keyCount >= 200)
     0006 21C8                      1-  538     	MOVIA	0xc8
     0007 04rr                      1-  539     	SUBAR	_keyCount,W
     0008 0803                      1-  540     	BTRSS	STATUS,0
                                    1-  541     	MGOTO	_00212_DS_
     0009 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  542     	.line	150, "main.c"; 	keyCount = 200;
     000A 21C8                      1-  543     	MOVIA	0xc8
     000B 00rr                      1-  544     	MOVAR	_keyCount
                                    1-  545     	MGOTO	_00212_DS_
     000C 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  546     ;;unsigned compare: left < lit (0x8=8), size=1
     000D                           1-  547     _00211_DS_:
                                    1-  548     	.line	155, "main.c"; 	if(keyCount >= 8)
     000D 2108                      1-  549     	MOVIA	0x08
     000E 04rr                      1-  550     	SUBAR	_keyCount,W
     000F 0803                      1-  551     	BTRSS	STATUS,0
                                    1-  552     	MGOTO	_00209_DS_
     0010 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  553     	.line	157, "main.c"; 	keyCount = 0;
     0011 02rr                      1-  554     	CLRR	_keyCount
                                    1-  555     	.line	158, "main.c"; 	return	1;
     0012 2101                      1-  556     	MOVIA	0x01
                                    1-  557     	MGOTO	_00213_DS_
     0013 3rrr                      3-   63 m1      LGOTO rom_address
     0014                           1-  558     _00209_DS_:
                                    1-  559     	.line	160, "main.c"; 	keyCount = 0;
     0014 02rr                      1-  560     	CLRR	_keyCount
     0015                           1-  561     _00212_DS_:
                                    1-  562     	.line	162, "main.c"; 	return 0;
     0015 2100                      1-  563     	MOVIA	0x00
     0016                           1-  564     _00213_DS_:
                                    1-  565     	.line	163, "main.c"; 	}
                                    1-  566     	RETURN	
     0016 0010                      3-   40 m1      ret
                                    1-  567     ; exit point of _keyRead
                                    1-  569     ;***
                                    1-  570     ;  pBlock Stats: dbName = C
                                    1-  571     ;***
                                    1-  572     ;has an exit
                                    1-  573     ;; Starting pCode block
                                    1-  574     .segment "code"; module=main, function=_workCtr
     0000                           1-  576     _workCtr:
                                    1-  577     ; 2 exit points
                                    1-  578     	.line	95, "main.c"; 	if(++workTime >= 1300)
     0000 05rr                      1-  579     	INCR	_workTime,F
     0001 0D03                      1-  580     	BTRSC	STATUS,2
     0002 05rr                      1-  581     	INCR	(_workTime + 1),F
                                    1-  582     ;;unsigned compare: left < lit (0x514=1300), size=2
     0003 2105                      1-  583     	MOVIA	0x05
     0004 04rr                      1-  584     	SUBAR	(_workTime + 1),W
     0005 0903                      1-  585     	BTRSS	STATUS,2
                                    1-  586     	MGOTO	_00193_DS_
     0006 3rrr                      3-   63 m1      LGOTO rom_address
     0007 2114                      1-  587     	MOVIA	0x14
     0008 04rr                      1-  588     	SUBAR	_workTime,W
     0009                           1-  589     _00193_DS_:
     0009 0803                      1-  590     	BTRSS	STATUS,0
                                    1-  591     	MGOTO	_00134_DS_
     000A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  592     	.line	96, "main.c"; 	workTime = 0;
     000B 02rr                      1-  593     	CLRR	_workTime
     000C 02rr                      1-  594     	CLRR	(_workTime + 1)
                                    1-  595     ;;unsigned compare: left < lit (0x1F4=500), size=2
     000D                           1-  596     _00134_DS_:
                                    1-  597     	.line	97, "main.c"; 	if(workTime < 500)
     000D 2101                      1-  598     	MOVIA	0x01
     000E 04rr                      1-  599     	SUBAR	(_workTime + 1),W
     000F 0903                      1-  600     	BTRSS	STATUS,2
                                    1-  601     	MGOTO	_00194_DS_
     0010 3rrr                      3-   63 m1      LGOTO rom_address
     0011 21F4                      1-  602     	MOVIA	0xf4
     0012 04rr                      1-  603     	SUBAR	_workTime,W
     0013                           1-  604     _00194_DS_:
     0013 0C03                      1-  605     	BTRSC	STATUS,0
                                    1-  606     	MGOTO	_00152_DS_
     0014 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  607     	.line	99, "main.c"; 	duty0 = 150;
     0015 2196                      1-  608     	MOVIA	0x96
     0016 00rr                      1-  609     	MOVAR	_duty0
                                    1-  610     	.line	100, "main.c"; 	duty1 = 0;
     0017 02rr                      1-  611     	CLRR	_duty1
                                    1-  612     	MGOTO	_00153_DS_
     0018 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  613     ;;unsigned compare: left < lit (0x28A=650), size=2
     0019                           1-  614     _00152_DS_:
                                    1-  615     	.line	102, "main.c"; 	else if(workTime < 650)
     0019 2102                      1-  616     	MOVIA	0x02
     001A 04rr                      1-  617     	SUBAR	(_workTime + 1),W
     001B 0903                      1-  618     	BTRSS	STATUS,2
                                    1-  619     	MGOTO	_00195_DS_
     001C 3rrr                      3-   63 m1      LGOTO rom_address
     001D 218A                      1-  620     	MOVIA	0x8a
     001E 04rr                      1-  621     	SUBAR	_workTime,W
     001F                           1-  622     _00195_DS_:
     001F 0C03                      1-  623     	BTRSC	STATUS,0
                                    1-  624     	MGOTO	_00149_DS_
     0020 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  625     	.line	104, "main.c"; 	if(duty0 > 0)
     0021 01rr                      1-  626     	MOVR	_duty0,W
     0022 0903                      1-  627     	BTRSS	STATUS,2
                                    1-  628     	.line	106, "main.c"; 	duty0--;
     0023 06rr                      1-  629     	DECR	_duty0,F
                                    1-  630     	.line	108, "main.c"; 	if(duty1 < 150)
     0024 2196                      1-  631     	MOVIA	0x96
     0025 04rr                      1-  632     	SUBAR	_duty1,W
     0026 0C03                      1-  633     	BTRSC	STATUS,0
                                    1-  634     	MGOTO	_00153_DS_
     0027 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  635     	.line	110, "main.c"; 	duty1++;
     0028 05rr                      1-  636     	INCR	_duty1,F
                                    1-  637     	MGOTO	_00153_DS_
     0029 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  638     ;;unsigned compare: left < lit (0x47E=1150), size=2
     002A                           1-  639     _00149_DS_:
                                    1-  640     	.line	114, "main.c"; 	else if(workTime < 1150)
     002A 2104                      1-  641     	MOVIA	0x04
     002B 04rr                      1-  642     	SUBAR	(_workTime + 1),W
     002C 0903                      1-  643     	BTRSS	STATUS,2
                                    1-  644     	MGOTO	_00197_DS_
     002D 3rrr                      3-   63 m1      LGOTO rom_address
     002E 217E                      1-  645     	MOVIA	0x7e
     002F 04rr                      1-  646     	SUBAR	_workTime,W
     0030                           1-  647     _00197_DS_:
     0030 0C03                      1-  648     	BTRSC	STATUS,0
                                    1-  649     	MGOTO	_00146_DS_
     0031 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  650     	.line	116, "main.c"; 	duty0 = 0;
     0032 02rr                      1-  651     	CLRR	_duty0
                                    1-  652     	.line	117, "main.c"; 	duty1 = 150;
     0033 2196                      1-  653     	MOVIA	0x96
     0034 00rr                      1-  654     	MOVAR	_duty1
                                    1-  655     	MGOTO	_00153_DS_
     0035 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  656     ;;unsigned compare: left < lit (0x514=1300), size=2
     0036                           1-  657     _00146_DS_:
                                    1-  658     	.line	119, "main.c"; 	else if(workTime < 1300)
     0036 2105                      1-  659     	MOVIA	0x05
     0037 04rr                      1-  660     	SUBAR	(_workTime + 1),W
     0038 0903                      1-  661     	BTRSS	STATUS,2
                                    1-  662     	MGOTO	_00198_DS_
     0039 3rrr                      3-   63 m1      LGOTO rom_address
     003A 2114                      1-  663     	MOVIA	0x14
     003B 04rr                      1-  664     	SUBAR	_workTime,W
     003C                           1-  665     _00198_DS_:
     003C 0C03                      1-  666     	BTRSC	STATUS,0
                                    1-  667     	MGOTO	_00153_DS_
     003D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  668     	.line	121, "main.c"; 	if(duty1 > 0)
     003E 01rr                      1-  669     	MOVR	_duty1,W
     003F 0903                      1-  670     	BTRSS	STATUS,2
                                    1-  671     	.line	123, "main.c"; 	duty1--;
     0040 06rr                      1-  672     	DECR	_duty1,F
                                    1-  673     	.line	125, "main.c"; 	if(duty0 < 150)
     0041 2196                      1-  674     	MOVIA	0x96
     0042 04rr                      1-  675     	SUBAR	_duty0,W
     0043 0803                      1-  676     	BTRSS	STATUS,0
                                    1-  677     	.line	127, "main.c"; 	duty0++;
     0044 05rr                      1-  678     	INCR	_duty0,F
     0045                           1-  679     _00153_DS_:
                                    1-  680     	.line	130, "main.c"; 	if(++count1s >= 100)
     0045 05rr                      1-  681     	INCR	_count1s,F
     0046 2164                      1-  682     	MOVIA	0x64
     0047 04rr                      1-  683     	SUBAR	_count1s,W
     0048 0803                      1-  684     	BTRSS	STATUS,0
                                    1-  685     	MGOTO	_00158_DS_
     0049 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  686     	.line	132, "main.c"; 	count1s = 0;
     004A 02rr                      1-  687     	CLRR	_count1s
                                    1-  688     	.line	133, "main.c"; 	if(++stopTime > 1200)
     004B 05rr                      1-  689     	INCR	_stopTime,F
     004C 0D03                      1-  690     	BTRSC	STATUS,2
     004D 05rr                      1-  691     	INCR	(_stopTime + 1),F
                                    1-  692     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  693     ;;unsigned compare: left >= lit (0x4B1=1201), size=2
     004E 2104                      1-  694     	MOVIA	0x04
     004F 04rr                      1-  695     	SUBAR	(_stopTime + 1),W
     0050 0903                      1-  696     	BTRSS	STATUS,2
                                    1-  697     	MGOTO	_00201_DS_
     0051 3rrr                      3-   63 m1      LGOTO rom_address
     0052 21B1                      1-  698     	MOVIA	0xb1
     0053 04rr                      1-  699     	SUBAR	_stopTime,W
     0054                           1-  700     _00201_DS_:
     0054 0803                      1-  701     	BTRSS	STATUS,0
                                    1-  702     	MGOTO	_00158_DS_
     0055 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  703     	.line	135, "main.c"; 	powerFlag = 0;
     0056 02rr                      1-  704     	CLRR	_powerFlag
     0057                           1-  705     _00158_DS_:
                                    1-  706     	.line	139, "main.c"; 	}
                                    1-  707     	RETURN	
     0057 0010                      3-   40 m1      ret
                                    1-  708     ; exit point of _workCtr
                                    1-  711     ;	code size estimation:
                                    1-  712     ;	  266+    0 =   266 instructions (  532 byte)
                                    1-  714     	end

SYMBOL TABLE            TYPE     VALUE
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800503
C                       Constant 00000000
DC                      Constant 00000001
ENABLE_RAM_BANK         Constant 00000000
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
STATUS                  Constant 00000003
USEFGOTO                Constant 00000000
W                       Constant 00000000
Z                       Constant 00000002


SOURCE FILE TABLE
001 OBJ/main.s
002 ny8a050d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A050D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000001FF
DATA ROM     = 0x00000000 - 0x000001FF
RESERVED MEM = 0x00000200 - 0x00000210
SRAM / SFR   = 0x00000000 - 0x00000000
