
                    Nyquest Technology Co., Ltd.

NYASM 2.28

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ANSI-C Compiler
                                    1-    3     ; Version 3.7.1 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A050D,c=on
                                    1-    9     	#include "ny8a050d.inc"
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_PORTBbits
                                    1-   15     	extern	_PCONbits
                                    1-   16     	extern	_BWUCONbits
                                    1-   17     	extern	_BPLCONbits
                                    1-   18     	extern	_BPHCONbits
                                    1-   19     	extern	_INTEbits
                                    1-   20     	extern	_INTFbits
                                    1-   21     	extern	_INDF
                                    1-   22     	extern	_TMR0
                                    1-   23     	extern	_PCL
                                    1-   24     	extern	_STATUS
                                    1-   25     	extern	_FSR
                                    1-   26     	extern	_PORTB
                                    1-   27     	extern	_PCON
                                    1-   28     	extern	_BWUCON
                                    1-   29     	extern	_PCHBUF
                                    1-   30     	extern	_BPLCON
                                    1-   31     	extern	_BPHCON
                                    1-   32     	extern	_INTE
                                    1-   33     	extern	_INTF
                                    1-   34     	extern	_TBHP
                                    1-   35     	extern	_TBHD
                                    1-   36     	extern	_OSCCR
                                    1-   37     	extern	_IOSTB
                                    1-   38     	extern	_PS0CV
                                    1-   39     	extern	_BODCON
                                    1-   40     	extern	_PCON1
                                    1-   41     	extern	_T0MD
                                    1-   42     	extern	___sdcc_saved_fsr
                                    1-   43     	extern	___sdcc_saved_stk00
                                    1-   44     	extern	___sdcc_saved_stk01
                                    1-   45     	extern	__gptrget1
                                    1-   46     	extern	__gptrput1
                                    1-   47     	extern	__nyc_ny8_startup
                                    1-   48     ;--------------------------------------------------------
                                    1-   49     ; global declarations
                                    1-   50     ;--------------------------------------------------------
                                    1-   51     	extern	_gotoSleep
                                    1-   52     	extern	_setPWM
                                    1-   53     	extern	_initSys
                                    1-   54     	extern	_keyRead
                                    1-   55     	extern	_keyCon
                                    1-   56     	extern	_isr
                                    1-   57     	extern	_main
                                    1-   58     	extern	_keyTime
                                    1-   59     	extern	_pwKeyCount
                                    1-   60     	extern	_zfKeyCount
                                    1-   61     	extern	_speedKeyCount
                                    1-   62     	extern	_muchKeyCount
                                    1-   63     	extern	_workFlag
                                    1-   64     	extern	_zfFlag
                                    1-   65     	extern	_gnStep
                                    1-   66     	extern	_intCount
                                    1-   67     	extern	_IntFlag
                                    1-   68     	extern	_workStep
                                    1-   69     	extern	_zfWaitTime
                                    1-   70     	extern	_pwmCount
                                    1-   71     	extern	_pwmDuty
                                    1-   72     	extern	_sleepDealy
                                    1-   74     	extern PSAVE
                                    1-   75     	extern SSAVE
                                    1-   76     	extern WSAVE
                                    1-   77     	extern STK04
                                    1-   78     	extern STK03
                                    1-   79     	extern STK02
                                    1-   80     	extern STK01
                                    1-   81     	extern STK00
                                    1-   83     .segment "uninit", 0x20000010
 20000010                           1-   84     PSAVE:
                                    1-   85     	.res 1
 20000011                           1-   86     SSAVE:
                                    1-   87     	.res 1
 20000012                           1-   88     WSAVE:
                                    1-   89     	.res 1
 20000013                           1-   90     STK04:
                                    1-   91     	.res 1
 20000014                           1-   92     STK03:
                                    1-   93     	.res 1
 20000015                           1-   94     STK02:
                                    1-   95     	.res 1
 20000016                           1-   96     STK01:
                                    1-   97     	.res 1
 20000017                           1-   98     STK00:
                                    1-   99     	.res 1
                                    1-  101     ;--------------------------------------------------------
                                    1-  102     ; global definitions
                                    1-  103     ;--------------------------------------------------------
                                    1-  104     ;--------------------------------------------------------
                                    1-  105     ; absolute symbol definitions
                                    1-  106     ;--------------------------------------------------------
                                    1-  107     ;--------------------------------------------------------
                                    1-  108     ; compiler-defined variables
                                    1-  109     ;--------------------------------------------------------
                                    1-  110     .segment "uninit"
     0000                           1-  111     r0x1016:
                                    1-  112     	.res	1
                                    1-  113     .segment "uninit"
     0000                           1-  114     r0x1017:
                                    1-  115     	.res	1
                                    1-  116     .segment "uninit"
     0000                           1-  117     r0x1012:
                                    1-  118     	.res	1
                                    1-  119     .segment "uninit"
     0000                           1-  120     r0x1015:
                                    1-  121     	.res	1
                                    1-  122     .segment "uninit"
     0000                           1-  123     r0x1014:
                                    1-  124     	.res	1
                                    1-  125     .segment "uninit"
     0000                           1-  126     r0x1013:
                                    1-  127     	.res	1
                                    1-  128     ;--------------------------------------------------------
                                    1-  129     ; initialized data
                                    1-  130     ;--------------------------------------------------------
                                    1-  132     .segment "idata"
     0000                           1-  133     _keyTime:
     0000 0000                      1-  134     	dw	0x00
                                    1-  138     .segment "idata"
     0000                           1-  139     _pwKeyCount:
     0000 0000                      1-  140     	dw	0x00
                                    1-  144     .segment "idata"
     0000                           1-  145     _zfKeyCount:
     0000 0000                      1-  146     	dw	0x00
                                    1-  150     .segment "idata"
     0000                           1-  151     _speedKeyCount:
     0000 0000                      1-  152     	dw	0x00
                                    1-  156     .segment "idata"
     0000                           1-  157     _muchKeyCount:
     0000 0000                      1-  158     	dw	0x00
                                    1-  162     .segment "idata"
     0000                           1-  163     _workFlag:
     0000 0000                      1-  164     	dw	0x00
                                    1-  168     .segment "idata"
     0000                           1-  169     _zfFlag:
     0000 0000                      1-  170     	dw	0x00
                                    1-  174     .segment "idata"
     0000                           1-  175     _gnStep:
     0000 0000                      1-  176     	dw	0x00
                                    1-  180     .segment "idata"
     0000                           1-  181     _intCount:
     0000 0000                      1-  182     	dw	0x00
                                    1-  186     .segment "idata"
     0000                           1-  187     _IntFlag:
     0000 0000                      1-  188     	dw	0x00
                                    1-  192     .segment "idata"
     0000                           1-  193     _workStep:
     0000 0000                      1-  194     	dw	0x00
                                    1-  198     .segment "idata"
     0000                           1-  199     _zfWaitTime:
     0000 0000                      1-  200     	dw	0x00
                                    1-  204     .segment "idata"
     0000                           1-  205     _pwmCount:
     0000 0000                      1-  206     	dw	0x00
                                    1-  210     .segment "idata"
     0000                           1-  211     _pwmDuty:
     0000 0000                      1-  212     	dw	0x00
                                    1-  216     .segment "idata"
     0000                           1-  217     _sleepDealy:
     0000 0000                      1-  218     	dw	0x00
                                    1-  221     ;--------------------------------------------------------
                                    1-  222     ; overlayable items in internal ram 
                                    1-  223     ;--------------------------------------------------------
                                    1-  224     ;	udata_ovr
                                    1-  225     ;--------------------------------------------------------
                                    1-  226     ; reset vector 
                                    1-  227     ;--------------------------------------------------------
                                    1-  228     ORG	0x0000
     0000 3rrr                      1-  229     	LGOTO	__nyc_ny8_startup
                                    1-  230     ;--------------------------------------------------------
                                    1-  231     ; interrupt and initialization code
                                    1-  232     ;--------------------------------------------------------
                                    1-  233     ORG 0x0008
                                    1-  234     	MGOTO	__sdcc_interrupt
     0008 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  236     .segment "code"
     0000                           1-  237     __sdcc_interrupt:
                                    1-  238     ;***
                                    1-  239     ;  pBlock Stats: dbName = I
                                    1-  240     ;***
                                    1-  241     ;2 compiler assigned registers:
                                    1-  242     ;   STK00
                                    1-  243     ;   STK01
                                    1-  244     ;; Starting pCode block
     0000                           1-  245     _isr:
                                    1-  246     ; 0 exit points
                                    1-  247     	.line	34, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  248     	MOVAR	WSAVE
     0001 1503                      1-  249     	SWAPR	STATUS,W
     0002 0283                      1-  250     	CLRR	STATUS
     0003 00rr                      1-  251     	MOVAR	SSAVE
     0004 010A                      1-  252     	MOVR	PCHBUF,W
     0005 028A                      1-  253     	CLRR	PCHBUF
     0006 00rr                      1-  254     	MOVAR	PSAVE
     0007 0104                      1-  255     	MOVR	FSR,W
     0008 00rr                      1-  256     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  257     	MOVR	STK00,W
     000A 00rr                      1-  258     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  259     	MOVR	STK01,W
     000C 00rr                      1-  260     	MOVAR	___sdcc_saved_stk01
                                    1-  261     	.line	36, "main.c"; 	if(INTFbits.T0IF)
     000D 08rr                      1-  262     	BTRSS	_INTFbits,0
                                    1-  263     	MGOTO	_00110_DS_
     000E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  264     	.line	38, "main.c"; 	TMR0 += 55;
     000F 2137                      1-  265     	MOVIA	0x37
     0010 03rr                      1-  266     	ADDAR	_TMR0,F
                                    1-  267     	.line	39, "main.c"; 	intCount++;
     0011 05rr                      1-  268     	INCR	_intCount,F
                                    1-  269     	.line	40, "main.c"; 	if(intCount == 100)
     0012 01rr                      1-  270     	MOVR	_intCount,W
     0013 2464                      1-  271     	XORIA	0x64
     0014 0903                      1-  272     	BTRSS	STATUS,2
                                    1-  273     	MGOTO	_00110_DS_
     0015 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  274     	.line	42, "main.c"; 	intCount = 0;
     0016 02rr                      1-  275     	CLRR	_intCount
                                    1-  276     	.line	43, "main.c"; 	IntFlag = 1;
     0017 2101                      1-  277     	MOVIA	0x01
     0018 00rr                      1-  278     	MOVAR	_IntFlag
                                    1-  279     	.line	44, "main.c"; 	if(++keyTime > 20)
     0019 05rr                      1-  280     	INCR	_keyTime,F
                                    1-  281     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  282     ;;unsigned compare: left >= lit (0x15=21), size=1
     001A 2115                      1-  283     	MOVIA	0x15
     001B 04rr                      1-  284     	SUBAR	_keyTime,W
     001C 0C03                      1-  285     	BTRSC	STATUS,0
                                    1-  286     	.line	45, "main.c"; 	keyTime = 0;
     001D 02rr                      1-  287     	CLRR	_keyTime
     001E                           1-  288     _00110_DS_:
                                    1-  289     	.line	49, "main.c"; 	if(INTFbits.PBIF)
     001E 08rr                      1-  290     	BTRSS	_INTFbits,1
                                    1-  291     	MGOTO	_00112_DS_
     001F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  292     	.line	51, "main.c"; 	INTF= (unsigned char)~(C_INT_PBKey);	// Clear PABIF(PortB input change interrupt flag bit)		
     0020 21FD                      1-  293     	MOVIA	0xfd
     0021 00rr                      1-  294     	MOVAR	_INTF
     0022                           1-  295     _00112_DS_:
                                    1-  296     	.line	54, "main.c"; 	INTF = 0;
     0022 02rr                      1-  297     	CLRR	_INTF
                                    1-  298     	.line	56, "main.c"; 	}
     0023 01rr                      1-  299     	MOVR	___sdcc_saved_stk01,W
     0024 00rr                      1-  300     	MOVAR	STK01
     0025 01rr                      1-  301     	MOVR	___sdcc_saved_stk00,W
     0026 00rr                      1-  302     	MOVAR	STK00
     0027 01rr                      1-  303     	MOVR	___sdcc_saved_fsr,W
     0028 0084                      1-  304     	MOVAR	FSR
     0029 01rr                      1-  305     	MOVR	PSAVE,W
     002A 008A                      1-  306     	MOVAR	PCHBUF
     002B 0283                      1-  307     	CLRR	STATUS
     002C 15rr                      1-  308     	SWAPR	SSAVE,W
     002D 0083                      1-  309     	MOVAR	STATUS
     002E 15rr                      1-  310     	SWAPR	WSAVE,F
     002F 15rr                      1-  311     	SWAPR	WSAVE,W
     0030                           1-  312     END_OF_INTERRUPT:
     0030 0011                      1-  313     	RETIE	
                                    1-  315     ;--------------------------------------------------------
                                    1-  316     ; code
                                    1-  317     ;--------------------------------------------------------
                                    1-  318     ;***
                                    1-  319     ;  pBlock Stats: dbName = M
                                    1-  320     ;***
                                    1-  321     ;has an exit
                                    1-  322     ;functions called:
                                    1-  323     ;   _initSys
                                    1-  324     ;   _setPWM
                                    1-  325     ;   _keyCon
                                    1-  326     ;   _initSys
                                    1-  327     ;   _setPWM
                                    1-  328     ;   _keyCon
                                    1-  329     ;; Starting pCode block
                                    1-  330     .segment "code"; module=main, function=_main
     0000                           1-  332     _main:
                                    1-  333     ; 2 exit points
                                    1-  334     	.line	61, "main.c"; 	initSys();
                                    1-  335     	MCALL	_initSys
     0000 2rrr                      3-   66 m1      LCALL rom_address
     0001                           1-  336     _00127_DS_:
                                    1-  337     	.line	64, "main.c"; 	CLRWDT();
     0001 0002                      1-  338     	clrwdt
                                    1-  339     	.line	65, "main.c"; 	if(zfWaitTime == 0 && workFlag == 1)
     0002 01rr                      1-  340     	MOVR	_zfWaitTime,W
     0003 0903                      1-  341     	BTRSS	STATUS,2
                                    1-  342     	MGOTO	_00118_DS_
     0004 3rrr                      3-   63 m1      LGOTO rom_address
     0005 01rr                      1-  343     	MOVR	_workFlag,W
     0006 2401                      1-  344     	XORIA	0x01
     0007 0D03                      1-  345     	BTRSC	STATUS,2
                                    1-  346     	.line	66, "main.c"; 	setPWM();
                                    1-  347     	MCALL	_setPWM
     0008 2rrr                      3-   66 m1      LCALL rom_address
     0009                           1-  348     _00118_DS_:
                                    1-  349     	.line	67, "main.c"; 	if(!IntFlag)
     0009 01rr                      1-  350     	MOVR	_IntFlag,W
     000A 0D03                      1-  351     	BTRSC	STATUS,2
                                    1-  352     	MGOTO	_00127_DS_
     000B 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  353     	.line	69, "main.c"; 	IntFlag = 0;
     000C 02rr                      1-  354     	CLRR	_IntFlag
                                    1-  355     	.line	70, "main.c"; 	keyCon();
                                    1-  356     	MCALL	_keyCon
     000D 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  357     	.line	75, "main.c"; 	if(zfWaitTime > 0)
     000E 01rr                      1-  358     	MOVR	_zfWaitTime,W
     000F 0D03                      1-  359     	BTRSC	STATUS,2
                                    1-  360     	MGOTO	_00123_DS_
     0010 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  361     	.line	77, "main.c"; 	zfWaitTime--;
     0011 06rr                      1-  362     	DECR	_zfWaitTime,F
                                    1-  363     	.line	78, "main.c"; 	PORTB &= 0xF9;	//停止输出
     0012 21F9                      1-  364     	MOVIA	0xf9
     0013 10rr                      1-  365     	ANDAR	_PORTB,F
     0014                           1-  366     _00123_DS_:
                                    1-  367     	.line	80, "main.c"; 	if(workFlag == 0)
     0014 01rr                      1-  368     	MOVR	_workFlag,W
     0015 0903                      1-  369     	BTRSS	STATUS,2
                                    1-  370     	MGOTO	_00127_DS_
     0016 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  371     	.line	82, "main.c"; 	PORTB &= 0xF9;	//停止输出
     0017 21F9                      1-  372     	MOVIA	0xf9
     0018 10rr                      1-  373     	ANDAR	_PORTB,F
                                    1-  374     	.line	83, "main.c"; 	workStep = 0;
     0019 02rr                      1-  375     	CLRR	_workStep
                                    1-  376     	.line	84, "main.c"; 	gnStep = 0;
     001A 02rr                      1-  377     	CLRR	_gnStep
                                    1-  378     	.line	85, "main.c"; 	workFlag = 0;
     001B 02rr                      1-  379     	CLRR	_workFlag
                                    1-  380     	.line	86, "main.c"; 	zfFlag = 0;
     001C 02rr                      1-  381     	CLRR	_zfFlag
                                    1-  382     	.line	87, "main.c"; 	pwmDuty = 0;
     001D 02rr                      1-  383     	CLRR	_pwmDuty
                                    1-  384     	.line	88, "main.c"; 	LEDOFF();		//灭灯
     001E 1Crr                      1-  385     	BCR	_PORTB,0
                                    1-  386     	MGOTO	_00127_DS_
     001F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  387     	.line	92, "main.c"; 	}
                                    1-  388     	RETURN	
     0020 0010                      3-   40 m1      ret
                                    1-  389     ; exit point of _main
                                    1-  391     ;***
                                    1-  392     ;  pBlock Stats: dbName = C
                                    1-  393     ;***
                                    1-  394     ;has an exit
                                    1-  395     ;; Starting pCode block
                                    1-  396     .segment "code"; module=main, function=_gotoSleep
     0000                           1-  398     _gotoSleep:
                                    1-  399     ; 2 exit points
                                    1-  400     	.line	286, "main.c"; 	IOSTB =  C_PB3_Input | C_PB4_Input | C_PB5_Input;	
     0000 2138                      1-  401     	MOVIA	0x38
     0001 000r                      1-  402     	IOST	_IOSTB
                                    1-  403     	.line	287, "main.c"; 	BPHCON &= 0xDF;
     0002 1Err                      1-  404     	BCR	_BPHCON,5
                                    1-  405     	.line	288, "main.c"; 	sleepDealy = 0;
     0003 02rr                      1-  406     	CLRR	_sleepDealy
                                    1-  407     	.line	289, "main.c"; 	PORTB &= 0xF9;	//停止输出
     0004 21F9                      1-  408     	MOVIA	0xf9
     0005 10rr                      1-  409     	ANDAR	_PORTB,F
                                    1-  410     	.line	290, "main.c"; 	workStep = 0;
     0006 02rr                      1-  411     	CLRR	_workStep
                                    1-  412     	.line	291, "main.c"; 	gnStep = 0;
     0007 02rr                      1-  413     	CLRR	_gnStep
                                    1-  414     	.line	292, "main.c"; 	workFlag = 0;
     0008 02rr                      1-  415     	CLRR	_workFlag
                                    1-  416     	.line	293, "main.c"; 	zfFlag = 0;
     0009 02rr                      1-  417     	CLRR	_zfFlag
                                    1-  418     	.line	294, "main.c"; 	pwmDuty = 0;
     000A 02rr                      1-  419     	CLRR	_pwmDuty
                                    1-  420     	.line	295, "main.c"; 	LEDOFF();		//灭灯
     000B 1Crr                      1-  421     	BCR	_PORTB,0
                                    1-  422     	.line	296, "main.c"; 	BWUCON = 0x38;
     000C 2138                      1-  423     	MOVIA	0x38
     000D 00rr                      1-  424     	MOVAR	_BWUCON
                                    1-  425     	.line	297, "main.c"; 	INTE =  C_INT_TMR0 | C_INT_PBKey;
     000E 2103                      1-  426     	MOVIA	0x03
     000F 00rr                      1-  427     	MOVAR	_INTE
                                    1-  428     	.line	298, "main.c"; 	PCON =  C_LVR_En;	
     0010 2108                      1-  429     	MOVIA	0x08
     0011 00rr                      1-  430     	MOVAR	_PCON
                                    1-  431     	.line	299, "main.c"; 	INTF = 0;								// Clear all interrupt flags
     0012 02rr                      1-  432     	CLRR	_INTF
                                    1-  433     	.line	300, "main.c"; 	CLRWDT();
     0013 0002                      1-  434     	clrwdt
                                    1-  435     	.line	301, "main.c"; 	SLEEP();
     0014 0001                      1-  436     	sleep
                                    1-  437     	.line	302, "main.c"; 	BWUCON = 0x00;
     0015 02rr                      1-  438     	CLRR	_BWUCON
                                    1-  439     	.line	303, "main.c"; 	INTE =  C_INT_TMR0;	// Enable Timer0、Timer1、WDT overflow interrupt
     0016 2101                      1-  440     	MOVIA	0x01
     0017 00rr                      1-  441     	MOVAR	_INTE
                                    1-  442     	.line	304, "main.c"; 	INTF = 0;
     0018 02rr                      1-  443     	CLRR	_INTF
                                    1-  444     	.line	306, "main.c"; 	PCON = C_WDT_En | C_LVR_En ;				// Enable WDT ,  Enable LVR
     0019 2188                      1-  445     	MOVIA	0x88
     001A 00rr                      1-  446     	MOVAR	_PCON
                                    1-  447     	.line	307, "main.c"; 	}
                                    1-  448     	RETURN	
     001B 0010                      3-   40 m1      ret
                                    1-  449     ; exit point of _gotoSleep
                                    1-  451     ;***
                                    1-  452     ;  pBlock Stats: dbName = C
                                    1-  453     ;***
                                    1-  454     ;; Starting pCode block
                                    1-  455     .segment "code"; module=main, function=_setPWM
     0000                           1-  457     _setPWM:
                                    1-  458     ; 0 exit points
                                    1-  459     	.line	257, "main.c"; 	sleepDealy = 0;
     0000 02rr                      1-  460     	CLRR	_sleepDealy
                                    1-  461     	.line	258, "main.c"; 	if(pwmDuty >= pwmCount)
     0001 01rr                      1-  462     	MOVR	_pwmCount,W
     0002 04rr                      1-  463     	SUBAR	_pwmDuty,W
     0003 0803                      1-  464     	BTRSS	STATUS,0
                                    1-  465     	MGOTO	_00202_DS_
     0004 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  466     	.line	260, "main.c"; 	if(zfFlag)
     0005 01rr                      1-  467     	MOVR	_zfFlag,W
     0006 0D03                      1-  468     	BTRSC	STATUS,2
                                    1-  469     	MGOTO	_00199_DS_
     0007 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  470     	.line	263, "main.c"; 	PORTB |= 0x04;
     0008 19rr                      1-  471     	BSR	_PORTB,2
                                    1-  472     	.line	264, "main.c"; 	PORTB &= 0xFD;
     0009 1Crr                      1-  473     	BCR	_PORTB,1
                                    1-  474     	MGOTO	_00203_DS_
     000A 3rrr                      3-   63 m1      LGOTO rom_address
     000B                           1-  475     _00199_DS_:
                                    1-  476     	.line	269, "main.c"; 	PORTB |= 0x02;
     000B 18rr                      1-  477     	BSR	_PORTB,1
                                    1-  478     	.line	270, "main.c"; 	PORTB &= 0xFB;
     000C 1Drr                      1-  479     	BCR	_PORTB,2
                                    1-  480     	MGOTO	_00203_DS_
     000D 3rrr                      3-   63 m1      LGOTO rom_address
     000E                           1-  481     _00202_DS_:
                                    1-  482     	.line	276, "main.c"; 	PORTB &= 0xF9;
     000E 21F9                      1-  483     	MOVIA	0xf9
     000F 10rr                      1-  484     	ANDAR	_PORTB,F
     0010                           1-  485     _00203_DS_:
                                    1-  486     	.line	279, "main.c"; 	if(++pwmCount > 10)
     0010 05rr                      1-  487     	INCR	_pwmCount,F
                                    1-  488     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  489     ;;unsigned compare: left >= lit (0xB=11), size=1
     0011 210B                      1-  490     	MOVIA	0x0b
     0012 04rr                      1-  491     	SUBAR	_pwmCount,W
     0013 0C03                      1-  492     	BTRSC	STATUS,0
                                    1-  493     	.line	280, "main.c"; 	pwmCount = 0;
     0014 02rr                      1-  494     	CLRR	_pwmCount
                                    1-  495     	.line	281, "main.c"; 	}
                                    1-  496     	RETURN	
     0015 0010                      3-   40 m1      ret
                                    1-  498     ;***
                                    1-  499     ;  pBlock Stats: dbName = C
                                    1-  500     ;***
                                    1-  501     ;has an exit
                                    1-  502     ;; Starting pCode block
                                    1-  503     .segment "code"; module=main, function=_initSys
     0000                           1-  505     _initSys:
                                    1-  506     ; 2 exit points
                                    1-  507     	.line	236, "main.c"; 	PORTB = 0x28;
     0000 2128                      1-  508     	MOVIA	0x28
     0001 00rr                      1-  509     	MOVAR	_PORTB
                                    1-  510     	.line	237, "main.c"; 	BPHCON = 0xC7;		//PB3 上拉
     0002 21C7                      1-  511     	MOVIA	0xc7
     0003 00rr                      1-  512     	MOVAR	_BPHCON
                                    1-  513     	.line	240, "main.c"; 	IOSTB =  C_PB3_Input | C_PB4_Input | C_PB5_Input;	
     0004 2138                      1-  514     	MOVIA	0x38
     0005 000r                      1-  515     	IOST	_IOSTB
                                    1-  516     	.line	241, "main.c"; 	PORTB = 0x38;                        	// PortB Data Register = 0x00
     0006 00rr                      1-  517     	MOVAR	_PORTB
                                    1-  518     	.line	242, "main.c"; 	PCON = C_WDT_En | C_LVR_En;				// Enable WDT & LVR
     0007 2188                      1-  519     	MOVIA	0x88
     0008 00rr                      1-  520     	MOVAR	_PCON
                                    1-  521     	.line	244, "main.c"; 	PCON1 = C_TMR0_Dis;
     0009 0200                      1-  522     	CLRA	
     000A 000r                      1-  523     	IOST	_PCON1
                                    1-  524     	.line	246, "main.c"; 	TMR0 = 55;
     000B 2137                      1-  525     	MOVIA	0x37
     000C 00rr                      1-  526     	MOVAR	_TMR0
                                    1-  527     	.line	247, "main.c"; 	T0MD =  C_PS0_TMR0 | C_PS0_Div2;
     000D 0200                      1-  528     	CLRA	
     000E 0003                      1-  529     	T0MD	
                                    1-  530     	.line	249, "main.c"; 	PCON1 = C_TMR0_En;
     000F 2101                      1-  531     	MOVIA	0x01
     0010 000r                      1-  532     	IOST	_PCON1
                                    1-  533     	.line	250, "main.c"; 	INTE =  C_INT_TMR0 ;
     0011 00rr                      1-  534     	MOVAR	_INTE
                                    1-  535     	.line	251, "main.c"; 	ENI();	
     0012 0004                      1-  536     	ENI
                                    1-  537     	.line	252, "main.c"; 	}
                                    1-  538     	RETURN	
     0013 0010                      3-   40 m1      ret
                                    1-  539     ; exit point of _initSys
                                    1-  541     ;***
                                    1-  542     ;  pBlock Stats: dbName = C
                                    1-  543     ;***
                                    1-  544     ;has an exit
                                    1-  545     ;functions called:
                                    1-  546     ;   __gptrget1
                                    1-  547     ;   __gptrput1
                                    1-  548     ;   __gptrput1
                                    1-  549     ;   __gptrget1
                                    1-  550     ;   __gptrput1
                                    1-  551     ;   __gptrput1
                                    1-  552     ;   __gptrget1
                                    1-  553     ;   __gptrput1
                                    1-  554     ;   __gptrput1
                                    1-  555     ;   __gptrget1
                                    1-  556     ;   __gptrput1
                                    1-  557     ;   __gptrput1
                                    1-  558     ;7 compiler assigned registers:
                                    1-  559     ;   r0x1012
                                    1-  560     ;   STK00
                                    1-  561     ;   r0x1013
                                    1-  562     ;   STK01
                                    1-  563     ;   r0x1014
                                    1-  564     ;   STK02
                                    1-  565     ;   r0x1015
                                    1-  566     ;; Starting pCode block
                                    1-  567     .segment "code"; module=main, function=_keyRead
                                    1-  569     ;local variable name mapping:
     0000                           1-  574     _keyRead:
                                    1-  575     ; 2 exit points
                                    1-  576     	.line	210, "main.c"; 	char keyRead(char keyStatus,char *keyCount)	
     0000 00rr                      1-  577     	MOVAR	r0x1012
     0001 01rr                      1-  578     	MOVR	STK00,W
     0002 00rr                      1-  579     	MOVAR	r0x1013
     0003 01rr                      1-  580     	MOVR	STK01,W
     0004 00rr                      1-  581     	MOVAR	r0x1014
     0005 01rr                      1-  582     	MOVR	STK02,W
     0006 00rr                      1-  583     	MOVAR	r0x1015
                                    1-  584     	.line	212, "main.c"; 	if(keyStatus)
     0007 01rr                      1-  585     	MOVR	r0x1012,W
     0008 0D03                      1-  586     	BTRSC	STATUS,2
                                    1-  587     	MGOTO	_00187_DS_
     0009 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  588     	.line	214, "main.c"; 	(*keyCount)++;
     000A 01rr                      1-  589     	MOVR	r0x1015,W
     000B 00rr                      1-  590     	MOVAR	STK01
     000C 01rr                      1-  591     	MOVR	r0x1014,W
     000D 00rr                      1-  592     	MOVAR	STK00
     000E 01rr                      1-  593     	MOVR	r0x1013,W
                                    1-  594     	MCALL	__gptrget1
     000F 2rrr                      3-   66 m1      LCALL rom_address
     0010 00rr                      1-  595     	MOVAR	r0x1012
     0011 05rr                      1-  596     	INCR	r0x1012,F
     0012 01rr                      1-  597     	MOVR	r0x1012,W
     0013 00rr                      1-  598     	MOVAR	STK02
     0014 01rr                      1-  599     	MOVR	r0x1015,W
     0015 00rr                      1-  600     	MOVAR	STK01
     0016 01rr                      1-  601     	MOVR	r0x1014,W
     0017 00rr                      1-  602     	MOVAR	STK00
     0018 01rr                      1-  603     	MOVR	r0x1013,W
                                    1-  604     	MCALL	__gptrput1
     0019 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  605     ;;unsigned compare: left < lit (0x64=100), size=1
                                    1-  606     	.line	215, "main.c"; 	if((*keyCount) >= 100)
     001A 2164                      1-  607     	MOVIA	0x64
     001B 04rr                      1-  608     	SUBAR	r0x1012,W
     001C 0803                      1-  609     	BTRSS	STATUS,0
                                    1-  610     	MGOTO	_00188_DS_
     001D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  611     	.line	217, "main.c"; 	(*keyCount) = 100;
     001E 2164                      1-  612     	MOVIA	0x64
     001F 00rr                      1-  613     	MOVAR	STK02
     0020 01rr                      1-  614     	MOVR	r0x1015,W
     0021 00rr                      1-  615     	MOVAR	STK01
     0022 01rr                      1-  616     	MOVR	r0x1014,W
     0023 00rr                      1-  617     	MOVAR	STK00
     0024 01rr                      1-  618     	MOVR	r0x1013,W
                                    1-  619     	MCALL	__gptrput1
     0025 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  620     	MGOTO	_00188_DS_
     0026 3rrr                      3-   63 m1      LGOTO rom_address
     0027                           1-  621     _00187_DS_:
                                    1-  622     	.line	222, "main.c"; 	if((*keyCount) >= 4)
     0027 01rr                      1-  623     	MOVR	r0x1015,W
     0028 00rr                      1-  624     	MOVAR	STK01
     0029 01rr                      1-  625     	MOVR	r0x1014,W
     002A 00rr                      1-  626     	MOVAR	STK00
     002B 01rr                      1-  627     	MOVR	r0x1013,W
                                    1-  628     	MCALL	__gptrget1
     002C 2rrr                      3-   66 m1      LCALL rom_address
     002D 00rr                      1-  629     	MOVAR	r0x1012
                                    1-  630     ;;unsigned compare: left < lit (0x4=4), size=1
     002E 2104                      1-  631     	MOVIA	0x04
     002F 04rr                      1-  632     	SUBAR	r0x1012,W
     0030 0803                      1-  633     	BTRSS	STATUS,0
                                    1-  634     	MGOTO	_00185_DS_
     0031 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  635     	.line	224, "main.c"; 	(*keyCount) = 0;
     0032 2100                      1-  636     	MOVIA	0x00
     0033 00rr                      1-  637     	MOVAR	STK02
     0034 01rr                      1-  638     	MOVR	r0x1015,W
     0035 00rr                      1-  639     	MOVAR	STK01
     0036 01rr                      1-  640     	MOVR	r0x1014,W
     0037 00rr                      1-  641     	MOVAR	STK00
     0038 01rr                      1-  642     	MOVR	r0x1013,W
                                    1-  643     	MCALL	__gptrput1
     0039 2rrr                      3-   66 m1      LCALL rom_address
                                    1-  644     	.line	225, "main.c"; 	return	1;
     003A 2101                      1-  645     	MOVIA	0x01
                                    1-  646     	MGOTO	_00189_DS_
     003B 3rrr                      3-   63 m1      LGOTO rom_address
     003C                           1-  647     _00185_DS_:
                                    1-  648     	.line	227, "main.c"; 	(*keyCount) = 0;
     003C 2100                      1-  649     	MOVIA	0x00
     003D 00rr                      1-  650     	MOVAR	STK02
     003E 01rr                      1-  651     	MOVR	r0x1015,W
     003F 00rr                      1-  652     	MOVAR	STK01
     0040 01rr                      1-  653     	MOVR	r0x1014,W
     0041 00rr                      1-  654     	MOVAR	STK00
     0042 01rr                      1-  655     	MOVR	r0x1013,W
                                    1-  656     	MCALL	__gptrput1
     0043 2rrr                      3-   66 m1      LCALL rom_address
     0044                           1-  657     _00188_DS_:
                                    1-  658     	.line	229, "main.c"; 	return 0;
     0044 2100                      1-  659     	MOVIA	0x00
     0045                           1-  660     _00189_DS_:
                                    1-  661     	.line	230, "main.c"; 	}
                                    1-  662     	RETURN	
     0045 0010                      3-   40 m1      ret
                                    1-  663     ; exit point of _keyRead
                                    1-  665     ;***
                                    1-  666     ;  pBlock Stats: dbName = C
                                    1-  667     ;***
                                    1-  668     ;has an exit
                                    1-  669     ;functions called:
                                    1-  670     ;   _keyRead
                                    1-  671     ;   _keyRead
                                    1-  672     ;   _keyRead
                                    1-  673     ;   _keyRead
                                    1-  674     ;   _keyRead
                                    1-  675     ;   _keyRead
                                    1-  676     ;   _keyRead
                                    1-  677     ;   _keyRead
                                    1-  678     ;7 compiler assigned registers:
                                    1-  679     ;   r0x1016
                                    1-  680     ;   r0x1017
                                    1-  681     ;   r0x1018
                                    1-  682     ;   r0x1019
                                    1-  683     ;   STK02
                                    1-  684     ;   STK01
                                    1-  685     ;   STK00
                                    1-  686     ;; Starting pCode block
                                    1-  687     .segment "code"; module=main, function=_keyCon
     0000                           1-  689     _keyCon:
                                    1-  690     ; 2 exit points
                                    1-  691     ;;unsigned compare: left < lit (0xA=10), size=1
                                    1-  692     	.line	98, "main.c"; 	if(keyTime < 10)
     0000 210A                      1-  693     	MOVIA	0x0a
     0001 04rr                      1-  694     	SUBAR	_keyTime,W
     0002 0C03                      1-  695     	BTRSC	STATUS,0
                                    1-  696     	MGOTO	_00175_DS_
     0003 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  697     	.line	101, "main.c"; 	BPHCON &= 0xDF;	//PB5拉高 
     0004 1Err                      1-  698     	BCR	_BPHCON,5
                                    1-  699     	.line	102, "main.c"; 	IOSTB |= 0x20;
     0005 001r                      1-  700     	IOSTR	_IOSTB
     0006 00rr                      1-  701     	MOVAR	r0x1016
     0007 1Arr                      1-  702     	BSR	r0x1016,5
     0008 01rr                      1-  703     	MOVR	r0x1016,W
     0009 000r                      1-  704     	IOST	_IOSTB
                                    1-  705     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  706     ;;unsigned compare: left >= lit (0x3=3), size=1
                                    1-  707     	.line	103, "main.c"; 	if(keyTime > 2)
     000A 2103                      1-  708     	MOVIA	0x03
     000B 04rr                      1-  709     	SUBAR	_keyTime,W
     000C 0803                      1-  710     	BTRSS	STATUS,0
                                    1-  711     	MGOTO	_00177_DS_
     000D 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  712     	.line	105, "main.c"; 	if(keyRead((0x20 & ~PORTB),&pwKeyCount))
     000E 07rr                      1-  713     	COMR	_PORTB,W
     000F 00rr                      1-  714     	MOVAR	r0x1016
     0010 2120                      1-  715     	MOVIA	0x20
     0011 10rr                      1-  716     	ANDAR	r0x1016,F
     0012 21rr                      1-  717     	MOVIA	((_pwKeyCount + 0) >> 8) & 0xff
     0013 00rr                      1-  718     	MOVAR	r0x1017
     0014 21rr                      1-  719     	MOVIA	(_pwKeyCount + 0)
                                    1-  720     ;;102	MOVAR	r0x1018
     0015 00rr                      1-  721     	MOVAR	STK02
     0016 01rr                      1-  722     	MOVR	r0x1017,W
     0017 00rr                      1-  723     	MOVAR	STK01
     0018 2100                      1-  724     	MOVIA	0x00
     0019 00rr                      1-  725     	MOVAR	STK00
     001A 01rr                      1-  726     	MOVR	r0x1016,W
                                    1-  727     	MCALL	_keyRead
     001B 2rrr                      3-   66 m1      LCALL rom_address
     001C 00rr                      1-  728     	MOVAR	r0x1016
     001D 01rr                      1-  729     	MOVR	r0x1016,W
     001E 0D03                      1-  730     	BTRSC	STATUS,2
                                    1-  731     	MGOTO	_00136_DS_
     001F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  732     	.line	108, "main.c"; 	if(workFlag)
     0020 01rr                      1-  733     	MOVR	_workFlag,W
     0021 0D03                      1-  734     	BTRSC	STATUS,2
                                    1-  735     	MGOTO	_00133_DS_
     0022 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  736     	.line	110, "main.c"; 	workFlag = 0;
     0023 02rr                      1-  737     	CLRR	_workFlag
                                    1-  738     	.line	111, "main.c"; 	workStep = 0;
     0024 02rr                      1-  739     	CLRR	_workStep
                                    1-  740     	.line	112, "main.c"; 	pwmDuty = 0;
     0025 02rr                      1-  741     	CLRR	_pwmDuty
                                    1-  742     	MGOTO	_00136_DS_
     0026 3rrr                      3-   63 m1      LGOTO rom_address
     0027                           1-  743     _00133_DS_:
                                    1-  744     	.line	116, "main.c"; 	gnStep = 0;
     0027 02rr                      1-  745     	CLRR	_gnStep
                                    1-  746     	.line	117, "main.c"; 	workFlag = 1;
     0028 2101                      1-  747     	MOVIA	0x01
     0029 00rr                      1-  748     	MOVAR	_workFlag
                                    1-  749     	.line	118, "main.c"; 	workStep = 3;
     002A 2103                      1-  750     	MOVIA	0x03
     002B 00rr                      1-  751     	MOVAR	_workStep
                                    1-  752     	.line	119, "main.c"; 	pwmDuty = 99;
     002C 2163                      1-  753     	MOVIA	0x63
     002D 00rr                      1-  754     	MOVAR	_pwmDuty
     002E                           1-  755     _00136_DS_:
                                    1-  756     	.line	122, "main.c"; 	if(workFlag)
     002E 01rr                      1-  757     	MOVR	_workFlag,W
     002F 0D03                      1-  758     	BTRSC	STATUS,2
                                    1-  759     	MGOTO	_00177_DS_
     0030 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  760     	.line	124, "main.c"; 	if(keyRead((0x10 & ~PORTB),&zfKeyCount))
     0031 07rr                      1-  761     	COMR	_PORTB,W
     0032 00rr                      1-  762     	MOVAR	r0x1016
     0033 2110                      1-  763     	MOVIA	0x10
     0034 10rr                      1-  764     	ANDAR	r0x1016,F
     0035 21rr                      1-  765     	MOVIA	((_zfKeyCount + 0) >> 8) & 0xff
     0036 00rr                      1-  766     	MOVAR	r0x1017
     0037 21rr                      1-  767     	MOVIA	(_zfKeyCount + 0)
                                    1-  768     ;;101	MOVAR	r0x1018
     0038 00rr                      1-  769     	MOVAR	STK02
     0039 01rr                      1-  770     	MOVR	r0x1017,W
     003A 00rr                      1-  771     	MOVAR	STK01
     003B 2100                      1-  772     	MOVIA	0x00
     003C 00rr                      1-  773     	MOVAR	STK00
     003D 01rr                      1-  774     	MOVR	r0x1016,W
                                    1-  775     	MCALL	_keyRead
     003E 2rrr                      3-   66 m1      LCALL rom_address
     003F 00rr                      1-  776     	MOVAR	r0x1016
     0040 01rr                      1-  777     	MOVR	r0x1016,W
     0041 0D03                      1-  778     	BTRSC	STATUS,2
                                    1-  779     	MGOTO	_00141_DS_
     0042 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  780     	.line	127, "main.c"; 	PORTB &= 0xF9;
     0043 21F9                      1-  781     	MOVIA	0xf9
     0044 10rr                      1-  782     	ANDAR	_PORTB,F
                                    1-  783     	.line	128, "main.c"; 	zfWaitTime = 40;
     0045 2128                      1-  784     	MOVIA	0x28
     0046 00rr                      1-  785     	MOVAR	_zfWaitTime
                                    1-  786     	.line	129, "main.c"; 	if(zfFlag)
     0047 01rr                      1-  787     	MOVR	_zfFlag,W
     0048 0D03                      1-  788     	BTRSC	STATUS,2
                                    1-  789     	MGOTO	_00138_DS_
     0049 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  790     	.line	130, "main.c"; 	zfFlag = 0;
     004A 02rr                      1-  791     	CLRR	_zfFlag
                                    1-  792     	MGOTO	_00141_DS_
     004B 3rrr                      3-   63 m1      LGOTO rom_address
     004C                           1-  793     _00138_DS_:
                                    1-  794     	.line	132, "main.c"; 	zfFlag = 1;
     004C 2101                      1-  795     	MOVIA	0x01
     004D 00rr                      1-  796     	MOVAR	_zfFlag
     004E                           1-  797     _00141_DS_:
                                    1-  798     	.line	136, "main.c"; 	if(keyRead((0x08 & ~PORTB),&speedKeyCount))
     004E 07rr                      1-  799     	COMR	_PORTB,W
     004F 00rr                      1-  800     	MOVAR	r0x1016
     0050 2108                      1-  801     	MOVIA	0x08
     0051 10rr                      1-  802     	ANDAR	r0x1016,F
     0052 21rr                      1-  803     	MOVIA	((_speedKeyCount + 0) >> 8) & 0xff
     0053 00rr                      1-  804     	MOVAR	r0x1017
     0054 21rr                      1-  805     	MOVIA	(_speedKeyCount + 0)
                                    1-  806     ;;2	MOVAR	r0x1018
     0055 00rr                      1-  807     	MOVAR	STK02
     0056 01rr                      1-  808     	MOVR	r0x1017,W
     0057 00rr                      1-  809     	MOVAR	STK01
     0058 2100                      1-  810     	MOVIA	0x00
     0059 00rr                      1-  811     	MOVAR	STK00
     005A 01rr                      1-  812     	MOVR	r0x1016,W
                                    1-  813     	MCALL	_keyRead
     005B 2rrr                      3-   66 m1      LCALL rom_address
     005C 00rr                      1-  814     	MOVAR	r0x1016
     005D 01rr                      1-  815     	MOVR	r0x1016,W
     005E 0D03                      1-  816     	BTRSC	STATUS,2
                                    1-  817     	MGOTO	_00177_DS_
     005F 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  818     	.line	139, "main.c"; 	if(++workStep > 3)
     0060 05rr                      1-  819     	INCR	_workStep,F
                                    1-  820     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  821     ;;unsigned compare: left >= lit (0x4=4), size=1
     0061 2104                      1-  822     	MOVIA	0x04
     0062 04rr                      1-  823     	SUBAR	_workStep,W
     0063 0803                      1-  824     	BTRSS	STATUS,0
                                    1-  825     	MGOTO	_00143_DS_
     0064 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  826     	.line	140, "main.c"; 	workStep = 1;
     0065 2101                      1-  827     	MOVIA	0x01
     0066 00rr                      1-  828     	MOVAR	_workStep
     0067                           1-  829     _00143_DS_:
                                    1-  830     	.line	141, "main.c"; 	if(workStep == 1)
     0067 01rr                      1-  831     	MOVR	_workStep,W
     0068 2401                      1-  832     	XORIA	0x01
     0069 0903                      1-  833     	BTRSS	STATUS,2
                                    1-  834     	MGOTO	_00150_DS_
     006A 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  835     	.line	143, "main.c"; 	pwmDuty = 8;
     006B 2108                      1-  836     	MOVIA	0x08
     006C 00rr                      1-  837     	MOVAR	_pwmDuty
                                    1-  838     	MGOTO	_00177_DS_
     006D 3rrr                      3-   63 m1      LGOTO rom_address
     006E                           1-  839     _00150_DS_:
                                    1-  840     	.line	145, "main.c"; 	else if(workStep == 2)
     006E 01rr                      1-  841     	MOVR	_workStep,W
     006F 2402                      1-  842     	XORIA	0x02
     0070 0903                      1-  843     	BTRSS	STATUS,2
                                    1-  844     	MGOTO	_00147_DS_
     0071 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  845     	.line	147, "main.c"; 	pwmDuty = 9;
     0072 2109                      1-  846     	MOVIA	0x09
     0073 00rr                      1-  847     	MOVAR	_pwmDuty
                                    1-  848     	MGOTO	_00177_DS_
     0074 3rrr                      3-   63 m1      LGOTO rom_address
     0075                           1-  849     _00147_DS_:
                                    1-  850     	.line	149, "main.c"; 	else if(workStep == 3)
     0075 01rr                      1-  851     	MOVR	_workStep,W
     0076 2403                      1-  852     	XORIA	0x03
     0077 0903                      1-  853     	BTRSS	STATUS,2
                                    1-  854     	MGOTO	_00177_DS_
     0078 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  855     	.line	151, "main.c"; 	pwmDuty = 10;
     0079 210A                      1-  856     	MOVIA	0x0a
     007A 00rr                      1-  857     	MOVAR	_pwmDuty
                                    1-  858     	MGOTO	_00177_DS_
     007B 3rrr                      3-   63 m1      LGOTO rom_address
     007C                           1-  859     _00175_DS_:
                                    1-  860     	.line	160, "main.c"; 	BPHCON |= 0x20;
     007C 1Arr                      1-  861     	BSR	_BPHCON,5
                                    1-  862     	.line	161, "main.c"; 	IOSTB &= 0xDF;
     007D 001r                      1-  863     	IOSTR	_IOSTB
     007E 00rr                      1-  864     	MOVAR	r0x1016
     007F 1Err                      1-  865     	BCR	r0x1016,5
     0080 01rr                      1-  866     	MOVR	r0x1016,W
     0081 000r                      1-  867     	IOST	_IOSTB
                                    1-  868     	.line	162, "main.c"; 	PORTB &= 0xDF;
     0082 1Err                      1-  869     	BCR	_PORTB,5
                                    1-  870     	.line	163, "main.c"; 	zfKeyCount = 0;
     0083 02rr                      1-  871     	CLRR	_zfKeyCount
                                    1-  872     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  873     ;;unsigned compare: left >= lit (0xD=13), size=1
                                    1-  874     	.line	164, "main.c"; 	if(keyTime > 12)
     0084 210D                      1-  875     	MOVIA	0x0d
     0085 04rr                      1-  876     	SUBAR	_keyTime,W
     0086 0803                      1-  877     	BTRSS	STATUS,0
                                    1-  878     	MGOTO	_00177_DS_
     0087 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  879     	.line	166, "main.c"; 	if(keyRead((0x10 & ~PORTB),&muchKeyCount))
     0088 07rr                      1-  880     	COMR	_PORTB,W
     0089 00rr                      1-  881     	MOVAR	r0x1016
     008A 2110                      1-  882     	MOVIA	0x10
     008B 10rr                      1-  883     	ANDAR	r0x1016,F
     008C 21rr                      1-  884     	MOVIA	((_muchKeyCount + 0) >> 8) & 0xff
     008D 00rr                      1-  885     	MOVAR	r0x1017
     008E 21rr                      1-  886     	MOVIA	(_muchKeyCount + 0)
                                    1-  887     ;;2	MOVAR	r0x1018
     008F 00rr                      1-  888     	MOVAR	STK02
     0090 01rr                      1-  889     	MOVR	r0x1017,W
     0091 00rr                      1-  890     	MOVAR	STK01
     0092 2100                      1-  891     	MOVIA	0x00
     0093 00rr                      1-  892     	MOVAR	STK00
     0094 01rr                      1-  893     	MOVR	r0x1016,W
                                    1-  894     	MCALL	_keyRead
     0095 2rrr                      3-   66 m1      LCALL rom_address
     0096 00rr                      1-  895     	MOVAR	r0x1016
     0097 01rr                      1-  896     	MOVR	r0x1016,W
     0098 0D03                      1-  897     	BTRSC	STATUS,2
                                    1-  898     	MGOTO	_00177_DS_
     0099 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  899     	.line	169, "main.c"; 	if(++gnStep > 3)
     009A 05rr                      1-  900     	INCR	_gnStep,F
                                    1-  901     ;;swapping arguments (AOP_TYPEs 1/3)
                                    1-  902     ;;unsigned compare: left >= lit (0x4=4), size=1
     009B 2104                      1-  903     	MOVIA	0x04
     009C 04rr                      1-  904     	SUBAR	_gnStep,W
     009D 0803                      1-  905     	BTRSS	STATUS,0
                                    1-  906     	MGOTO	_00159_DS_
     009E 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  907     	.line	171, "main.c"; 	gnStep = 0;
     009F 02rr                      1-  908     	CLRR	_gnStep
                                    1-  909     	.line	172, "main.c"; 	LEDOFF();
     00A0 1Crr                      1-  910     	BCR	_PORTB,0
                                    1-  911     	.line	173, "main.c"; 	workFlag = 0;
     00A1 02rr                      1-  912     	CLRR	_workFlag
                                    1-  913     	.line	174, "main.c"; 	workStep = 0;
     00A2 02rr                      1-  914     	CLRR	_workStep
                                    1-  915     	.line	175, "main.c"; 	pwmDuty = 0;
     00A3 02rr                      1-  916     	CLRR	_pwmDuty
     00A4                           1-  917     _00159_DS_:
                                    1-  918     	.line	177, "main.c"; 	if(gnStep > 0)
     00A4 01rr                      1-  919     	MOVR	_gnStep,W
     00A5 0D03                      1-  920     	BTRSC	STATUS,2
                                    1-  921     	MGOTO	_00177_DS_
     00A6 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  922     	.line	179, "main.c"; 	workFlag = 1;
     00A7 2101                      1-  923     	MOVIA	0x01
     00A8 00rr                      1-  924     	MOVAR	_workFlag
                                    1-  925     	.line	180, "main.c"; 	if(gnStep == 1)
     00A9 01rr                      1-  926     	MOVR	_gnStep,W
     00AA 2401                      1-  927     	XORIA	0x01
     00AB 0903                      1-  928     	BTRSS	STATUS,2
                                    1-  929     	MGOTO	_00166_DS_
     00AC 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  930     	.line	182, "main.c"; 	PORTB &= 0xF9;
     00AD 21F9                      1-  931     	MOVIA	0xf9
     00AE 10rr                      1-  932     	ANDAR	_PORTB,F
                                    1-  933     	.line	183, "main.c"; 	zfWaitTime = 40;
     00AF 2128                      1-  934     	MOVIA	0x28
     00B0 00rr                      1-  935     	MOVAR	_zfWaitTime
                                    1-  936     	.line	184, "main.c"; 	zfFlag = 0;
     00B1 02rr                      1-  937     	CLRR	_zfFlag
                                    1-  938     	.line	185, "main.c"; 	workStep = 3;
     00B2 2103                      1-  939     	MOVIA	0x03
     00B3 00rr                      1-  940     	MOVAR	_workStep
                                    1-  941     	.line	186, "main.c"; 	pwmDuty = 99;
     00B4 2163                      1-  942     	MOVIA	0x63
     00B5 00rr                      1-  943     	MOVAR	_pwmDuty
                                    1-  944     	.line	187, "main.c"; 	LEDON();
     00B6 18rr                      1-  945     	BSR	_PORTB,0
                                    1-  946     	MGOTO	_00177_DS_
     00B7 3rrr                      3-   63 m1      LGOTO rom_address
     00B8                           1-  947     _00166_DS_:
                                    1-  948     	.line	189, "main.c"; 	else if(gnStep == 2)
     00B8 01rr                      1-  949     	MOVR	_gnStep,W
     00B9 2402                      1-  950     	XORIA	0x02
     00BA 0903                      1-  951     	BTRSS	STATUS,2
                                    1-  952     	MGOTO	_00163_DS_
     00BB 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  953     	.line	191, "main.c"; 	PORTB &= 0xF9;
     00BC 21F9                      1-  954     	MOVIA	0xf9
     00BD 10rr                      1-  955     	ANDAR	_PORTB,F
                                    1-  956     	.line	192, "main.c"; 	zfWaitTime = 40;
     00BE 2128                      1-  957     	MOVIA	0x28
     00BF 00rr                      1-  958     	MOVAR	_zfWaitTime
                                    1-  959     	.line	193, "main.c"; 	zfFlag = 1;
     00C0 2101                      1-  960     	MOVIA	0x01
     00C1 00rr                      1-  961     	MOVAR	_zfFlag
                                    1-  962     	.line	194, "main.c"; 	LEDON();
     00C2 18rr                      1-  963     	BSR	_PORTB,0
                                    1-  964     	MGOTO	_00177_DS_
     00C3 3rrr                      3-   63 m1      LGOTO rom_address
     00C4                           1-  965     _00163_DS_:
                                    1-  966     	.line	196, "main.c"; 	else if(gnStep == 3)
     00C4 01rr                      1-  967     	MOVR	_gnStep,W
     00C5 2403                      1-  968     	XORIA	0x03
     00C6 0903                      1-  969     	BTRSS	STATUS,2
                                    1-  970     	MGOTO	_00177_DS_
     00C7 3rrr                      3-   63 m1      LGOTO rom_address
                                    1-  971     	.line	198, "main.c"; 	zfFlag = 1;
     00C8 2101                      1-  972     	MOVIA	0x01
     00C9 00rr                      1-  973     	MOVAR	_zfFlag
                                    1-  974     	.line	199, "main.c"; 	LEDOFF();
     00CA 1Crr                      1-  975     	BCR	_PORTB,0
     00CB                           1-  976     _00177_DS_:
                                    1-  977     	.line	205, "main.c"; 	}
                                    1-  978     	RETURN	
     00CB 0010                      3-   40 m1      ret
                                    1-  979     ; exit point of _keyCon
                                    1-  982     ;	code size estimation:
                                    1-  983     ;	  422+    0 =   422 instructions (  844 byte)
                                    1-  985     	end

SYMBOL TABLE            TYPE     VALUE
__PIN_COUNT__           Constant 00000006
__PROCESSOR__           Constant 00800503
C                       Constant 00000000
DC                      Constant 00000001
ENABLE_RAM_BANK         Constant 00000000
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
STATUS                  Constant 00000003
USEFGOTO                Constant 00000000
W                       Constant 00000000
Z                       Constant 00000002


SOURCE FILE TABLE
001 OBJ/main.s
002 ny8a050d.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A050D (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000001FF
DATA ROM     = 0x00000000 - 0x000001FF
RESERVED MEM = 0x00000200 - 0x00000210
SRAM / SFR   = 0x00000000 - 0x00000000
